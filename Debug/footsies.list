
footsies.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800684c  0800684c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800684c  0800684c  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800684c  0800684c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08006854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001050  200001f0  08006a44  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001240  08006a44  00021240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1c2  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d87  00000000  00000000  0003c3db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001518  00000000  00000000  00040168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001340  00000000  00000000  00041680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001874a  00000000  00000000  000429c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012bd4  00000000  00000000  0005b10a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ecf8  00000000  00000000  0006dcde  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec9d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  000eca54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e94 	.word	0x08005e94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08005e94 	.word	0x08005e94

08000150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <HAL_Init+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a07      	ldr	r2, [pc, #28]	; (8000178 <HAL_Init+0x28>)
 800015a:	f043 0310 	orr.w	r3, r3, #16
 800015e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000160:	2003      	movs	r0, #3
 8000162:	f000 fce1 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000166:	2000      	movs	r0, #0
 8000168:	f005 fd8a 	bl	8005c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800016c:	f005 fcc6 	bl	8005afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000170:	2300      	movs	r3, #0
}
 8000172:	4618      	mov	r0, r3
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40022000 	.word	0x40022000

0800017c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <HAL_IncTick+0x1c>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	461a      	mov	r2, r3
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <HAL_IncTick+0x20>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4413      	add	r3, r2
 800018c:	4a03      	ldr	r2, [pc, #12]	; (800019c <HAL_IncTick+0x20>)
 800018e:	6013      	str	r3, [r2, #0]
}
 8000190:	bf00      	nop
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000004 	.word	0x20000004
 800019c:	20001160 	.word	0x20001160

080001a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
  return uwTick;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <HAL_GetTick+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	20001160 	.word	0x20001160

080001b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b086      	sub	sp, #24
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80001bc:	2300      	movs	r3, #0
 80001be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80001c0:	2300      	movs	r3, #0
 80001c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80001c4:	2300      	movs	r3, #0
 80001c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80001c8:	2300      	movs	r3, #0
 80001ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d101      	bne.n	80001d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
 80001d4:	e0be      	b.n	8000354 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	689b      	ldr	r3, [r3, #8]
 80001da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d109      	bne.n	80001f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2200      	movs	r2, #0
 80001ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f005 fcba 	bl	8005b6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80001f8:	6878      	ldr	r0, [r7, #4]
 80001fa:	f000 fbb1 	bl	8000960 <ADC_ConversionStop_Disable>
 80001fe:	4603      	mov	r3, r0
 8000200:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000206:	f003 0310 	and.w	r3, r3, #16
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8099 	bne.w	8000342 <HAL_ADC_Init+0x18e>
 8000210:	7dfb      	ldrb	r3, [r7, #23]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8095 	bne.w	8000342 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800021c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000220:	f023 0302 	bic.w	r3, r3, #2
 8000224:	f043 0202 	orr.w	r2, r3, #2
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000234:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	7b1b      	ldrb	r3, [r3, #12]
 800023a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800023c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800023e:	68ba      	ldr	r2, [r7, #8]
 8000240:	4313      	orrs	r3, r2
 8000242:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800024c:	d003      	beq.n	8000256 <HAL_ADC_Init+0xa2>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	689b      	ldr	r3, [r3, #8]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d102      	bne.n	800025c <HAL_ADC_Init+0xa8>
 8000256:	f44f 7380 	mov.w	r3, #256	; 0x100
 800025a:	e000      	b.n	800025e <HAL_ADC_Init+0xaa>
 800025c:	2300      	movs	r3, #0
 800025e:	693a      	ldr	r2, [r7, #16]
 8000260:	4313      	orrs	r3, r2
 8000262:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	7d1b      	ldrb	r3, [r3, #20]
 8000268:	2b01      	cmp	r3, #1
 800026a:	d119      	bne.n	80002a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	7b1b      	ldrb	r3, [r3, #12]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d109      	bne.n	8000288 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	3b01      	subs	r3, #1
 800027a:	035a      	lsls	r2, r3, #13
 800027c:	693b      	ldr	r3, [r7, #16]
 800027e:	4313      	orrs	r3, r2
 8000280:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000284:	613b      	str	r3, [r7, #16]
 8000286:	e00b      	b.n	80002a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800028c:	f043 0220 	orr.w	r2, r3, #32
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000298:	f043 0201 	orr.w	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	693a      	ldr	r2, [r7, #16]
 80002b0:	430a      	orrs	r2, r1
 80002b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	4b28      	ldr	r3, [pc, #160]	; (800035c <HAL_ADC_Init+0x1a8>)
 80002bc:	4013      	ands	r3, r2
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	6812      	ldr	r2, [r2, #0]
 80002c2:	68b9      	ldr	r1, [r7, #8]
 80002c4:	430b      	orrs	r3, r1
 80002c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002d0:	d003      	beq.n	80002da <HAL_ADC_Init+0x126>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d104      	bne.n	80002e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	691b      	ldr	r3, [r3, #16]
 80002de:	3b01      	subs	r3, #1
 80002e0:	051b      	lsls	r3, r3, #20
 80002e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	430a      	orrs	r2, r1
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <HAL_ADC_Init+0x1ac>)
 8000300:	4013      	ands	r3, r2
 8000302:	68ba      	ldr	r2, [r7, #8]
 8000304:	429a      	cmp	r2, r3
 8000306:	d10b      	bne.n	8000320 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000312:	f023 0303 	bic.w	r3, r3, #3
 8000316:	f043 0201 	orr.w	r2, r3, #1
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800031e:	e018      	b.n	8000352 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000324:	f023 0312 	bic.w	r3, r3, #18
 8000328:	f043 0210 	orr.w	r2, r3, #16
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000334:	f043 0201 	orr.w	r2, r3, #1
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800033c:	2301      	movs	r3, #1
 800033e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000340:	e007      	b.n	8000352 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000346:	f043 0210 	orr.w	r2, r3, #16
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800034e:	2301      	movs	r3, #1
 8000350:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000352:	7dfb      	ldrb	r3, [r7, #23]
}
 8000354:	4618      	mov	r0, r3
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	ffe1f7fd 	.word	0xffe1f7fd
 8000360:	ff1f0efe 	.word	0xff1f0efe

08000364 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800036c:	2300      	movs	r3, #0
 800036e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000376:	2b01      	cmp	r3, #1
 8000378:	d101      	bne.n	800037e <HAL_ADC_Start+0x1a>
 800037a:	2302      	movs	r3, #2
 800037c:	e098      	b.n	80004b0 <HAL_ADC_Start+0x14c>
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2201      	movs	r2, #1
 8000382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f000 fa98 	bl	80008bc <ADC_Enable>
 800038c:	4603      	mov	r3, r0
 800038e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	2b00      	cmp	r3, #0
 8000394:	f040 8087 	bne.w	80004a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800039c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003a0:	f023 0301 	bic.w	r3, r3, #1
 80003a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a41      	ldr	r2, [pc, #260]	; (80004b8 <HAL_ADC_Start+0x154>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d105      	bne.n	80003c2 <HAL_ADC_Start+0x5e>
 80003b6:	4b41      	ldr	r3, [pc, #260]	; (80004bc <HAL_ADC_Start+0x158>)
 80003b8:	685b      	ldr	r3, [r3, #4]
 80003ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d115      	bne.n	80003ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d026      	beq.n	800042a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80003e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80003ec:	e01d      	b.n	800042a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	4a2f      	ldr	r2, [pc, #188]	; (80004bc <HAL_ADC_Start+0x158>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d004      	beq.n	800040e <HAL_ADC_Start+0xaa>
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a2b      	ldr	r2, [pc, #172]	; (80004b8 <HAL_ADC_Start+0x154>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d10d      	bne.n	800042a <HAL_ADC_Start+0xc6>
 800040e:	4b2b      	ldr	r3, [pc, #172]	; (80004bc <HAL_ADC_Start+0x158>)
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000416:	2b00      	cmp	r3, #0
 8000418:	d007      	beq.n	800042a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800041e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000432:	2b00      	cmp	r3, #0
 8000434:	d006      	beq.n	8000444 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800043a:	f023 0206 	bic.w	r2, r3, #6
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	62da      	str	r2, [r3, #44]	; 0x2c
 8000442:	e002      	b.n	800044a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	2200      	movs	r2, #0
 8000448:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2200      	movs	r2, #0
 800044e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f06f 0202 	mvn.w	r2, #2
 800045a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	689b      	ldr	r3, [r3, #8]
 8000462:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000466:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800046a:	d113      	bne.n	8000494 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000470:	4a11      	ldr	r2, [pc, #68]	; (80004b8 <HAL_ADC_Start+0x154>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d105      	bne.n	8000482 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HAL_ADC_Start+0x158>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800047e:	2b00      	cmp	r3, #0
 8000480:	d108      	bne.n	8000494 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	689a      	ldr	r2, [r3, #8]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	e00c      	b.n	80004ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	689a      	ldr	r2, [r3, #8]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	e003      	b.n	80004ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2200      	movs	r2, #0
 80004aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80004ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40012800 	.word	0x40012800
 80004bc:	40012400 	.word	0x40012400

080004c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b087      	sub	sp, #28
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80004d6:	f7ff fe63 	bl	80001a0 <HAL_GetTick>
 80004da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00b      	beq.n	8000502 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ee:	f043 0220 	orr.w	r2, r3, #32
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80004fe:	2301      	movs	r3, #1
 8000500:	e0c8      	b.n	8000694 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050c:	2b00      	cmp	r3, #0
 800050e:	d12a      	bne.n	8000566 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000516:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800051a:	2b00      	cmp	r3, #0
 800051c:	d123      	bne.n	8000566 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800051e:	e01a      	b.n	8000556 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000526:	d016      	beq.n	8000556 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d007      	beq.n	800053e <HAL_ADC_PollForConversion+0x7e>
 800052e:	f7ff fe37 	bl	80001a0 <HAL_GetTick>
 8000532:	4602      	mov	r2, r0
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	683a      	ldr	r2, [r7, #0]
 800053a:	429a      	cmp	r2, r3
 800053c:	d20b      	bcs.n	8000556 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000542:	f043 0204 	orr.w	r2, r3, #4
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000552:	2303      	movs	r3, #3
 8000554:	e09e      	b.n	8000694 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0dd      	beq.n	8000520 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000564:	e06c      	b.n	8000640 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000566:	4b4d      	ldr	r3, [pc, #308]	; (800069c <HAL_ADC_PollForConversion+0x1dc>)
 8000568:	681c      	ldr	r4, [r3, #0]
 800056a:	2002      	movs	r0, #2
 800056c:	f001 f9aa 	bl	80018c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000570:	4603      	mov	r3, r0
 8000572:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	6919      	ldr	r1, [r3, #16]
 800057c:	4b48      	ldr	r3, [pc, #288]	; (80006a0 <HAL_ADC_PollForConversion+0x1e0>)
 800057e:	400b      	ands	r3, r1
 8000580:	2b00      	cmp	r3, #0
 8000582:	d118      	bne.n	80005b6 <HAL_ADC_PollForConversion+0xf6>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68d9      	ldr	r1, [r3, #12]
 800058a:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <HAL_ADC_PollForConversion+0x1e4>)
 800058c:	400b      	ands	r3, r1
 800058e:	2b00      	cmp	r3, #0
 8000590:	d111      	bne.n	80005b6 <HAL_ADC_PollForConversion+0xf6>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	6919      	ldr	r1, [r3, #16]
 8000598:	4b43      	ldr	r3, [pc, #268]	; (80006a8 <HAL_ADC_PollForConversion+0x1e8>)
 800059a:	400b      	ands	r3, r1
 800059c:	2b00      	cmp	r3, #0
 800059e:	d108      	bne.n	80005b2 <HAL_ADC_PollForConversion+0xf2>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	68d9      	ldr	r1, [r3, #12]
 80005a6:	4b41      	ldr	r3, [pc, #260]	; (80006ac <HAL_ADC_PollForConversion+0x1ec>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <HAL_ADC_PollForConversion+0xf2>
 80005ae:	2314      	movs	r3, #20
 80005b0:	e020      	b.n	80005f4 <HAL_ADC_PollForConversion+0x134>
 80005b2:	2329      	movs	r3, #41	; 0x29
 80005b4:	e01e      	b.n	80005f4 <HAL_ADC_PollForConversion+0x134>
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	6919      	ldr	r1, [r3, #16]
 80005bc:	4b3a      	ldr	r3, [pc, #232]	; (80006a8 <HAL_ADC_PollForConversion+0x1e8>)
 80005be:	400b      	ands	r3, r1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d106      	bne.n	80005d2 <HAL_ADC_PollForConversion+0x112>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	68d9      	ldr	r1, [r3, #12]
 80005ca:	4b38      	ldr	r3, [pc, #224]	; (80006ac <HAL_ADC_PollForConversion+0x1ec>)
 80005cc:	400b      	ands	r3, r1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d00d      	beq.n	80005ee <HAL_ADC_PollForConversion+0x12e>
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6919      	ldr	r1, [r3, #16]
 80005d8:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <HAL_ADC_PollForConversion+0x1f0>)
 80005da:	400b      	ands	r3, r1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d108      	bne.n	80005f2 <HAL_ADC_PollForConversion+0x132>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68d9      	ldr	r1, [r3, #12]
 80005e6:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <HAL_ADC_PollForConversion+0x1f0>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <HAL_ADC_PollForConversion+0x132>
 80005ee:	2354      	movs	r3, #84	; 0x54
 80005f0:	e000      	b.n	80005f4 <HAL_ADC_PollForConversion+0x134>
 80005f2:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80005f4:	fb02 f303 	mul.w	r3, r2, r3
 80005f8:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80005fa:	e01d      	b.n	8000638 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000602:	d016      	beq.n	8000632 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d007      	beq.n	800061a <HAL_ADC_PollForConversion+0x15a>
 800060a:	f7ff fdc9 	bl	80001a0 <HAL_GetTick>
 800060e:	4602      	mov	r2, r0
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	429a      	cmp	r2, r3
 8000618:	d20b      	bcs.n	8000632 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800061e:	f043 0204 	orr.w	r2, r3, #4
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800062e:	2303      	movs	r3, #3
 8000630:	e030      	b.n	8000694 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	3301      	adds	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	693a      	ldr	r2, [r7, #16]
 800063c:	429a      	cmp	r2, r3
 800063e:	d8dd      	bhi.n	80005fc <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f06f 0212 	mvn.w	r2, #18
 8000648:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000660:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000664:	d115      	bne.n	8000692 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800066a:	2b00      	cmp	r3, #0
 800066c:	d111      	bne.n	8000692 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000672:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000682:	2b00      	cmp	r3, #0
 8000684:	d105      	bne.n	8000692 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800068a:	f043 0201 	orr.w	r2, r3, #1
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	371c      	adds	r7, #28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	200001ec 	.word	0x200001ec
 80006a0:	24924924 	.word	0x24924924
 80006a4:	00924924 	.word	0x00924924
 80006a8:	12492492 	.word	0x12492492
 80006ac:	00492492 	.word	0x00492492
 80006b0:	00249249 	.word	0x00249249

080006b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d101      	bne.n	80006ec <HAL_ADC_ConfigChannel+0x20>
 80006e8:	2302      	movs	r3, #2
 80006ea:	e0dc      	b.n	80008a6 <HAL_ADC_ConfigChannel+0x1da>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b06      	cmp	r3, #6
 80006fa:	d81c      	bhi.n	8000736 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	685a      	ldr	r2, [r3, #4]
 8000706:	4613      	mov	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4413      	add	r3, r2
 800070c:	3b05      	subs	r3, #5
 800070e:	221f      	movs	r2, #31
 8000710:	fa02 f303 	lsl.w	r3, r2, r3
 8000714:	43db      	mvns	r3, r3
 8000716:	4019      	ands	r1, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	3b05      	subs	r3, #5
 8000728:	fa00 f203 	lsl.w	r2, r0, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	430a      	orrs	r2, r1
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
 8000734:	e03c      	b.n	80007b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2b0c      	cmp	r3, #12
 800073c:	d81c      	bhi.n	8000778 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	3b23      	subs	r3, #35	; 0x23
 8000750:	221f      	movs	r2, #31
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43db      	mvns	r3, r3
 8000758:	4019      	ands	r1, r3
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	4613      	mov	r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	4413      	add	r3, r2
 8000768:	3b23      	subs	r3, #35	; 0x23
 800076a:	fa00 f203 	lsl.w	r2, r0, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	430a      	orrs	r2, r1
 8000774:	631a      	str	r2, [r3, #48]	; 0x30
 8000776:	e01b      	b.n	80007b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	3b41      	subs	r3, #65	; 0x41
 800078a:	221f      	movs	r2, #31
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	43db      	mvns	r3, r3
 8000792:	4019      	ands	r1, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4613      	mov	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4413      	add	r3, r2
 80007a2:	3b41      	subs	r3, #65	; 0x41
 80007a4:	fa00 f203 	lsl.w	r2, r0, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b09      	cmp	r3, #9
 80007b6:	d91c      	bls.n	80007f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	68d9      	ldr	r1, [r3, #12]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	3b1e      	subs	r3, #30
 80007ca:	2207      	movs	r2, #7
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	4019      	ands	r1, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	6898      	ldr	r0, [r3, #8]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	3b1e      	subs	r3, #30
 80007e4:	fa00 f203 	lsl.w	r2, r0, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	e019      	b.n	8000826 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	6919      	ldr	r1, [r3, #16]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	2207      	movs	r2, #7
 8000804:	fa02 f303 	lsl.w	r3, r2, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	4019      	ands	r1, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	6898      	ldr	r0, [r3, #8]
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	fa00 f203 	lsl.w	r2, r0, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	430a      	orrs	r2, r1
 8000824:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b10      	cmp	r3, #16
 800082c:	d003      	beq.n	8000836 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000832:	2b11      	cmp	r3, #17
 8000834:	d132      	bne.n	800089c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d125      	bne.n	800088c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d126      	bne.n	800089c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	689a      	ldr	r2, [r3, #8]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800085c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2b10      	cmp	r3, #16
 8000864:	d11a      	bne.n	800089c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800086c:	fba2 2303 	umull	r2, r3, r2, r3
 8000870:	0c9a      	lsrs	r2, r3, #18
 8000872:	4613      	mov	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800087c:	e002      	b.n	8000884 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	3b01      	subs	r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f9      	bne.n	800087e <HAL_ADC_ConfigChannel+0x1b2>
 800088a:	e007      	b.n	800089c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000890:	f043 0220 	orr.w	r2, r3, #32
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	40012400 	.word	0x40012400
 80008b4:	200001ec 	.word	0x200001ec
 80008b8:	431bde83 	.word	0x431bde83

080008bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d039      	beq.n	800094e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f042 0201 	orr.w	r2, r2, #1
 80008e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <ADC_Enable+0x9c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a1b      	ldr	r2, [pc, #108]	; (800095c <ADC_Enable+0xa0>)
 80008f0:	fba2 2303 	umull	r2, r3, r2, r3
 80008f4:	0c9b      	lsrs	r3, r3, #18
 80008f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80008f8:	e002      	b.n	8000900 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f9      	bne.n	80008fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000906:	f7ff fc4b 	bl	80001a0 <HAL_GetTick>
 800090a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800090c:	e018      	b.n	8000940 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800090e:	f7ff fc47 	bl	80001a0 <HAL_GetTick>
 8000912:	4602      	mov	r2, r0
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	2b02      	cmp	r3, #2
 800091a:	d911      	bls.n	8000940 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	f043 0210 	orr.w	r2, r3, #16
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	f043 0201 	orr.w	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	e007      	b.n	8000950 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	2b01      	cmp	r3, #1
 800094c:	d1df      	bne.n	800090e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001ec 	.word	0x200001ec
 800095c:	431bde83 	.word	0x431bde83

08000960 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	2b01      	cmp	r3, #1
 8000978:	d127      	bne.n	80009ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 0201 	bic.w	r2, r2, #1
 8000988:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800098a:	f7ff fc09 	bl	80001a0 <HAL_GetTick>
 800098e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000990:	e014      	b.n	80009bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000992:	f7ff fc05 	bl	80001a0 <HAL_GetTick>
 8000996:	4602      	mov	r2, r0
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	2b02      	cmp	r3, #2
 800099e:	d90d      	bls.n	80009bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	f043 0210 	orr.w	r2, r3, #16
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b0:	f043 0201 	orr.w	r2, r3, #1
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
 80009ba:	e007      	b.n	80009cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d0e3      	beq.n	8000992 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4906      	ldr	r1, [pc, #24]	; (8000a6c <__NVIC_EnableIRQ+0x34>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff4f 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff64 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ffb2 	bl	8000ac4 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff81 	bl	8000a70 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff57 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b08b      	sub	sp, #44	; 0x2c
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e127      	b.n	8000df8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	f040 8116 	bne.w	8000df2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	d034      	beq.n	8000c38 <HAL_GPIO_Init+0xa4>
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	d80d      	bhi.n	8000bee <HAL_GPIO_Init+0x5a>
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d02b      	beq.n	8000c2e <HAL_GPIO_Init+0x9a>
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d804      	bhi.n	8000be4 <HAL_GPIO_Init+0x50>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d031      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d01c      	beq.n	8000c1c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be2:	e048      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d043      	beq.n	8000c70 <HAL_GPIO_Init+0xdc>
 8000be8:	2b11      	cmp	r3, #17
 8000bea:	d01b      	beq.n	8000c24 <HAL_GPIO_Init+0x90>
          break;
 8000bec:	e043      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bee:	4a89      	ldr	r2, [pc, #548]	; (8000e14 <HAL_GPIO_Init+0x280>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d026      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000bf4:	4a87      	ldr	r2, [pc, #540]	; (8000e14 <HAL_GPIO_Init+0x280>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d806      	bhi.n	8000c08 <HAL_GPIO_Init+0x74>
 8000bfa:	4a87      	ldr	r2, [pc, #540]	; (8000e18 <HAL_GPIO_Init+0x284>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d020      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000c00:	4a86      	ldr	r2, [pc, #536]	; (8000e1c <HAL_GPIO_Init+0x288>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d01d      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
          break;
 8000c06:	e036      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c08:	4a85      	ldr	r2, [pc, #532]	; (8000e20 <HAL_GPIO_Init+0x28c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d019      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000c0e:	4a85      	ldr	r2, [pc, #532]	; (8000e24 <HAL_GPIO_Init+0x290>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d016      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000c14:	4a84      	ldr	r2, [pc, #528]	; (8000e28 <HAL_GPIO_Init+0x294>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
          break;
 8000c1a:	e02c      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e028      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e023      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	3308      	adds	r3, #8
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e01e      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	330c      	adds	r3, #12
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e019      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e012      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	611a      	str	r2, [r3, #16]
          break;
 8000c62:	e008      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	615a      	str	r2, [r3, #20]
          break;
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2bff      	cmp	r3, #255	; 0xff
 8000c7a:	d801      	bhi.n	8000c80 <HAL_GPIO_Init+0xec>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	e001      	b.n	8000c84 <HAL_GPIO_Init+0xf0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3304      	adds	r3, #4
 8000c84:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2bff      	cmp	r3, #255	; 0xff
 8000c8a:	d802      	bhi.n	8000c92 <HAL_GPIO_Init+0xfe>
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_Init+0x104>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	3b08      	subs	r3, #8
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	401a      	ands	r2, r3
 8000caa:	6a39      	ldr	r1, [r7, #32]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 8096 	beq.w	8000df2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc6:	4b59      	ldr	r3, [pc, #356]	; (8000e2c <HAL_GPIO_Init+0x298>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a58      	ldr	r2, [pc, #352]	; (8000e2c <HAL_GPIO_Init+0x298>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <HAL_GPIO_Init+0x298>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cde:	4a54      	ldr	r2, [pc, #336]	; (8000e30 <HAL_GPIO_Init+0x29c>)
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4b      	ldr	r2, [pc, #300]	; (8000e34 <HAL_GPIO_Init+0x2a0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x19e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4a      	ldr	r2, [pc, #296]	; (8000e38 <HAL_GPIO_Init+0x2a4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x19a>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a49      	ldr	r2, [pc, #292]	; (8000e3c <HAL_GPIO_Init+0x2a8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x196>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x192>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d32:	2300      	movs	r3, #0
 8000d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d36:	f002 0203 	and.w	r2, r2, #3
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d44:	493a      	ldr	r1, [pc, #232]	; (8000e30 <HAL_GPIO_Init+0x29c>)
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d006      	beq.n	8000d6c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4938      	ldr	r1, [pc, #224]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	4933      	ldr	r1, [pc, #204]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	492e      	ldr	r1, [pc, #184]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]
 8000d92:	e006      	b.n	8000da2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	4929      	ldr	r1, [pc, #164]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	4924      	ldr	r1, [pc, #144]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	608b      	str	r3, [r1, #8]
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	491f      	ldr	r1, [pc, #124]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	491a      	ldr	r1, [pc, #104]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60cb      	str	r3, [r1, #12]
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4915      	ldr	r1, [pc, #84]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f aed0 	bne.w	8000ba8 <HAL_GPIO_Init+0x14>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	372c      	adds	r7, #44	; 0x2c
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	10210000 	.word	0x10210000
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	10120000 	.word	0x10120000
 8000e20:	10310000 	.word	0x10310000
 8000e24:	10320000 	.word	0x10320000
 8000e28:	10220000 	.word	0x10220000
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	40011400 	.word	0x40011400
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e001      	b.n	8000e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	807b      	strh	r3, [r7, #2]
 8000e82:	4613      	mov	r3, r2
 8000e84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e86:	787b      	ldrb	r3, [r7, #1]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8c:	887a      	ldrh	r2, [r7, #2]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e92:	e003      	b.n	8000e9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	041a      	lsls	r2, r3, #16
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
	...

08000ea8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_PWR_EnableBkUpAccess+0x14>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	420e0020 	.word	0x420e0020

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e26c      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 8087 	beq.w	8000fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ee0:	4b92      	ldr	r3, [pc, #584]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b04      	cmp	r3, #4
 8000eea:	d00c      	beq.n	8000f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eec:	4b8f      	ldr	r3, [pc, #572]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d112      	bne.n	8000f1e <HAL_RCC_OscConfig+0x5e>
 8000ef8:	4b8c      	ldr	r3, [pc, #560]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f04:	d10b      	bne.n	8000f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f06:	4b89      	ldr	r3, [pc, #548]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06c      	beq.n	8000fec <HAL_RCC_OscConfig+0x12c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d168      	bne.n	8000fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e246      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f26:	d106      	bne.n	8000f36 <HAL_RCC_OscConfig+0x76>
 8000f28:	4b80      	ldr	r3, [pc, #512]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a7f      	ldr	r2, [pc, #508]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e02e      	b.n	8000f94 <HAL_RCC_OscConfig+0xd4>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10c      	bne.n	8000f58 <HAL_RCC_OscConfig+0x98>
 8000f3e:	4b7b      	ldr	r3, [pc, #492]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a7a      	ldr	r2, [pc, #488]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	4b78      	ldr	r3, [pc, #480]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a77      	ldr	r2, [pc, #476]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	e01d      	b.n	8000f94 <HAL_RCC_OscConfig+0xd4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f60:	d10c      	bne.n	8000f7c <HAL_RCC_OscConfig+0xbc>
 8000f62:	4b72      	ldr	r3, [pc, #456]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a71      	ldr	r2, [pc, #452]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	4b6f      	ldr	r3, [pc, #444]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a6e      	ldr	r2, [pc, #440]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_RCC_OscConfig+0xd4>
 8000f7c:	4b6b      	ldr	r3, [pc, #428]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a6a      	ldr	r2, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a67      	ldr	r2, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff f900 	bl	80001a0 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff f8fc 	bl	80001a0 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1fa      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xe4>
 8000fc2:	e014      	b.n	8000fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff f8ec 	bl	80001a0 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff f8e8 	bl	80001a0 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e1e6      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fde:	4b53      	ldr	r3, [pc, #332]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x10c>
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d063      	beq.n	80010c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffa:	4b4c      	ldr	r3, [pc, #304]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 030c 	and.w	r3, r3, #12
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001006:	4b49      	ldr	r3, [pc, #292]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b08      	cmp	r3, #8
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x18c>
 8001012:	4b46      	ldr	r3, [pc, #280]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d116      	bne.n	800104c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101e:	4b43      	ldr	r3, [pc, #268]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <HAL_RCC_OscConfig+0x176>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	691b      	ldr	r3, [r3, #16]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d001      	beq.n	8001036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e1ba      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4939      	ldr	r1, [pc, #228]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001046:	4313      	orrs	r3, r2
 8001048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	e03a      	b.n	80010c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d020      	beq.n	8001096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001054:	4b36      	ldr	r3, [pc, #216]	; (8001130 <HAL_RCC_OscConfig+0x270>)
 8001056:	2201      	movs	r2, #1
 8001058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105a:	f7ff f8a1 	bl	80001a0 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001062:	f7ff f89d 	bl	80001a0 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e19b      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0f0      	beq.n	8001062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4927      	ldr	r1, [pc, #156]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e015      	b.n	80010c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001096:	4b26      	ldr	r3, [pc, #152]	; (8001130 <HAL_RCC_OscConfig+0x270>)
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff f880 	bl	80001a0 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a4:	f7ff f87c 	bl	80001a0 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e17a      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d03a      	beq.n	8001144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d019      	beq.n	800110a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_RCC_OscConfig+0x274>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff f860 	bl	80001a0 <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e4:	f7ff f85c 	bl	80001a0 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e15a      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_RCC_OscConfig+0x26c>)
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f0      	beq.n	80010e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001102:	2001      	movs	r0, #1
 8001104:	f000 fb0a 	bl	800171c <RCC_Delay>
 8001108:	e01c      	b.n	8001144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_RCC_OscConfig+0x274>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff f846 	bl	80001a0 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001116:	e00f      	b.n	8001138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001118:	f7ff f842 	bl	80001a0 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d908      	bls.n	8001138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e140      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	42420000 	.word	0x42420000
 8001134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001138:	4b9e      	ldr	r3, [pc, #632]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e9      	bne.n	8001118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80a6 	beq.w	800129e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001156:	4b97      	ldr	r3, [pc, #604]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10d      	bne.n	800117e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b94      	ldr	r3, [pc, #592]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a93      	ldr	r2, [pc, #588]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b91      	ldr	r3, [pc, #580]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800117a:	2301      	movs	r3, #1
 800117c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117e:	4b8e      	ldr	r3, [pc, #568]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d118      	bne.n	80011bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800118a:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a8a      	ldr	r2, [pc, #552]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 8001190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001196:	f7ff f803 	bl	80001a0 <HAL_GetTick>
 800119a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800119e:	f7fe ffff 	bl	80001a0 <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b64      	cmp	r3, #100	; 0x64
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e0fd      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b0:	4b81      	ldr	r3, [pc, #516]	; (80013b8 <HAL_RCC_OscConfig+0x4f8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d0f0      	beq.n	800119e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x312>
 80011c4:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a7a      	ldr	r2, [pc, #488]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	e02d      	b.n	800122e <HAL_RCC_OscConfig+0x36e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x334>
 80011da:	4b76      	ldr	r3, [pc, #472]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80011dc:	6a1b      	ldr	r3, [r3, #32]
 80011de:	4a75      	ldr	r2, [pc, #468]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	f023 0301 	bic.w	r3, r3, #1
 80011e4:	6213      	str	r3, [r2, #32]
 80011e6:	4b73      	ldr	r3, [pc, #460]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a72      	ldr	r2, [pc, #456]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	f023 0304 	bic.w	r3, r3, #4
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	e01c      	b.n	800122e <HAL_RCC_OscConfig+0x36e>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d10c      	bne.n	8001216 <HAL_RCC_OscConfig+0x356>
 80011fc:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	4a6c      	ldr	r2, [pc, #432]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001202:	f043 0304 	orr.w	r3, r3, #4
 8001206:	6213      	str	r3, [r2, #32]
 8001208:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4a69      	ldr	r2, [pc, #420]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6213      	str	r3, [r2, #32]
 8001214:	e00b      	b.n	800122e <HAL_RCC_OscConfig+0x36e>
 8001216:	4b67      	ldr	r3, [pc, #412]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	6a1b      	ldr	r3, [r3, #32]
 800121a:	4a66      	ldr	r2, [pc, #408]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	f023 0301 	bic.w	r3, r3, #1
 8001220:	6213      	str	r3, [r2, #32]
 8001222:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001224:	6a1b      	ldr	r3, [r3, #32]
 8001226:	4a63      	ldr	r2, [pc, #396]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	f023 0304 	bic.w	r3, r3, #4
 800122c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d015      	beq.n	8001262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001236:	f7fe ffb3 	bl	80001a0 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	e00a      	b.n	8001254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123e:	f7fe ffaf 	bl	80001a0 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0ab      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001254:	4b57      	ldr	r3, [pc, #348]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001256:	6a1b      	ldr	r3, [r3, #32]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0ee      	beq.n	800123e <HAL_RCC_OscConfig+0x37e>
 8001260:	e014      	b.n	800128c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7fe ff9d 	bl	80001a0 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7fe ff99 	bl	80001a0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e095      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001280:	4b4c      	ldr	r3, [pc, #304]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1ee      	bne.n	800126a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d105      	bne.n	800129e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001292:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a47      	ldr	r2, [pc, #284]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8081 	beq.w	80013aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d061      	beq.n	8001378 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d146      	bne.n	800134a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012bc:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <HAL_RCC_OscConfig+0x4fc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7fe ff6d 	bl	80001a0 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012ca:	f7fe ff69 	bl	80001a0 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e067      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f0      	bne.n	80012ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d108      	bne.n	8001304 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	492d      	ldr	r1, [pc, #180]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001304:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a19      	ldr	r1, [r3, #32]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	430b      	orrs	r3, r1
 8001316:	4927      	ldr	r1, [pc, #156]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800131c:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x4fc>)
 800131e:	2201      	movs	r2, #1
 8001320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001322:	f7fe ff3d 	bl	80001a0 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132a:	f7fe ff39 	bl	80001a0 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e037      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x46a>
 8001348:	e02f      	b.n	80013aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134a:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <HAL_RCC_OscConfig+0x4fc>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7fe ff26 	bl	80001a0 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7fe ff22 	bl	80001a0 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e020      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x498>
 8001376:	e018      	b.n	80013aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e013      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_OscConfig+0x4f4>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	429a      	cmp	r2, r3
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40007000 	.word	0x40007000
 80013bc:	42420060 	.word	0x42420060

080013c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0d0      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d910      	bls.n	8001404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e2:	4b67      	ldr	r3, [pc, #412]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 0207 	bic.w	r2, r3, #7
 80013ea:	4965      	ldr	r1, [pc, #404]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b8      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001426:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800143e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d040      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d115      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d107      	bne.n	800148e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d109      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e073      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06b      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800149e:	4b39      	ldr	r3, [pc, #228]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f023 0203 	bic.w	r2, r3, #3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4936      	ldr	r1, [pc, #216]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b0:	f7fe fe76 	bl	80001a0 <HAL_GetTick>
 80014b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014b8:	f7fe fe72 	bl	80001a0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e053      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 020c 	and.w	r2, r3, #12
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	429a      	cmp	r2, r3
 80014de:	d1eb      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d210      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f023 0207 	bic.w	r2, r3, #7
 80014f6:	4922      	ldr	r1, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x1c0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e032      	b.n	8001576 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800154e:	f000 f821 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8001552:	4601      	mov	r1, r0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1c8>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	fa21 f303 	lsr.w	r3, r1, r3
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1cc>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1d0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fb86 	bl	8005c80 <HAL_InitTick>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	08006834 	.word	0x08006834
 800158c:	200001ec 	.word	0x200001ec
 8001590:	20000000 	.word	0x20000000

08001594 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b490      	push	{r4, r7}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_RCC_GetSysClockFreq+0xb0>)
 800159c:	1d3c      	adds	r4, r7, #4
 800159e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015a4:	4b28      	ldr	r3, [pc, #160]	; (8001648 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d002      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x40>
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d003      	beq.n	80015da <HAL_RCC_GetSysClockFreq+0x46>
 80015d2:	e02d      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015d6:	623b      	str	r3, [r7, #32]
      break;
 80015d8:	e02d      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	0c9b      	lsrs	r3, r3, #18
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015e6:	4413      	add	r3, r2
 80015e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	0c5b      	lsrs	r3, r3, #17
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001606:	4413      	add	r3, r2
 8001608:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800160c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001612:	fb02 f203 	mul.w	r2, r2, r3
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e004      	b.n	800162a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001624:	fb02 f303 	mul.w	r3, r2, r3
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	623b      	str	r3, [r7, #32]
      break;
 800162e:	e002      	b.n	8001636 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001632:	623b      	str	r3, [r7, #32]
      break;
 8001634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001636:	6a3b      	ldr	r3, [r7, #32]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bc90      	pop	{r4, r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	08005eac 	.word	0x08005eac
 8001648:	08005ebc 	.word	0x08005ebc
 800164c:	40021000 	.word	0x40021000
 8001650:	007a1200 	.word	0x007a1200
 8001654:	003d0900 	.word	0x003d0900

08001658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <HAL_RCC_GetHCLKFreq+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	200001ec 	.word	0x200001ec

0800166c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001670:	f7ff fff2 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 8001674:	4601      	mov	r1, r0
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	0a1b      	lsrs	r3, r3, #8
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000
 8001690:	08006844 	.word	0x08006844

08001694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001698:	f7ff ffde 	bl	8001658 <HAL_RCC_GetHCLKFreq>
 800169c:	4601      	mov	r1, r0
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	0adb      	lsrs	r3, r3, #11
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	4a03      	ldr	r2, [pc, #12]	; (80016b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08006844 	.word	0x08006844

080016bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	220f      	movs	r2, #15
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_RCC_GetClockConfig+0x58>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0203 	and.w	r2, r3, #3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_RCC_GetClockConfig+0x58>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_GetClockConfig+0x58>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_RCC_GetClockConfig+0x58>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_GetClockConfig+0x5c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0207 	and.w	r2, r3, #7
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	40022000 	.word	0x40022000

0800171c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001724:	4b0a      	ldr	r3, [pc, #40]	; (8001750 <RCC_Delay+0x34>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <RCC_Delay+0x38>)
 800172a:	fba2 2303 	umull	r2, r3, r2, r3
 800172e:	0a5b      	lsrs	r3, r3, #9
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	fb02 f303 	mul.w	r3, r2, r3
 8001736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001738:	bf00      	nop
  }
  while (Delay --);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	60fa      	str	r2, [r7, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f9      	bne.n	8001738 <RCC_Delay+0x1c>
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200001ec 	.word	0x200001ec
 8001754:	10624dd3 	.word	0x10624dd3

08001758 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d07d      	beq.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001774:	2300      	movs	r3, #0
 8001776:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001778:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	4b4c      	ldr	r3, [pc, #304]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	4a4b      	ldr	r2, [pc, #300]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	61d3      	str	r3, [r2, #28]
 8001790:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179c:	2301      	movs	r3, #1
 800179e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d118      	bne.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ac:	4b43      	ldr	r3, [pc, #268]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a42      	ldr	r2, [pc, #264]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b8:	f7fe fcf2 	bl	80001a0 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	e008      	b.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c0:	f7fe fcee 	bl	80001a0 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e06d      	b.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d2:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d02e      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d027      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001804:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001812:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d014      	beq.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7fe fcbd 	bl	80001a0 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e00a      	b.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7fe fcb9 	bl	80001a0 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e036      	b.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ee      	beq.n	800182a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4917      	ldr	r1, [pc, #92]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800185a:	4313      	orrs	r3, r2
 800185c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	490b      	ldr	r1, [pc, #44]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800188a:	4313      	orrs	r3, r2
 800188c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0310 	and.w	r3, r3, #16
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4904      	ldr	r1, [pc, #16]	; (80018b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	42420440 	.word	0x42420440

080018c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b08d      	sub	sp, #52	; 0x34
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80018ce:	f107 040c 	add.w	r4, r7, #12
 80018d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018d8:	4b53      	ldr	r3, [pc, #332]	; (8001a28 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
 80018e2:	2300      	movs	r3, #0
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d07f      	beq.n	80019f8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d002      	beq.n	8001902 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d048      	beq.n	8001992 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001900:	e08b      	b.n	8001a1a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001908:	4b48      	ldr	r3, [pc, #288]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d07f      	beq.n	8001a14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001920:	4413      	add	r3, r2
 8001922:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001926:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d018      	beq.n	8001964 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	0c5b      	lsrs	r3, r3, #17
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001940:	4413      	add	r3, r2
 8001942:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00d      	beq.n	800196e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001952:	4a37      	ldr	r2, [pc, #220]	; (8001a30 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	fbb2 f2f3 	udiv	r2, r2, r3
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001962:	e004      	b.n	800196e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	4a33      	ldr	r2, [pc, #204]	; (8001a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8001968:	fb02 f303 	mul.w	r3, r2, r3
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800197a:	d102      	bne.n	8001982 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001980:	e048      	b.n	8001a14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001988:	fba2 2303 	umull	r2, r3, r2, r3
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001990:	e040      	b.n	8001a14 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800199e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a2:	d108      	bne.n	80019b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80019ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b4:	e01f      	b.n	80019f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c0:	d109      	bne.n	80019d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80019c2:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80019ce:	f649 4340 	movw	r3, #40000	; 0x9c40
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d4:	e00f      	b.n	80019f6 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019e0:	d11a      	bne.n	8001a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d014      	beq.n	8001a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80019ee:	f24f 4324 	movw	r3, #62500	; 0xf424
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80019f4:	e010      	b.n	8001a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80019f6:	e00f      	b.n	8001a18 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80019f8:	f7ff fe4c 	bl	8001694 <HAL_RCC_GetPCLK2Freq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	0b9b      	lsrs	r3, r3, #14
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	3301      	adds	r3, #1
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001a12:	e002      	b.n	8001a1a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001a14:	bf00      	nop
 8001a16:	e000      	b.n	8001a1a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8001a18:	bf00      	nop
    }
  }
  return (frequency);
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3734      	adds	r7, #52	; 0x34
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd90      	pop	{r4, r7, pc}
 8001a24:	08005ec0 	.word	0x08005ec0
 8001a28:	08005ed0 	.word	0x08005ed0
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	007a1200 	.word	0x007a1200
 8001a34:	003d0900 	.word	0x003d0900
 8001a38:	aaaaaaab 	.word	0xaaaaaaab

08001a3c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e084      	b.n	8001b5c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7c5b      	ldrb	r3, [r3, #17]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f004 f8e8 	bl	8005c38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f000 f87a 	bl	8001b68 <HAL_RTC_WaitForSynchro>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d004      	beq.n	8001a84 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e06b      	b.n	8001b5c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f89c 	bl	8001bc2 <RTC_EnterInitMode>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e060      	b.n	8001b5c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0207 	bic.w	r2, r2, #7
 8001aa8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <HAL_RTC_Init+0x128>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a2b      	ldr	r2, [pc, #172]	; (8001b64 <HAL_RTC_Init+0x128>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001abe:	4b29      	ldr	r3, [pc, #164]	; (8001b64 <HAL_RTC_Init+0x128>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	4926      	ldr	r1, [pc, #152]	; (8001b64 <HAL_RTC_Init+0x128>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e00e      	b.n	8001b00 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff feee 	bl	80018c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001ae8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2204      	movs	r2, #4
 8001af4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e030      	b.n	8001b5c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3b01      	subs	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f023 010f 	bic.w	r1, r3, #15
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0c1a      	lsrs	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	041b      	lsls	r3, r3, #16
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	b291      	uxth	r1, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f870 	bl	8001c12 <RTC_ExitInitMode>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00c      	b.n	8001b5c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40006c00 	.word	0x40006c00

08001b68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e01d      	b.n	8001bba <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0208 	bic.w	r2, r2, #8
 8001b8c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001b8e:	f7fe fb07 	bl	80001a0 <HAL_GetTick>
 8001b92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001b94:	e009      	b.n	8001baa <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001b96:	f7fe fb03 	bl	80001a0 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba4:	d901      	bls.n	8001baa <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e007      	b.n	8001bba <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0ee      	beq.n	8001b96 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001bce:	f7fe fae7 	bl	80001a0 <HAL_GetTick>
 8001bd2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001bd4:	e009      	b.n	8001bea <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001bd6:	f7fe fae3 	bl	80001a0 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be4:	d901      	bls.n	8001bea <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e00f      	b.n	8001c0a <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ee      	beq.n	8001bd6 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0210 	orr.w	r2, r2, #16
 8001c06:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0210 	bic.w	r2, r2, #16
 8001c2c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001c2e:	f7fe fab7 	bl	80001a0 <HAL_GetTick>
 8001c32:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c34:	e009      	b.n	8001c4a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c36:	f7fe fab3 	bl	80001a0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c44:	d901      	bls.n	8001c4a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e007      	b.n	8001c5a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ee      	beq.n	8001c36 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e01d      	b.n	8001cb0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d106      	bne.n	8001c8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f815 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f000 f961 	bl	8001f68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr

08001cca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b085      	sub	sp, #20
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0201 	orr.w	r2, r2, #1
 8001ce0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2b06      	cmp	r3, #6
 8001cf2:	d007      	beq.n	8001d04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d122      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0302 	and.w	r3, r3, #2
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d11b      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f06f 0202 	mvn.w	r2, #2
 8001d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f8ed 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001d58:	e005      	b.n	8001d66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8e0 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 f8ef 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d122      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d11b      	bne.n	8001dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0204 	mvn.w	r2, #4
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8c3 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8b6 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f8c5 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d122      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d11b      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0208 	mvn.w	r2, #8
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f899 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f88c 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f89b 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b10      	cmp	r3, #16
 8001e20:	d122      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0310 	and.w	r3, r3, #16
 8001e2c:	2b10      	cmp	r3, #16
 8001e2e:	d11b      	bne.n	8001e68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0210 	mvn.w	r2, #16
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f86f 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f862 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f871 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d10e      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f06f 0201 	mvn.w	r2, #1
 8001e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f002 f992 	bl	80041b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b80      	cmp	r3, #128	; 0x80
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d107      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8bf 	bl	800203e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eca:	2b40      	cmp	r3, #64	; 0x40
 8001ecc:	d10e      	bne.n	8001eec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed8:	2b40      	cmp	r3, #64	; 0x40
 8001eda:	d107      	bne.n	8001eec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f835 	bl	8001f56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d107      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0220 	mvn.w	r2, #32
 8001f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f88a 	bl	800202c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a29      	ldr	r2, [pc, #164]	; (8002020 <TIM_Base_SetConfig+0xb8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00b      	beq.n	8001f98 <TIM_Base_SetConfig+0x30>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d007      	beq.n	8001f98 <TIM_Base_SetConfig+0x30>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a26      	ldr	r2, [pc, #152]	; (8002024 <TIM_Base_SetConfig+0xbc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d003      	beq.n	8001f98 <TIM_Base_SetConfig+0x30>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a25      	ldr	r2, [pc, #148]	; (8002028 <TIM_Base_SetConfig+0xc0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d108      	bne.n	8001faa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <TIM_Base_SetConfig+0xb8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00b      	beq.n	8001fca <TIM_Base_SetConfig+0x62>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb8:	d007      	beq.n	8001fca <TIM_Base_SetConfig+0x62>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <TIM_Base_SetConfig+0xbc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d003      	beq.n	8001fca <TIM_Base_SetConfig+0x62>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a18      	ldr	r2, [pc, #96]	; (8002028 <TIM_Base_SetConfig+0xc0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <TIM_Base_SetConfig+0xb8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	615a      	str	r2, [r3, #20]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800

0800202c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800205e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002062:	2b84      	cmp	r3, #132	; 0x84
 8002064:	d005      	beq.n	8002072 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002066:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	3303      	adds	r3, #3
 8002070:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002072:	68fb      	ldr	r3, [r7, #12]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr

0800207e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002082:	f000 fe0d 	bl	8002ca0 <vTaskStartScheduler>
  
  return osOK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}

0800208c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800208c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208e:	b087      	sub	sp, #28
 8002090:	af02      	add	r7, sp, #8
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685c      	ldr	r4, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020a2:	b29e      	uxth	r6, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ffd0 	bl	8002050 <makeFreeRtosPriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	9200      	str	r2, [sp, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	4632      	mov	r2, r6
 80020be:	4629      	mov	r1, r5
 80020c0:	4620      	mov	r0, r4
 80020c2:	f000 fc90 	bl	80029e6 <xTaskCreate>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d001      	beq.n	80020d0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80020d0:	68fb      	ldr	r3, [r7, #12]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020da <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <osDelay+0x16>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	e000      	b.n	80020f2 <osDelay+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fda0 	bl	8002c38 <vTaskDelay>
  
  return osOK;
 80020f8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f103 0208 	add.w	r2, r3, #8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f103 0208 	add.w	r2, r3, #8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	601a      	str	r2, [r3, #0]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d103      	bne.n	80021be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e00c      	b.n	80021d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3308      	adds	r3, #8
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e002      	b.n	80021cc <vListInsert+0x2e>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d2f6      	bcs.n	80021c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6892      	ldr	r2, [r2, #8]
 8002224:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6852      	ldr	r2, [r2, #4]
 800222e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	429a      	cmp	r2, r3
 8002238:	d103      	bne.n	8002242 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d109      	bne.n	8002288 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	60bb      	str	r3, [r7, #8]
 8002286:	e7fe      	b.n	8002286 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002288:	f001 fbfe 	bl	8003a88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	68f9      	ldr	r1, [r7, #12]
 8002296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	441a      	add	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	3b01      	subs	r3, #1
 80022ba:	68f9      	ldr	r1, [r7, #12]
 80022bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	441a      	add	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	22ff      	movs	r2, #255	; 0xff
 80022cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	22ff      	movs	r2, #255	; 0xff
 80022d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d114      	bne.n	8002308 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d01a      	beq.n	800231c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3310      	adds	r3, #16
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 ff02 	bl	80030f4 <xTaskRemoveFromEventList>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d012      	beq.n	800231c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <xQueueGenericReset+0xcc>)
 80022f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	e009      	b.n	800231c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3310      	adds	r3, #16
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fef8 	bl	8002102 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	3324      	adds	r3, #36	; 0x24
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff fef3 	bl	8002102 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800231c:	f001 fbe2 	bl	8003ae4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	e000ed04 	.word	0xe000ed04

08002330 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	4613      	mov	r3, r2
 800233c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <xQueueGenericCreate+0x28>
 8002344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002348:	f383 8811 	msr	BASEPRI, r3
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e7fe      	b.n	8002356 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e004      	b.n	800236e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3348      	adds	r3, #72	; 0x48
 8002372:	4618      	mov	r0, r3
 8002374:	f001 fc42 	bl	8003bfc <pvPortMalloc>
 8002378:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00b      	beq.n	8002398 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	3348      	adds	r3, #72	; 0x48
 8002384:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002386:	79fa      	ldrb	r2, [r7, #7]
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f805 	bl	80023a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002398:	69bb      	ldr	r3, [r7, #24]
	}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d103      	bne.n	80023be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e002      	b.n	80023c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023d0:	2101      	movs	r1, #1
 80023d2:	69b8      	ldr	r0, [r7, #24]
 80023d4:	f7ff ff44 	bl	8002260 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08e      	sub	sp, #56	; 0x38
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023ee:	2300      	movs	r3, #0
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <xQueueGenericSend+0x30>
 80023fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002400:	f383 8811 	msr	BASEPRI, r3
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
 800240e:	e7fe      	b.n	800240e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <xQueueGenericSend+0x3e>
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <xQueueGenericSend+0x42>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <xQueueGenericSend+0x44>
 8002422:	2300      	movs	r3, #0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d109      	bne.n	800243c <xQueueGenericSend+0x5c>
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
 800243a:	e7fe      	b.n	800243a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d103      	bne.n	800244a <xQueueGenericSend+0x6a>
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <xQueueGenericSend+0x6e>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <xQueueGenericSend+0x70>
 800244e:	2300      	movs	r3, #0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d109      	bne.n	8002468 <xQueueGenericSend+0x88>
 8002454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002458:	f383 8811 	msr	BASEPRI, r3
 800245c:	f3bf 8f6f 	isb	sy
 8002460:	f3bf 8f4f 	dsb	sy
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	e7fe      	b.n	8002466 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002468:	f000 ffe0 	bl	800342c <xTaskGetSchedulerState>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <xQueueGenericSend+0x98>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <xQueueGenericSend+0x9c>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <xQueueGenericSend+0x9e>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <xQueueGenericSend+0xb6>
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	e7fe      	b.n	8002494 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002496:	f001 faf7 	bl	8003a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <xQueueGenericSend+0xcc>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d129      	bne.n	8002500 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b2:	f000 f9ae 	bl	8002812 <prvCopyDataToQueue>
 80024b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d010      	beq.n	80024e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	3324      	adds	r3, #36	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fe15 	bl	80030f4 <xTaskRemoveFromEventList>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80024d0:	4b3f      	ldr	r3, [pc, #252]	; (80025d0 <xQueueGenericSend+0x1f0>)
 80024d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	e00a      	b.n	80024f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80024e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80024e8:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <xQueueGenericSend+0x1f0>)
 80024ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024f8:	f001 faf4 	bl	8003ae4 <vPortExitCritical>
				return pdPASS;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e063      	b.n	80025c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002506:	f001 faed 	bl	8003ae4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800250a:	2300      	movs	r3, #0
 800250c:	e05c      	b.n	80025c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800250e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fe4d 	bl	80031b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800251e:	2301      	movs	r3, #1
 8002520:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002522:	f001 fadf 	bl	8003ae4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002526:	f000 fc01 	bl	8002d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800252a:	f001 faad 	bl	8003a88 <vPortEnterCritical>
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002534:	b25b      	sxtb	r3, r3
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d103      	bne.n	8002544 <xQueueGenericSend+0x164>
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800254a:	b25b      	sxtb	r3, r3
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d103      	bne.n	800255a <xQueueGenericSend+0x17a>
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800255a:	f001 fac3 	bl	8003ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800255e:	1d3a      	adds	r2, r7, #4
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fe3c 	bl	80031e4 <xTaskCheckForTimeOut>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d124      	bne.n	80025bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002574:	f000 fa1f 	bl	80029b6 <prvIsQueueFull>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d018      	beq.n	80025b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	3310      	adds	r3, #16
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fd90 	bl	80030ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800258c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800258e:	f000 f9aa 	bl	80028e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002592:	f000 fbd9 	bl	8002d48 <xTaskResumeAll>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	f47f af7c 	bne.w	8002496 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <xQueueGenericSend+0x1f0>)
 80025a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	f3bf 8f4f 	dsb	sy
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	e772      	b.n	8002496 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80025b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b2:	f000 f998 	bl	80028e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025b6:	f000 fbc7 	bl	8002d48 <xTaskResumeAll>
 80025ba:	e76c      	b.n	8002496 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80025bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025be:	f000 f992 	bl	80028e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025c2:	f000 fbc1 	bl	8002d48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80025c6:	2300      	movs	r3, #0
		}
	}
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3738      	adds	r7, #56	; 0x38
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	e000ed04 	.word	0xe000ed04

080025d4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08e      	sub	sp, #56	; 0x38
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <xQueueSemaphoreTake+0x30>
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	623b      	str	r3, [r7, #32]
 8002602:	e7fe      	b.n	8002602 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d009      	beq.n	8002620 <xQueueSemaphoreTake+0x4c>
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e7fe      	b.n	800261e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002620:	f000 ff04 	bl	800342c <xTaskGetSchedulerState>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <xQueueSemaphoreTake+0x5c>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <xQueueSemaphoreTake+0x60>
 8002630:	2301      	movs	r3, #1
 8002632:	e000      	b.n	8002636 <xQueueSemaphoreTake+0x62>
 8002634:	2300      	movs	r3, #0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <xQueueSemaphoreTake+0x7a>
 800263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263e:	f383 8811 	msr	BASEPRI, r3
 8002642:	f3bf 8f6f 	isb	sy
 8002646:	f3bf 8f4f 	dsb	sy
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	e7fe      	b.n	800264c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800264e:	f001 fa1b 	bl	8003a88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d024      	beq.n	80026a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800265e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002660:	1e5a      	subs	r2, r3, #1
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d104      	bne.n	8002678 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800266e:	f001 f8a3 	bl	80037b8 <pvTaskIncrementMutexHeldCount>
 8002672:	4602      	mov	r2, r0
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00f      	beq.n	80026a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002682:	3310      	adds	r3, #16
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fd35 	bl	80030f4 <xTaskRemoveFromEventList>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002690:	4b53      	ldr	r3, [pc, #332]	; (80027e0 <xQueueSemaphoreTake+0x20c>)
 8002692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80026a0:	f001 fa20 	bl	8003ae4 <vPortExitCritical>
				return pdPASS;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e096      	b.n	80027d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d110      	bne.n	80026d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d009      	beq.n	80026c8 <xQueueSemaphoreTake+0xf4>
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	f383 8811 	msr	BASEPRI, r3
 80026bc:	f3bf 8f6f 	isb	sy
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e7fe      	b.n	80026c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80026c8:	f001 fa0c 	bl	8003ae4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e082      	b.n	80027d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fd6c 	bl	80031b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026e4:	f001 f9fe 	bl	8003ae4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026e8:	f000 fb20 	bl	8002d2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026ec:	f001 f9cc 	bl	8003a88 <vPortEnterCritical>
 80026f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d103      	bne.n	8002706 <xQueueSemaphoreTake+0x132>
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800270c:	b25b      	sxtb	r3, r3
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d103      	bne.n	800271c <xQueueSemaphoreTake+0x148>
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800271c:	f001 f9e2 	bl	8003ae4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002720:	463a      	mov	r2, r7
 8002722:	f107 030c 	add.w	r3, r7, #12
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fd5b 	bl	80031e4 <xTaskCheckForTimeOut>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d132      	bne.n	800279a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002736:	f000 f928 	bl	800298a <prvIsQueueEmpty>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d026      	beq.n	800278e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002748:	f001 f99e 	bl	8003a88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fe89 	bl	8003468 <xTaskPriorityInherit>
 8002756:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002758:	f001 f9c4 	bl	8003ae4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	3324      	adds	r3, #36	; 0x24
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fca1 	bl	80030ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800276a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800276c:	f000 f8bb 	bl	80028e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002770:	f000 faea 	bl	8002d48 <xTaskResumeAll>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	f47f af69 	bne.w	800264e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <xQueueSemaphoreTake+0x20c>)
 800277e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	e75f      	b.n	800264e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800278e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002790:	f000 f8a9 	bl	80028e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002794:	f000 fad8 	bl	8002d48 <xTaskResumeAll>
 8002798:	e759      	b.n	800264e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800279a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800279c:	f000 f8a3 	bl	80028e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027a0:	f000 fad2 	bl	8002d48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a6:	f000 f8f0 	bl	800298a <prvIsQueueEmpty>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f43f af4e 	beq.w	800264e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00d      	beq.n	80027d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80027b8:	f001 f966 	bl	8003a88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80027bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027be:	f000 f811 	bl	80027e4 <prvGetDisinheritPriorityAfterTimeout>
 80027c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 ff56 	bl	800367c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80027d0:	f001 f988 	bl	8003ae4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80027d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3738      	adds	r7, #56	; 0x38
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000ed04 	.word	0xe000ed04

080027e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d006      	beq.n	8002802 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e001      	b.n	8002806 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002806:	68fb      	ldr	r3, [r7, #12]
	}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10d      	bne.n	800284c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d14d      	bne.n	80028d4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 fe99 	bl	8003574 <xTaskPriorityDisinherit>
 8002842:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	e043      	b.n	80028d4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d119      	bne.n	8002886 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6898      	ldr	r0, [r3, #8]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	461a      	mov	r2, r3
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	f003 fb05 	bl	8005e6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	441a      	add	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	429a      	cmp	r2, r3
 800287a:	d32b      	bcc.n	80028d4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	e026      	b.n	80028d4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	68d8      	ldr	r0, [r3, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	461a      	mov	r2, r3
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	f003 faeb 	bl	8005e6c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	425b      	negs	r3, r3
 80028a0:	441a      	add	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d207      	bcs.n	80028c2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	425b      	negs	r3, r3
 80028bc:	441a      	add	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d105      	bne.n	80028d4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80028dc:	697b      	ldr	r3, [r7, #20]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80028ee:	f001 f8cb 	bl	8003a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80028fa:	e011      	b.n	8002920 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2b00      	cmp	r3, #0
 8002902:	d012      	beq.n	800292a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3324      	adds	r3, #36	; 0x24
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fbf3 	bl	80030f4 <xTaskRemoveFromEventList>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002914:	f000 fcc6 	bl	80032a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	3b01      	subs	r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	dce9      	bgt.n	80028fc <prvUnlockQueue+0x16>
 8002928:	e000      	b.n	800292c <prvUnlockQueue+0x46>
					break;
 800292a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	22ff      	movs	r2, #255	; 0xff
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002934:	f001 f8d6 	bl	8003ae4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002938:	f001 f8a6 	bl	8003a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002942:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002944:	e011      	b.n	800296a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d012      	beq.n	8002974 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3310      	adds	r3, #16
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fbce 	bl	80030f4 <xTaskRemoveFromEventList>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800295e:	f000 fca1 	bl	80032a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002962:	7bbb      	ldrb	r3, [r7, #14]
 8002964:	3b01      	subs	r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800296a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800296e:	2b00      	cmp	r3, #0
 8002970:	dce9      	bgt.n	8002946 <prvUnlockQueue+0x60>
 8002972:	e000      	b.n	8002976 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002974:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	22ff      	movs	r2, #255	; 0xff
 800297a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800297e:	f001 f8b1 	bl	8003ae4 <vPortExitCritical>
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002992:	f001 f879 	bl	8003a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e001      	b.n	80029a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029a8:	f001 f89c 	bl	8003ae4 <vPortExitCritical>

	return xReturn;
 80029ac:	68fb      	ldr	r3, [r7, #12]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029be:	f001 f863 	bl	8003a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d102      	bne.n	80029d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e001      	b.n	80029d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029d8:	f001 f884 	bl	8003ae4 <vPortExitCritical>

	return xReturn;
 80029dc:	68fb      	ldr	r3, [r7, #12]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b08c      	sub	sp, #48	; 0x30
 80029ea:	af04      	add	r7, sp, #16
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	603b      	str	r3, [r7, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f001 f8fe 	bl	8003bfc <pvPortMalloc>
 8002a00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a08:	2054      	movs	r0, #84	; 0x54
 8002a0a:	f001 f8f7 	bl	8003bfc <pvPortMalloc>
 8002a0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1c:	e005      	b.n	8002a2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f001 f9ae 	bl	8003d80 <vPortFree>
 8002a24:	e001      	b.n	8002a2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a30:	88fa      	ldrh	r2, [r7, #6]
 8002a32:	2300      	movs	r3, #0
 8002a34:	9303      	str	r3, [sp, #12]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f80e 	bl	8002a68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a4c:	69f8      	ldr	r0, [r7, #28]
 8002a4e:	f000 f889 	bl	8002b64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e002      	b.n	8002a5e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
	}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a80:	3b01      	subs	r3, #1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f023 0307 	bic.w	r3, r3, #7
 8002a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <prvInitialiseNewTask+0x46>
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e7fe      	b.n	8002aac <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	e012      	b.n	8002ada <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	4413      	add	r3, r2
 8002aba:	7819      	ldrb	r1, [r3, #0]
 8002abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3334      	adds	r3, #52	; 0x34
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d9e9      	bls.n	8002ab4 <prvInitialiseNewTask+0x4c>
 8002ae0:	e000      	b.n	8002ae4 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002ae2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d901      	bls.n	8002af6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002af2:	2306      	movs	r3, #6
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b00:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b04:	2200      	movs	r2, #0
 8002b06:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fb17 	bl	8002140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	3318      	adds	r3, #24
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fb12 	bl	8002140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	f1c3 0207 	rsb	r2, r3, #7
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b34:	2200      	movs	r2, #0
 8002b36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	68f9      	ldr	r1, [r7, #12]
 8002b44:	69b8      	ldr	r0, [r7, #24]
 8002b46:	f000 feb1 	bl	80038ac <pxPortInitialiseStack>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b6c:	f000 ff8c 	bl	8003a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b70:	4b2a      	ldr	r3, [pc, #168]	; (8002c1c <prvAddNewTaskToReadyList+0xb8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a29      	ldr	r2, [pc, #164]	; (8002c1c <prvAddNewTaskToReadyList+0xb8>)
 8002b78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <prvAddNewTaskToReadyList+0xbc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d109      	bne.n	8002b96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b82:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <prvAddNewTaskToReadyList+0xbc>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <prvAddNewTaskToReadyList+0xb8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d110      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b90:	f000 fbac 	bl	80032ec <prvInitialiseTaskLists>
 8002b94:	e00d      	b.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b96:	4b23      	ldr	r3, [pc, #140]	; (8002c24 <prvAddNewTaskToReadyList+0xc0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b9e:	4b20      	ldr	r3, [pc, #128]	; (8002c20 <prvAddNewTaskToReadyList+0xbc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d802      	bhi.n	8002bb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bac:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <prvAddNewTaskToReadyList+0xbc>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <prvAddNewTaskToReadyList+0xc4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <prvAddNewTaskToReadyList+0xc4>)
 8002bba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <prvAddNewTaskToReadyList+0xc8>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <prvAddNewTaskToReadyList+0xc8>)
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4a15      	ldr	r2, [pc, #84]	; (8002c30 <prvAddNewTaskToReadyList+0xcc>)
 8002bdc:	441a      	add	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	4610      	mov	r0, r2
 8002be6:	f7ff fab7 	bl	8002158 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bea:	f000 ff7b 	bl	8003ae4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <prvAddNewTaskToReadyList+0xc0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00e      	beq.n	8002c14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bf6:	4b0a      	ldr	r3, [pc, #40]	; (8002c20 <prvAddNewTaskToReadyList+0xbc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d207      	bcs.n	8002c14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <prvAddNewTaskToReadyList+0xd0>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c14:	bf00      	nop
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	2000030c 	.word	0x2000030c
 8002c20:	2000020c 	.word	0x2000020c
 8002c24:	20000318 	.word	0x20000318
 8002c28:	20000328 	.word	0x20000328
 8002c2c:	20000314 	.word	0x20000314
 8002c30:	20000210 	.word	0x20000210
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d016      	beq.n	8002c78 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c4a:	4b13      	ldr	r3, [pc, #76]	; (8002c98 <vTaskDelay+0x60>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <vTaskDelay+0x2e>
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	e7fe      	b.n	8002c64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002c66:	f000 f861 	bl	8002d2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 fdb7 	bl	80037e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c72:	f000 f869 	bl	8002d48 <xTaskResumeAll>
 8002c76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d107      	bne.n	8002c8e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002c7e:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <vTaskDelay+0x64>)
 8002c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000334 	.word	0x20000334
 8002c9c:	e000ed04 	.word	0xe000ed04

08002ca0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <vTaskStartScheduler+0x74>)
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	4919      	ldr	r1, [pc, #100]	; (8002d18 <vTaskStartScheduler+0x78>)
 8002cb4:	4819      	ldr	r0, [pc, #100]	; (8002d1c <vTaskStartScheduler+0x7c>)
 8002cb6:	f7ff fe96 	bl	80029e6 <xTaskCreate>
 8002cba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d115      	bne.n	8002cee <vTaskStartScheduler+0x4e>
 8002cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cd4:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <vTaskStartScheduler+0x80>)
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <vTaskStartScheduler+0x84>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <vTaskStartScheduler+0x88>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ce8:	f000 fe5e 	bl	80039a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cec:	e00d      	b.n	8002d0a <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d109      	bne.n	8002d0a <vTaskStartScheduler+0x6a>
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	e7fe      	b.n	8002d08 <vTaskStartScheduler+0x68>
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000330 	.word	0x20000330
 8002d18:	08005ed4 	.word	0x08005ed4
 8002d1c:	080032bd 	.word	0x080032bd
 8002d20:	2000032c 	.word	0x2000032c
 8002d24:	20000318 	.word	0x20000318
 8002d28:	20000310 	.word	0x20000310

08002d2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d38:	6013      	str	r3, [r2, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000334 	.word	0x20000334

08002d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <xTaskResumeAll+0x114>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <xTaskResumeAll+0x2a>
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	e7fe      	b.n	8002d70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d72:	f000 fe89 	bl	8003a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d76:	4b39      	ldr	r3, [pc, #228]	; (8002e5c <xTaskResumeAll+0x114>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	4a37      	ldr	r2, [pc, #220]	; (8002e5c <xTaskResumeAll+0x114>)
 8002d7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <xTaskResumeAll+0x114>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d161      	bne.n	8002e4c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d88:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <xTaskResumeAll+0x118>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05d      	beq.n	8002e4c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d90:	e02e      	b.n	8002df0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <xTaskResumeAll+0x11c>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fa35 	bl	800220e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fa30 	bl	800220e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	2201      	movs	r2, #1
 8002db4:	409a      	lsls	r2, r3
 8002db6:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <xTaskResumeAll+0x120>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	4a2a      	ldr	r2, [pc, #168]	; (8002e68 <xTaskResumeAll+0x120>)
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <xTaskResumeAll+0x124>)
 8002dce:	441a      	add	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f7ff f9be 	bl	8002158 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <xTaskResumeAll+0x128>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002dea:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <xTaskResumeAll+0x12c>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <xTaskResumeAll+0x11c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1cc      	bne.n	8002d92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dfe:	f000 faf1 	bl	80033e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <xTaskResumeAll+0x130>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e0e:	f000 f837 	bl	8002e80 <xTaskIncrementTick>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <xTaskResumeAll+0x12c>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f1      	bne.n	8002e0e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <xTaskResumeAll+0x130>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <xTaskResumeAll+0x12c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d009      	beq.n	8002e4c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <xTaskResumeAll+0x134>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e4c:	f000 fe4a 	bl	8003ae4 <vPortExitCritical>

	return xAlreadyYielded;
 8002e50:	68bb      	ldr	r3, [r7, #8]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000334 	.word	0x20000334
 8002e60:	2000030c 	.word	0x2000030c
 8002e64:	200002cc 	.word	0x200002cc
 8002e68:	20000314 	.word	0x20000314
 8002e6c:	20000210 	.word	0x20000210
 8002e70:	2000020c 	.word	0x2000020c
 8002e74:	20000320 	.word	0x20000320
 8002e78:	2000031c 	.word	0x2000031c
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e8a:	4b50      	ldr	r3, [pc, #320]	; (8002fcc <xTaskIncrementTick+0x14c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f040 808c 	bne.w	8002fac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e94:	4b4e      	ldr	r3, [pc, #312]	; (8002fd0 <xTaskIncrementTick+0x150>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e9c:	4a4c      	ldr	r2, [pc, #304]	; (8002fd0 <xTaskIncrementTick+0x150>)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11f      	bne.n	8002ee8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ea8:	4b4a      	ldr	r3, [pc, #296]	; (8002fd4 <xTaskIncrementTick+0x154>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <xTaskIncrementTick+0x46>
 8002eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb6:	f383 8811 	msr	BASEPRI, r3
 8002eba:	f3bf 8f6f 	isb	sy
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	e7fe      	b.n	8002ec4 <xTaskIncrementTick+0x44>
 8002ec6:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <xTaskIncrementTick+0x154>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	4b42      	ldr	r3, [pc, #264]	; (8002fd8 <xTaskIncrementTick+0x158>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <xTaskIncrementTick+0x154>)
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4a40      	ldr	r2, [pc, #256]	; (8002fd8 <xTaskIncrementTick+0x158>)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b40      	ldr	r3, [pc, #256]	; (8002fdc <xTaskIncrementTick+0x15c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	4a3e      	ldr	r2, [pc, #248]	; (8002fdc <xTaskIncrementTick+0x15c>)
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	f000 fa7e 	bl	80033e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ee8:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <xTaskIncrementTick+0x160>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d34d      	bcc.n	8002f8e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef2:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <xTaskIncrementTick+0x154>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <xTaskIncrementTick+0x80>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <xTaskIncrementTick+0x82>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f06:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <xTaskIncrementTick+0x160>)
 8002f08:	f04f 32ff 	mov.w	r2, #4294967295
 8002f0c:	601a      	str	r2, [r3, #0]
					break;
 8002f0e:	e03e      	b.n	8002f8e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f10:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <xTaskIncrementTick+0x154>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d203      	bcs.n	8002f30 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f28:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <xTaskIncrementTick+0x160>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
						break;
 8002f2e:	e02e      	b.n	8002f8e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f96a 	bl	800220e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3318      	adds	r3, #24
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff f961 	bl	800220e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2201      	movs	r2, #1
 8002f52:	409a      	lsls	r2, r3
 8002f54:	4b23      	ldr	r3, [pc, #140]	; (8002fe4 <xTaskIncrementTick+0x164>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <xTaskIncrementTick+0x164>)
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <xTaskIncrementTick+0x168>)
 8002f6c:	441a      	add	r2, r3
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3304      	adds	r3, #4
 8002f72:	4619      	mov	r1, r3
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7ff f8ef 	bl	8002158 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <xTaskIncrementTick+0x16c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d3b4      	bcc.n	8002ef2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f8c:	e7b1      	b.n	8002ef2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f8e:	4b17      	ldr	r3, [pc, #92]	; (8002fec <xTaskIncrementTick+0x16c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f94:	4914      	ldr	r1, [pc, #80]	; (8002fe8 <xTaskIncrementTick+0x168>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d907      	bls.n	8002fb6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e004      	b.n	8002fb6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <xTaskIncrementTick+0x170>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <xTaskIncrementTick+0x170>)
 8002fb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <xTaskIncrementTick+0x174>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002fc2:	697b      	ldr	r3, [r7, #20]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000334 	.word	0x20000334
 8002fd0:	20000310 	.word	0x20000310
 8002fd4:	200002c4 	.word	0x200002c4
 8002fd8:	200002c8 	.word	0x200002c8
 8002fdc:	20000324 	.word	0x20000324
 8002fe0:	2000032c 	.word	0x2000032c
 8002fe4:	20000314 	.word	0x20000314
 8002fe8:	20000210 	.word	0x20000210
 8002fec:	2000020c 	.word	0x2000020c
 8002ff0:	2000031c 	.word	0x2000031c
 8002ff4:	20000320 	.word	0x20000320

08002ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ffe:	4b26      	ldr	r3, [pc, #152]	; (8003098 <vTaskSwitchContext+0xa0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003006:	4b25      	ldr	r3, [pc, #148]	; (800309c <vTaskSwitchContext+0xa4>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800300c:	e03e      	b.n	800308c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <vTaskSwitchContext+0xa4>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003014:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <vTaskSwitchContext+0xa8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	f1c3 031f 	rsb	r3, r3, #31
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	491e      	ldr	r1, [pc, #120]	; (80030a4 <vTaskSwitchContext+0xac>)
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <vTaskSwitchContext+0x5a>
	__asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	e7fe      	b.n	8003050 <vTaskSwitchContext+0x58>
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4613      	mov	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <vTaskSwitchContext+0xac>)
 800305e:	4413      	add	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3308      	adds	r3, #8
 8003074:	429a      	cmp	r2, r3
 8003076:	d104      	bne.n	8003082 <vTaskSwitchContext+0x8a>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <vTaskSwitchContext+0xb0>)
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000334 	.word	0x20000334
 800309c:	20000320 	.word	0x20000320
 80030a0:	20000314 	.word	0x20000314
 80030a4:	20000210 	.word	0x20000210
 80030a8:	2000020c 	.word	0x2000020c

080030ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <vTaskPlaceOnEventList+0x24>
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	e7fe      	b.n	80030ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030d0:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <vTaskPlaceOnEventList+0x44>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3318      	adds	r3, #24
 80030d6:	4619      	mov	r1, r3
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff f860 	bl	800219e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030de:	2101      	movs	r1, #1
 80030e0:	6838      	ldr	r0, [r7, #0]
 80030e2:	f000 fb7d 	bl	80037e0 <prvAddCurrentTaskToDelayedList>
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	2000020c 	.word	0x2000020c

080030f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <xTaskRemoveFromEventList+0x2a>
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e7fe      	b.n	800311c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	3318      	adds	r3, #24
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f873 	bl	800220e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <xTaskRemoveFromEventList+0xac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11c      	bne.n	800316a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3304      	adds	r3, #4
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f86a 	bl	800220e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	2201      	movs	r2, #1
 8003140:	409a      	lsls	r2, r3
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <xTaskRemoveFromEventList+0xb0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <xTaskRemoveFromEventList+0xb0>)
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4a13      	ldr	r2, [pc, #76]	; (80031a8 <xTaskRemoveFromEventList+0xb4>)
 800315a:	441a      	add	r2, r3
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	3304      	adds	r3, #4
 8003160:	4619      	mov	r1, r3
 8003162:	4610      	mov	r0, r2
 8003164:	f7fe fff8 	bl	8002158 <vListInsertEnd>
 8003168:	e005      	b.n	8003176 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3318      	adds	r3, #24
 800316e:	4619      	mov	r1, r3
 8003170:	480e      	ldr	r0, [pc, #56]	; (80031ac <xTaskRemoveFromEventList+0xb8>)
 8003172:	f7fe fff1 	bl	8002158 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <xTaskRemoveFromEventList+0xbc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	429a      	cmp	r2, r3
 8003182:	d905      	bls.n	8003190 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003184:	2301      	movs	r3, #1
 8003186:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <xTaskRemoveFromEventList+0xc0>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e001      	b.n	8003194 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003194:	697b      	ldr	r3, [r7, #20]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000334 	.word	0x20000334
 80031a4:	20000314 	.word	0x20000314
 80031a8:	20000210 	.word	0x20000210
 80031ac:	200002cc 	.word	0x200002cc
 80031b0:	2000020c 	.word	0x2000020c
 80031b4:	20000320 	.word	0x20000320

080031b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <vTaskInternalSetTimeOutState+0x24>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <vTaskInternalSetTimeOutState+0x28>)
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	605a      	str	r2, [r3, #4]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000324 	.word	0x20000324
 80031e0:	20000310 	.word	0x20000310

080031e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <xTaskCheckForTimeOut+0x24>
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	e7fe      	b.n	8003206 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <xTaskCheckForTimeOut+0x3e>
 800320e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e7fe      	b.n	8003220 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003222:	f000 fc31 	bl	8003a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <xTaskCheckForTimeOut+0xb8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d102      	bne.n	8003246 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	e023      	b.n	800328e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <xTaskCheckForTimeOut+0xbc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d007      	beq.n	8003262 <xTaskCheckForTimeOut+0x7e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e015      	b.n	800328e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	429a      	cmp	r2, r3
 800326a:	d20b      	bcs.n	8003284 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7ff ff9d 	bl	80031b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
 8003282:	e004      	b.n	800328e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800328a:	2301      	movs	r3, #1
 800328c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800328e:	f000 fc29 	bl	8003ae4 <vPortExitCritical>

	return xReturn;
 8003292:	69fb      	ldr	r3, [r7, #28]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3720      	adds	r7, #32
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000310 	.word	0x20000310
 80032a0:	20000324 	.word	0x20000324

080032a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <vTaskMissedYield+0x14>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000320 	.word	0x20000320

080032bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032c4:	f000 f852 	bl	800336c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <prvIdleTask+0x28>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d9f9      	bls.n	80032c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <prvIdleTask+0x2c>)
 80032d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032e0:	e7f0      	b.n	80032c4 <prvIdleTask+0x8>
 80032e2:	bf00      	nop
 80032e4:	20000210 	.word	0x20000210
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	e00c      	b.n	8003312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <prvInitialiseTaskLists+0x60>)
 8003304:	4413      	add	r3, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fefb 	bl	8002102 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3301      	adds	r3, #1
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d9ef      	bls.n	80032f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003318:	480d      	ldr	r0, [pc, #52]	; (8003350 <prvInitialiseTaskLists+0x64>)
 800331a:	f7fe fef2 	bl	8002102 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800331e:	480d      	ldr	r0, [pc, #52]	; (8003354 <prvInitialiseTaskLists+0x68>)
 8003320:	f7fe feef 	bl	8002102 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <prvInitialiseTaskLists+0x6c>)
 8003326:	f7fe feec 	bl	8002102 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800332a:	480c      	ldr	r0, [pc, #48]	; (800335c <prvInitialiseTaskLists+0x70>)
 800332c:	f7fe fee9 	bl	8002102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003330:	480b      	ldr	r0, [pc, #44]	; (8003360 <prvInitialiseTaskLists+0x74>)
 8003332:	f7fe fee6 	bl	8002102 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <prvInitialiseTaskLists+0x78>)
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <prvInitialiseTaskLists+0x64>)
 800333a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <prvInitialiseTaskLists+0x7c>)
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <prvInitialiseTaskLists+0x68>)
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000210 	.word	0x20000210
 8003350:	2000029c 	.word	0x2000029c
 8003354:	200002b0 	.word	0x200002b0
 8003358:	200002cc 	.word	0x200002cc
 800335c:	200002e0 	.word	0x200002e0
 8003360:	200002f8 	.word	0x200002f8
 8003364:	200002c4 	.word	0x200002c4
 8003368:	200002c8 	.word	0x200002c8

0800336c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003372:	e019      	b.n	80033a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003374:	f000 fb88 	bl	8003a88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <prvCheckTasksWaitingTermination+0x4c>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe ff42 	bl	800220e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <prvCheckTasksWaitingTermination+0x50>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3b01      	subs	r3, #1
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <prvCheckTasksWaitingTermination+0x50>)
 8003392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <prvCheckTasksWaitingTermination+0x54>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3b01      	subs	r3, #1
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <prvCheckTasksWaitingTermination+0x54>)
 800339c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800339e:	f000 fba1 	bl	8003ae4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f80e 	bl	80033c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <prvCheckTasksWaitingTermination+0x54>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e1      	bne.n	8003374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	200002e0 	.word	0x200002e0
 80033bc:	2000030c 	.word	0x2000030c
 80033c0:	200002f4 	.word	0x200002f4

080033c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fcd5 	bl	8003d80 <vPortFree>
			vPortFree( pxTCB );
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fcd2 	bl	8003d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <prvResetNextTaskUnblockTime+0x40>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <prvResetNextTaskUnblockTime+0x14>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <prvResetNextTaskUnblockTime+0x16>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d004      	beq.n	8003408 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <prvResetNextTaskUnblockTime+0x44>)
 8003400:	f04f 32ff 	mov.w	r2, #4294967295
 8003404:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003406:	e008      	b.n	800341a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <prvResetNextTaskUnblockTime+0x40>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <prvResetNextTaskUnblockTime+0x44>)
 8003418:	6013      	str	r3, [r2, #0]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	200002c4 	.word	0x200002c4
 8003428:	2000032c 	.word	0x2000032c

0800342c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <xTaskGetSchedulerState+0x34>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800343a:	2301      	movs	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	e008      	b.n	8003452 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <xTaskGetSchedulerState+0x38>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003448:	2302      	movs	r3, #2
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	e001      	b.n	8003452 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003452:	687b      	ldr	r3, [r7, #4]
	}
 8003454:	4618      	mov	r0, r3
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	bc80      	pop	{r7}
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000318 	.word	0x20000318
 8003464:	20000334 	.word	0x20000334

08003468 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d06e      	beq.n	800355c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003482:	4b39      	ldr	r3, [pc, #228]	; (8003568 <xTaskPriorityInherit+0x100>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d25e      	bcs.n	800354a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	db06      	blt.n	80034a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <xTaskPriorityInherit+0x100>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	f1c3 0207 	rsb	r2, r3, #7
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6959      	ldr	r1, [r3, #20]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4a2e      	ldr	r2, [pc, #184]	; (800356c <xTaskPriorityInherit+0x104>)
 80034b4:	4413      	add	r3, r2
 80034b6:	4299      	cmp	r1, r3
 80034b8:	d101      	bne.n	80034be <xTaskPriorityInherit+0x56>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <xTaskPriorityInherit+0x58>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d03a      	beq.n	800353a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3304      	adds	r3, #4
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fe fea0 	bl	800220e <uxListRemove>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d115      	bne.n	8003500 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d8:	4924      	ldr	r1, [pc, #144]	; (800356c <xTaskPriorityInherit+0x104>)
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <xTaskPriorityInherit+0x98>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	2201      	movs	r2, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43da      	mvns	r2, r3
 80034f6:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <xTaskPriorityInherit+0x108>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4013      	ands	r3, r2
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <xTaskPriorityInherit+0x108>)
 80034fe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003500:	4b19      	ldr	r3, [pc, #100]	; (8003568 <xTaskPriorityInherit+0x100>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	2201      	movs	r2, #1
 8003510:	409a      	lsls	r2, r3
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <xTaskPriorityInherit+0x108>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	4a15      	ldr	r2, [pc, #84]	; (8003570 <xTaskPriorityInherit+0x108>)
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4a10      	ldr	r2, [pc, #64]	; (800356c <xTaskPriorityInherit+0x104>)
 800352a:	441a      	add	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7fe fe10 	bl	8002158 <vListInsertEnd>
 8003538:	e004      	b.n	8003544 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <xTaskPriorityInherit+0x100>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e008      	b.n	800355c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <xTaskPriorityInherit+0x100>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	429a      	cmp	r2, r3
 8003556:	d201      	bcs.n	800355c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800355c:	68fb      	ldr	r3, [r7, #12]
	}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000020c 	.word	0x2000020c
 800356c:	20000210 	.word	0x20000210
 8003570:	20000314 	.word	0x20000314

08003574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d06c      	beq.n	8003664 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <xTaskPriorityDisinherit+0xfc>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	429a      	cmp	r2, r3
 8003592:	d009      	beq.n	80035a8 <xTaskPriorityDisinherit+0x34>
 8003594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003598:	f383 8811 	msr	BASEPRI, r3
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	e7fe      	b.n	80035a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <xTaskPriorityDisinherit+0x50>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	e7fe      	b.n	80035c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d044      	beq.n	8003664 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d140      	bne.n	8003664 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3304      	adds	r3, #4
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fe11 	bl	800220e <uxListRemove>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d115      	bne.n	800361e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	491f      	ldr	r1, [pc, #124]	; (8003674 <xTaskPriorityDisinherit+0x100>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskPriorityDisinherit+0xaa>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	2201      	movs	r2, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <xTaskPriorityDisinherit+0x104>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4013      	ands	r3, r2
 800361a:	4a17      	ldr	r2, [pc, #92]	; (8003678 <xTaskPriorityDisinherit+0x104>)
 800361c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	f1c3 0207 	rsb	r2, r3, #7
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	2201      	movs	r2, #1
 8003638:	409a      	lsls	r2, r3
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <xTaskPriorityDisinherit+0x104>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <xTaskPriorityDisinherit+0x104>)
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4a08      	ldr	r2, [pc, #32]	; (8003674 <xTaskPriorityDisinherit+0x100>)
 8003652:	441a      	add	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f7fe fd7c 	bl	8002158 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003660:	2301      	movs	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003664:	697b      	ldr	r3, [r7, #20]
	}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	2000020c 	.word	0x2000020c
 8003674:	20000210 	.word	0x20000210
 8003678:	20000314 	.word	0x20000314

0800367c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8086 	beq.w	80037a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e7fe      	b.n	80036b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d902      	bls.n	80036c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e002      	b.n	80036c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d067      	beq.n	80037a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d162      	bne.n	80037a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80036dc:	4b33      	ldr	r3, [pc, #204]	; (80037ac <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d109      	bne.n	80036fa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	e7fe      	b.n	80036f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	db04      	blt.n	8003718 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f1c3 0207 	rsb	r2, r3, #7
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6959      	ldr	r1, [r3, #20]
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003728:	4413      	add	r3, r2
 800372a:	4299      	cmp	r1, r3
 800372c:	d101      	bne.n	8003732 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d034      	beq.n	80037a2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	3304      	adds	r3, #4
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe fd66 	bl	800220e <uxListRemove>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d115      	bne.n	8003774 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4918      	ldr	r1, [pc, #96]	; (80037b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	2201      	movs	r2, #1
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43da      	mvns	r2, r3
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4013      	ands	r3, r2
 8003770:	4a10      	ldr	r2, [pc, #64]	; (80037b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003772:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	2201      	movs	r2, #1
 800377a:	409a      	lsls	r2, r3
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4313      	orrs	r3, r2
 8003782:	4a0c      	ldr	r2, [pc, #48]	; (80037b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003794:	441a      	add	r2, r3
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3304      	adds	r3, #4
 800379a:	4619      	mov	r1, r3
 800379c:	4610      	mov	r0, r2
 800379e:	f7fe fcdb 	bl	8002158 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80037a2:	bf00      	nop
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	2000020c 	.word	0x2000020c
 80037b0:	20000210 	.word	0x20000210
 80037b4:	20000314 	.word	0x20000314

080037b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80037bc:	4b07      	ldr	r3, [pc, #28]	; (80037dc <pvTaskIncrementMutexHeldCount+0x24>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <pvTaskIncrementMutexHeldCount+0x24>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037ca:	3201      	adds	r2, #1
 80037cc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <pvTaskIncrementMutexHeldCount+0x24>)
 80037d0:	681b      	ldr	r3, [r3, #0]
	}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	2000020c 	.word	0x2000020c

080037e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037f0:	4b28      	ldr	r3, [pc, #160]	; (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fd09 	bl	800220e <uxListRemove>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10b      	bne.n	800381a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	2201      	movs	r2, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	43da      	mvns	r2, r3
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4013      	ands	r3, r2
 8003816:	4a20      	ldr	r2, [pc, #128]	; (8003898 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003818:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d10a      	bne.n	8003838 <prvAddCurrentTaskToDelayedList+0x58>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	481a      	ldr	r0, [pc, #104]	; (800389c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003832:	f7fe fc91 	bl	8002158 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003836:	e026      	b.n	8003886 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d209      	bcs.n	8003864 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003850:	4b13      	ldr	r3, [pc, #76]	; (80038a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe fc9e 	bl	800219e <vListInsert>
}
 8003862:	e010      	b.n	8003886 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <prvAddCurrentTaskToDelayedList+0xb4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f7fe fc94 	bl	800219e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	429a      	cmp	r2, r3
 800387e:	d202      	bcs.n	8003886 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003880:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6013      	str	r3, [r2, #0]
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000310 	.word	0x20000310
 8003894:	2000020c 	.word	0x2000020c
 8003898:	20000314 	.word	0x20000314
 800389c:	200002f8 	.word	0x200002f8
 80038a0:	200002c8 	.word	0x200002c8
 80038a4:	200002c4 	.word	0x200002c4
 80038a8:	2000032c 	.word	0x2000032c

080038ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3b04      	subs	r3, #4
 80038bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3b04      	subs	r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f023 0201 	bic.w	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b04      	subs	r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038dc:	4a08      	ldr	r2, [pc, #32]	; (8003900 <pxPortInitialiseStack+0x54>)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3b14      	subs	r3, #20
 80038e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	3b20      	subs	r3, #32
 80038f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr
 8003900:	08003905 	.word	0x08003905

08003904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <prvTaskExitError+0x4c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003916:	d009      	beq.n	800392c <prvTaskExitError+0x28>
 8003918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e7fe      	b.n	800392a <prvTaskExitError+0x26>
 800392c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800393e:	bf00      	nop
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0fc      	beq.n	8003940 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	20000008 	.word	0x20000008
	...

08003960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <pxCurrentTCBConst2>)
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	6808      	ldr	r0, [r1, #0]
 8003966:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800396a:	f380 8809 	msr	PSP, r0
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f04f 0000 	mov.w	r0, #0
 8003976:	f380 8811 	msr	BASEPRI, r0
 800397a:	f04e 0e0d 	orr.w	lr, lr, #13
 800397e:	4770      	bx	lr

08003980 <pxCurrentTCBConst2>:
 8003980:	2000020c 	.word	0x2000020c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop

08003988 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003988:	4806      	ldr	r0, [pc, #24]	; (80039a4 <prvPortStartFirstTask+0x1c>)
 800398a:	6800      	ldr	r0, [r0, #0]
 800398c:	6800      	ldr	r0, [r0, #0]
 800398e:	f380 8808 	msr	MSP, r0
 8003992:	b662      	cpsie	i
 8003994:	b661      	cpsie	f
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	f3bf 8f6f 	isb	sy
 800399e:	df00      	svc	0
 80039a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80039a2:	bf00      	nop
 80039a4:	e000ed08 	.word	0xe000ed08

080039a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039ae:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <xPortStartScheduler+0xcc>)
 80039b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	22ff      	movs	r2, #255	; 0xff
 80039be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <xPortStartScheduler+0xd0>)
 80039d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039d6:	4b29      	ldr	r3, [pc, #164]	; (8003a7c <xPortStartScheduler+0xd4>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039dc:	e009      	b.n	80039f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039de:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <xPortStartScheduler+0xd4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	4a25      	ldr	r2, [pc, #148]	; (8003a7c <xPortStartScheduler+0xd4>)
 80039e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	2b80      	cmp	r3, #128	; 0x80
 80039fc:	d0ef      	beq.n	80039de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039fe:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <xPortStartScheduler+0xd4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1c3 0307 	rsb	r3, r3, #7
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d009      	beq.n	8003a1e <xPortStartScheduler+0x76>
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	e7fe      	b.n	8003a1c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <xPortStartScheduler+0xd4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <xPortStartScheduler+0xd4>)
 8003a26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a28:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <xPortStartScheduler+0xd4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a30:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <xPortStartScheduler+0xd4>)
 8003a32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <xPortStartScheduler+0xd8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <xPortStartScheduler+0xd8>)
 8003a42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a48:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <xPortStartScheduler+0xd8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <xPortStartScheduler+0xd8>)
 8003a4e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a54:	f000 f8b0 	bl	8003bb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <xPortStartScheduler+0xdc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a5e:	f7ff ff93 	bl	8003988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a62:	f7ff fac9 	bl	8002ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8003a66:	f7ff ff4d 	bl	8003904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	e000e400 	.word	0xe000e400
 8003a78:	20000338 	.word	0x20000338
 8003a7c:	2000033c 	.word	0x2000033c
 8003a80:	e000ed20 	.word	0xe000ed20
 8003a84:	20000008 	.word	0x20000008

08003a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <vPortEnterCritical+0x54>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <vPortEnterCritical+0x54>)
 8003aa8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <vPortEnterCritical+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d10e      	bne.n	8003ad0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <vPortEnterCritical+0x58>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <vPortEnterCritical+0x48>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	e7fe      	b.n	8003ace <vPortEnterCritical+0x46>
	}
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000008 	.word	0x20000008
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <vPortExitCritical+0x48>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <vPortExitCritical+0x22>
 8003af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	e7fe      	b.n	8003b04 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003b06:	4b09      	ldr	r3, [pc, #36]	; (8003b2c <vPortExitCritical+0x48>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <vPortExitCritical+0x48>)
 8003b0e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <vPortExitCritical+0x48>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d104      	bne.n	8003b22 <vPortExitCritical+0x3e>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr
 8003b2c:	20000008 	.word	0x20000008

08003b30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b30:	f3ef 8009 	mrs	r0, PSP
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	4b0d      	ldr	r3, [pc, #52]	; (8003b70 <pxCurrentTCBConst>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b40:	6010      	str	r0, [r2, #0]
 8003b42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b4a:	f380 8811 	msr	BASEPRI, r0
 8003b4e:	f7ff fa53 	bl	8002ff8 <vTaskSwitchContext>
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	6808      	ldr	r0, [r1, #0]
 8003b62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b66:	f380 8809 	msr	PSP, r0
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	4770      	bx	lr

08003b70 <pxCurrentTCBConst>:
 8003b70:	2000020c 	.word	0x2000020c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop

08003b78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b90:	f7ff f976 	bl	8002e80 <xTaskIncrementTick>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b9a:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <SysTick_Handler+0x3c>)
 8003b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003bac:	bf00      	nop
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	e000ed04 	.word	0xe000ed04

08003bb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <vPortSetupTimerInterrupt+0x30>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <vPortSetupTimerInterrupt+0x34>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <vPortSetupTimerInterrupt+0x38>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <vPortSetupTimerInterrupt+0x3c>)
 8003bce:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <vPortSetupTimerInterrupt+0x40>)
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bda:	4b03      	ldr	r3, [pc, #12]	; (8003be8 <vPortSetupTimerInterrupt+0x30>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	e000e010 	.word	0xe000e010
 8003bec:	e000e018 	.word	0xe000e018
 8003bf0:	200001ec 	.word	0x200001ec
 8003bf4:	10624dd3 	.word	0x10624dd3
 8003bf8:	e000e014 	.word	0xe000e014

08003bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c08:	f7ff f890 	bl	8002d2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c0c:	4b57      	ldr	r3, [pc, #348]	; (8003d6c <pvPortMalloc+0x170>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c14:	f000 f90c 	bl	8003e30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c18:	4b55      	ldr	r3, [pc, #340]	; (8003d70 <pvPortMalloc+0x174>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f040 808c 	bne.w	8003d3e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01c      	beq.n	8003c66 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d013      	beq.n	8003c66 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f023 0307 	bic.w	r3, r3, #7
 8003c44:	3308      	adds	r3, #8
 8003c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <pvPortMalloc+0x6a>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e7fe      	b.n	8003c64 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d068      	beq.n	8003d3e <pvPortMalloc+0x142>
 8003c6c:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <pvPortMalloc+0x178>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d863      	bhi.n	8003d3e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c76:	4b40      	ldr	r3, [pc, #256]	; (8003d78 <pvPortMalloc+0x17c>)
 8003c78:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c7a:	4b3f      	ldr	r3, [pc, #252]	; (8003d78 <pvPortMalloc+0x17c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c80:	e004      	b.n	8003c8c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d903      	bls.n	8003c9e <pvPortMalloc+0xa2>
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f1      	bne.n	8003c82 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <pvPortMalloc+0x170>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d04a      	beq.n	8003d3e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2208      	movs	r2, #8
 8003cae:	4413      	add	r3, r2
 8003cb0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	1ad2      	subs	r2, r2, r3
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d91e      	bls.n	8003d08 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <pvPortMalloc+0xf4>
 8003cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	e7fe      	b.n	8003cee <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	1ad2      	subs	r2, r2, r3
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d02:	69b8      	ldr	r0, [r7, #24]
 8003d04:	f000 f8f6 	bl	8003ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <pvPortMalloc+0x178>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <pvPortMalloc+0x178>)
 8003d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <pvPortMalloc+0x178>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <pvPortMalloc+0x180>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d203      	bcs.n	8003d2a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d22:	4b14      	ldr	r3, [pc, #80]	; (8003d74 <pvPortMalloc+0x178>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a15      	ldr	r2, [pc, #84]	; (8003d7c <pvPortMalloc+0x180>)
 8003d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <pvPortMalloc+0x174>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d3e:	f7ff f803 	bl	8002d48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <pvPortMalloc+0x164>
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e7fe      	b.n	8003d5e <pvPortMalloc+0x162>
	return pvReturn;
 8003d60:	69fb      	ldr	r3, [r7, #28]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3728      	adds	r7, #40	; 0x28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000f48 	.word	0x20000f48
 8003d70:	20000f54 	.word	0x20000f54
 8003d74:	20000f4c 	.word	0x20000f4c
 8003d78:	20000f40 	.word	0x20000f40
 8003d7c:	20000f50 	.word	0x20000f50

08003d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d046      	beq.n	8003e20 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003d92:	2308      	movs	r3, #8
 8003d94:	425b      	negs	r3, r3
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4413      	add	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <vPortFree+0xa8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <vPortFree+0x42>
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	e7fe      	b.n	8003dc0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <vPortFree+0x5e>
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	e7fe      	b.n	8003ddc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <vPortFree+0xa8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d019      	beq.n	8003e20 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d115      	bne.n	8003e20 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <vPortFree+0xa8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	401a      	ands	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e04:	f7fe ff92 	bl	8002d2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <vPortFree+0xac>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <vPortFree+0xac>)
 8003e14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e16:	6938      	ldr	r0, [r7, #16]
 8003e18:	f000 f86c 	bl	8003ef4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003e1c:	f7fe ff94 	bl	8002d48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e20:	bf00      	nop
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000f54 	.word	0x20000f54
 8003e2c:	20000f4c 	.word	0x20000f4c

08003e30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <prvHeapInit+0xac>)
 8003e3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00c      	beq.n	8003e64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3307      	adds	r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f023 0307 	bic.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	4a1f      	ldr	r2, [pc, #124]	; (8003edc <prvHeapInit+0xac>)
 8003e60:	4413      	add	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e68:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <prvHeapInit+0xb0>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003e6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <prvHeapInit+0xb0>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	4413      	add	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0307 	bic.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <prvHeapInit+0xb4>)
 8003e90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <prvHeapInit+0xb4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <prvHeapInit+0xb4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <prvHeapInit+0xb4>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a0a      	ldr	r2, [pc, #40]	; (8003ee8 <prvHeapInit+0xb8>)
 8003ebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4a09      	ldr	r2, [pc, #36]	; (8003eec <prvHeapInit+0xbc>)
 8003ec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <prvHeapInit+0xc0>)
 8003eca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ece:	601a      	str	r2, [r3, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000340 	.word	0x20000340
 8003ee0:	20000f40 	.word	0x20000f40
 8003ee4:	20000f48 	.word	0x20000f48
 8003ee8:	20000f50 	.word	0x20000f50
 8003eec:	20000f4c 	.word	0x20000f4c
 8003ef0:	20000f54 	.word	0x20000f54

08003ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <prvInsertBlockIntoFreeList+0xa8>)
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e002      	b.n	8003f08 <prvInsertBlockIntoFreeList+0x14>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d8f7      	bhi.n	8003f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d108      	bne.n	8003f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	441a      	add	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	441a      	add	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d118      	bne.n	8003f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <prvInsertBlockIntoFreeList+0xac>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d00d      	beq.n	8003f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685a      	ldr	r2, [r3, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	441a      	add	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	e008      	b.n	8003f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f72:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <prvInsertBlockIntoFreeList+0xac>)
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	e003      	b.n	8003f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d002      	beq.n	8003f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	20000f40 	.word	0x20000f40
 8003fa0:	20000f48 	.word	0x20000f48

08003fa4 <MX_ADC1_Init>:
#include "ARM_inits.h"

void MX_ADC1_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8003fb4:	4b19      	ldr	r3, [pc, #100]	; (800401c <MX_ADC1_Init+0x78>)
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <MX_ADC1_Init+0x7c>)
 8003fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003fba:	4b18      	ldr	r3, [pc, #96]	; (800401c <MX_ADC1_Init+0x78>)
 8003fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003fc2:	4b16      	ldr	r3, [pc, #88]	; (800401c <MX_ADC1_Init+0x78>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fc8:	4b14      	ldr	r3, [pc, #80]	; (800401c <MX_ADC1_Init+0x78>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <MX_ADC1_Init+0x78>)
 8003fd0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003fd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fd6:	4b11      	ldr	r3, [pc, #68]	; (800401c <MX_ADC1_Init+0x78>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <MX_ADC1_Init+0x78>)
 8003fde:	2202      	movs	r2, #2
 8003fe0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003fe2:	480e      	ldr	r0, [pc, #56]	; (800401c <MX_ADC1_Init+0x78>)
 8003fe4:	f7fc f8e6 	bl	80001b4 <HAL_ADC_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003fee:	f000 f8f5 	bl	80041dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003ffa:	2307      	movs	r3, #7
 8003ffc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ffe:	1d3b      	adds	r3, r7, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4806      	ldr	r0, [pc, #24]	; (800401c <MX_ADC1_Init+0x78>)
 8004004:	f7fc fb62 	bl	80006cc <HAL_ADC_ConfigChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800400e:	f000 f8e5 	bl	80041dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	200011a0 	.word	0x200011a0
 8004020:	40012400 	.word	0x40012400

08004024 <MX_RTC_Init>:

}


void MX_RTC_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <MX_RTC_Init+0x30>)
 800402a:	4a0b      	ldr	r2, [pc, #44]	; (8004058 <MX_RTC_Init+0x34>)
 800402c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <MX_RTC_Init+0x30>)
 8004030:	f04f 32ff 	mov.w	r2, #4294967295
 8004034:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8004036:	4b07      	ldr	r3, [pc, #28]	; (8004054 <MX_RTC_Init+0x30>)
 8004038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800403c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800403e:	4805      	ldr	r0, [pc, #20]	; (8004054 <MX_RTC_Init+0x30>)
 8004040:	f7fd fcfc 	bl	8001a3c <HAL_RTC_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 800404a:	f000 f8c7 	bl	80041dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200011d0 	.word	0x200011d0
 8004058:	40002800 	.word	0x40002800

0800405c <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004062:	f107 0310 	add.w	r3, r7, #16
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004070:	4b23      	ldr	r3, [pc, #140]	; (8004100 <MX_GPIO_Init+0xa4>)
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	4a22      	ldr	r2, [pc, #136]	; (8004100 <MX_GPIO_Init+0xa4>)
 8004076:	f043 0320 	orr.w	r3, r3, #32
 800407a:	6193      	str	r3, [r2, #24]
 800407c:	4b20      	ldr	r3, [pc, #128]	; (8004100 <MX_GPIO_Init+0xa4>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <MX_GPIO_Init+0xa4>)
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <MX_GPIO_Init+0xa4>)
 800408e:	f043 0304 	orr.w	r3, r3, #4
 8004092:	6193      	str	r3, [r2, #24]
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <MX_GPIO_Init+0xa4>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <MX_GPIO_Init+0xa4>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	4a16      	ldr	r2, [pc, #88]	; (8004100 <MX_GPIO_Init+0xa4>)
 80040a6:	f043 0308 	orr.w	r3, r3, #8
 80040aa:	6193      	str	r3, [r2, #24]
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <MX_GPIO_Init+0xa4>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	607b      	str	r3, [r7, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CLK_Pin|DIN_Pin|DC_Pin|CE_Pin
 80040b8:	2200      	movs	r2, #0
 80040ba:	21f8      	movs	r1, #248	; 0xf8
 80040bc:	4811      	ldr	r0, [pc, #68]	; (8004104 <MX_GPIO_Init+0xa8>)
 80040be:	f7fc feda 	bl	8000e76 <HAL_GPIO_WritePin>
                          |RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CLK_Pin DIN_Pin DC_Pin CE_Pin
                           RST_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIN_Pin|DC_Pin|CE_Pin
 80040c2:	23f8      	movs	r3, #248	; 0xf8
 80040c4:	613b      	str	r3, [r7, #16]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c6:	2301      	movs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ce:	2302      	movs	r3, #2
 80040d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	4619      	mov	r1, r3
 80040d8:	480a      	ldr	r0, [pc, #40]	; (8004104 <MX_GPIO_Init+0xa8>)
 80040da:	f7fc fd5b 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : P2_ATK_Pin P1_ATK_Pin */
  GPIO_InitStruct.Pin = P2_ATK_Pin|P1_ATK_Pin;
 80040de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80040e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e8:	2301      	movs	r3, #1
 80040ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ec:	f107 0310 	add.w	r3, r7, #16
 80040f0:	4619      	mov	r1, r3
 80040f2:	4805      	ldr	r0, [pc, #20]	; (8004108 <MX_GPIO_Init+0xac>)
 80040f4:	f7fc fd4e 	bl	8000b94 <HAL_GPIO_Init>

}
 80040f8:	bf00      	nop
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000
 8004104:	40010800 	.word	0x40010800
 8004108:	40010c00 	.word	0x40010c00

0800410c <SystemClock_Config>:

void SystemClock_Config(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b094      	sub	sp, #80	; 0x50
 8004110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004116:	2228      	movs	r2, #40	; 0x28
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f001 feb1 	bl	8005e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	605a      	str	r2, [r3, #4]
 800412a:	609a      	str	r2, [r3, #8]
 800412c:	60da      	str	r2, [r3, #12]
 800412e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800413c:	230a      	movs	r3, #10
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004140:	2301      	movs	r3, #1
 8004142:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004144:	2310      	movs	r3, #16
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004148:	2301      	movs	r3, #1
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800414c:	2300      	movs	r3, #0
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc feb3 	bl	8000ec0 <HAL_RCC_OscConfig>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004160:	f000 f83c 	bl	80041dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004164:	230f      	movs	r3, #15
 8004166:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800416c:	2300      	movs	r3, #0
 800416e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004170:	2300      	movs	r3, #0
 8004172:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004174:	2300      	movs	r3, #0
 8004176:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f7fd f91e 	bl	80013c0 <HAL_RCC_ClockConfig>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800418a:	f000 f827 	bl	80041dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800418e:	2303      	movs	r3, #3
 8004190:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004196:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8004198:	2300      	movs	r3, #0
 800419a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fd fada 	bl	8001758 <HAL_RCCEx_PeriphCLKConfig>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80041aa:	f000 f817 	bl	80041dc <Error_Handler>
  }
}
 80041ae:	bf00      	nop
 80041b0:	3750      	adds	r7, #80	; 0x50
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80041ca:	f7fb ffd7 	bl	800017c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40000800 	.word	0x40000800

080041dc <Error_Handler>:

void Error_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <Sm_BotaoON>:
		{ STATE_BotaoOFF, Sm_BotaoOFF },
};


void Sm_BotaoON(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
   #ifdef DEBUG
	//char ONTEXTO[4]="ON";
	//ONTEXTO[2]=0x20;
	#endif
	if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==0)
 80041ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041f0:	480b      	ldr	r0, [pc, #44]	; (8004220 <Sm_BotaoON+0x38>)
 80041f2:	f7fc fe29 	bl	8000e48 <HAL_GPIO_ReadPin>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <Sm_BotaoON+0x1c>
	{
		SmState_Botao1 = STATE_BotaoON;
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <Sm_BotaoON+0x3c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
	}else
		if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==1)
		{
			SmState_Botao1 = STATE_DEBOUNCE;
		}
}
 8004202:	e00a      	b.n	800421a <Sm_BotaoON+0x32>
		if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==1)
 8004204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004208:	4805      	ldr	r0, [pc, #20]	; (8004220 <Sm_BotaoON+0x38>)
 800420a:	f7fc fe1d 	bl	8000e48 <HAL_GPIO_ReadPin>
 800420e:	4603      	mov	r3, r0
 8004210:	2b01      	cmp	r3, #1
 8004212:	d102      	bne.n	800421a <Sm_BotaoON+0x32>
			SmState_Botao1 = STATE_DEBOUNCE;
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <Sm_BotaoON+0x3c>)
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40010c00 	.word	0x40010c00
 8004224:	2000000c 	.word	0x2000000c

08004228 <Sm_BotaoOFF>:
void Sm_BotaoOFF(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==1)
 800422c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004230:	480b      	ldr	r0, [pc, #44]	; (8004260 <Sm_BotaoOFF+0x38>)
 8004232:	f7fc fe09 	bl	8000e48 <HAL_GPIO_ReadPin>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d103      	bne.n	8004244 <Sm_BotaoOFF+0x1c>
	{
		#ifdef DEBUG
		//print_seguro(0,0,"OFF");
		#endif
		SmState_Botao1 = STATE_BotaoOFF;
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <Sm_BotaoOFF+0x3c>)
 800423e:	2202      	movs	r2, #2
 8004240:	701a      	strb	r2, [r3, #0]
	else
		if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==0)
		{
			SmState_Botao1 = STATE_DEBOUNCE;
		}
}
 8004242:	e00a      	b.n	800425a <Sm_BotaoOFF+0x32>
		if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==0)
 8004244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004248:	4805      	ldr	r0, [pc, #20]	; (8004260 <Sm_BotaoOFF+0x38>)
 800424a:	f7fc fdfd 	bl	8000e48 <HAL_GPIO_ReadPin>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <Sm_BotaoOFF+0x32>
			SmState_Botao1 = STATE_DEBOUNCE;
 8004254:	4b03      	ldr	r3, [pc, #12]	; (8004264 <Sm_BotaoOFF+0x3c>)
 8004256:	2201      	movs	r2, #1
 8004258:	701a      	strb	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40010c00 	.word	0x40010c00
 8004264:	2000000c 	.word	0x2000000c

08004268 <Sm_DEBOUNCE>:

void Sm_DEBOUNCE(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==1)
 800426c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004270:	481a      	ldr	r0, [pc, #104]	; (80042dc <Sm_DEBOUNCE+0x74>)
 8004272:	f7fc fde9 	bl	8000e48 <HAL_GPIO_ReadPin>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d112      	bne.n	80042a2 <Sm_DEBOUNCE+0x3a>
		{
				osDelay(BOTAO_DEBOUNCE);
 800427c:	200a      	movs	r0, #10
 800427e:	f7fd ff2c 	bl	80020da <osDelay>
				if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==1)
 8004282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004286:	4815      	ldr	r0, [pc, #84]	; (80042dc <Sm_DEBOUNCE+0x74>)
 8004288:	f7fc fdde 	bl	8000e48 <HAL_GPIO_ReadPin>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d103      	bne.n	800429a <Sm_DEBOUNCE+0x32>
					SmState_Botao1 = STATE_BotaoOFF;
 8004292:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <Sm_DEBOUNCE+0x78>)
 8004294:	2202      	movs	r2, #2
 8004296:	701a      	strb	r2, [r3, #0]
					else
						SmState_Botao1 = STATE_DEBOUNCE;
				}
	}

}
 8004298:	e01d      	b.n	80042d6 <Sm_DEBOUNCE+0x6e>
					SmState_Botao1 = STATE_DEBOUNCE;
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <Sm_DEBOUNCE+0x78>)
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]
}
 80042a0:	e019      	b.n	80042d6 <Sm_DEBOUNCE+0x6e>
		if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==0)
 80042a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042a6:	480d      	ldr	r0, [pc, #52]	; (80042dc <Sm_DEBOUNCE+0x74>)
 80042a8:	f7fc fdce 	bl	8000e48 <HAL_GPIO_ReadPin>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d111      	bne.n	80042d6 <Sm_DEBOUNCE+0x6e>
					osDelay(BOTAO_DEBOUNCE);
 80042b2:	200a      	movs	r0, #10
 80042b4:	f7fd ff11 	bl	80020da <osDelay>
					if(HAL_GPIO_ReadPin(P1_ATK_GPIO_Port,P1_ATK_Pin)==0)
 80042b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042bc:	4807      	ldr	r0, [pc, #28]	; (80042dc <Sm_DEBOUNCE+0x74>)
 80042be:	f7fc fdc3 	bl	8000e48 <HAL_GPIO_ReadPin>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d103      	bne.n	80042d0 <Sm_DEBOUNCE+0x68>
						SmState_Botao1 = STATE_BotaoON;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <Sm_DEBOUNCE+0x78>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
}
 80042ce:	e002      	b.n	80042d6 <Sm_DEBOUNCE+0x6e>
						SmState_Botao1 = STATE_DEBOUNCE;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <Sm_DEBOUNCE+0x78>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
}
 80042d6:	bf00      	nop
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40010c00 	.word	0x40010c00
 80042e0:	2000000c 	.word	0x2000000c

080042e4 <Rodar_Maquina_Botao1>:

void Rodar_Maquina_Botao1(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
	if(SmState_Botao1 < NUM_STATES)
 80042e8:	4b06      	ldr	r3, [pc, #24]	; (8004304 <Rodar_Maquina_Botao1+0x20>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d807      	bhi.n	8004300 <Rodar_Maquina_Botao1+0x1c>
	{
		(*StateMachine_Botao1[SmState_Botao1].func)();
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <Rodar_Maquina_Botao1+0x20>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	4a04      	ldr	r2, [pc, #16]	; (8004308 <Rodar_Maquina_Botao1+0x24>)
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4413      	add	r3, r2
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4798      	blx	r3
 80042fe:	e000      	b.n	8004302 <Rodar_Maquina_Botao1+0x1e>
	}
	else
	{
		return;
 8004300:	bf00      	nop
	}
}
 8004302:	bd80      	pop	{r7, pc}
 8004304:	2000000c 	.word	0x2000000c
 8004308:	20000010 	.word	0x20000010

0800430c <AdicionarNaLista1>:

uint32_t adc_value1 = 0;
char  input_buffer1[12] = " N N N N N ";

void AdicionarNaLista1(char *add)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
    if( xSemaphoreTake( input1, 1000 ) == pdTRUE )
 8004314:	4b15      	ldr	r3, [pc, #84]	; (800436c <AdicionarNaLista1+0x60>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe f959 	bl	80025d4 <xQueueSemaphoreTake>
 8004322:	4603      	mov	r3, r0
 8004324:	2b01      	cmp	r3, #1
 8004326:	d11c      	bne.n	8004362 <AdicionarNaLista1+0x56>
 	{
    	  for(int i=9; i>=2;i=i-2)
 8004328:	2309      	movs	r3, #9
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e00b      	b.n	8004346 <AdicionarNaLista1+0x3a>
    	  {
    		  input_buffer1[i] = input_buffer1[i-2];
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b02      	subs	r3, #2
 8004332:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <AdicionarNaLista1+0x64>)
 8004334:	5cd1      	ldrb	r1, [r2, r3]
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <AdicionarNaLista1+0x64>)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	460a      	mov	r2, r1
 800433e:	701a      	strb	r2, [r3, #0]
    	  for(int i=9; i>=2;i=i-2)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b02      	subs	r3, #2
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b01      	cmp	r3, #1
 800434a:	dcf0      	bgt.n	800432e <AdicionarNaLista1+0x22>
    	  }
    	  input_buffer1[1] = *add;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <AdicionarNaLista1+0x64>)
 8004352:	705a      	strb	r2, [r3, #1]
		xSemaphoreGive( input1);
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <AdicionarNaLista1+0x60>)
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	2300      	movs	r3, #0
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	f7fe f83f 	bl	80023e0 <xQueueGenericSend>
	 }
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	2000116c 	.word	0x2000116c
 8004370:	2000002c 	.word	0x2000002c

08004374 <lerDoInput1>:

char  lerDoInput1(uint8_t index)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
	char ret = '\0';
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
    if( xSemaphoreTake( input1, 1000 ) == pdTRUE )
 8004382:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <lerDoInput1+0x44>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800438a:	4618      	mov	r0, r3
 800438c:	f7fe f922 	bl	80025d4 <xQueueSemaphoreTake>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d10a      	bne.n	80043ac <lerDoInput1+0x38>
 	{
    	ret = input_buffer1[index];
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	4a08      	ldr	r2, [pc, #32]	; (80043bc <lerDoInput1+0x48>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive( input1);
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <lerDoInput1+0x44>)
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	2300      	movs	r3, #0
 80043a4:	2200      	movs	r2, #0
 80043a6:	2100      	movs	r1, #0
 80043a8:	f7fe f81a 	bl	80023e0 <xQueueGenericSend>
	 }
    return ret;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000116c 	.word	0x2000116c
 80043bc:	2000002c 	.word	0x2000002c

080043c0 <P1_INTERPRETER>:

StateType_Int1 SmState_Int1 = STATE_DEBOUNCE_Int1;


uint32_t P1_INTERPRETER(uint32_t value)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	///  4 5 6
	///     2
	/// 4 = Esquerda/Back
	/// 5 = Neutro
	/// 6 = Direita/Forward
	if(SmState_Botao1==STATE_BotaoON)
 80043c8:	4b10      	ldr	r3, [pc, #64]	; (800440c <P1_INTERPRETER+0x4c>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <P1_INTERPRETER+0x14>
	{
		return ATK_1;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e015      	b.n	8004400 <P1_INTERPRETER+0x40>
	}

	if(value>4050 && value<=4095)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f640 72d2 	movw	r2, #4050	; 0xfd2
 80043da:	4293      	cmp	r3, r2
 80043dc:	d905      	bls.n	80043ea <P1_INTERPRETER+0x2a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d201      	bcs.n	80043ea <P1_INTERPRETER+0x2a>
	{
		return DIREITA_FRENTE_1;
 80043e6:	2306      	movs	r3, #6
 80043e8:	e00a      	b.n	8004400 <P1_INTERPRETER+0x40>
	}
	else
	{
		if(value>4095 || value<=2000)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f0:	d203      	bcs.n	80043fa <P1_INTERPRETER+0x3a>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80043f8:	d801      	bhi.n	80043fe <P1_INTERPRETER+0x3e>
		{
			return ESQUER_ATRAS_1;
 80043fa:	2304      	movs	r3, #4
 80043fc:	e000      	b.n	8004400 <P1_INTERPRETER+0x40>
		}
		else
		{
			return NEUTRO_1;
 80043fe:	2305      	movs	r3, #5
		}
	}
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000000c 	.word	0x2000000c

08004410 <Sm_Right_Int1>:

void Sm_Right_Int1(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
	AdicionarNaLista1(&RightSymbol);
 8004414:	4803      	ldr	r0, [pc, #12]	; (8004424 <Sm_Right_Int1+0x14>)
 8004416:	f7ff ff79 	bl	800430c <AdicionarNaLista1>
	SmState_Int1=STATE_RightPressed_Int1;
 800441a:	4b03      	ldr	r3, [pc, #12]	; (8004428 <Sm_Right_Int1+0x18>)
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
}
 8004420:	bf00      	nop
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000028 	.word	0x20000028
 8004428:	20000088 	.word	0x20000088

0800442c <Sm_Left_Int1>:

void Sm_Left_Int1(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	AdicionarNaLista1(&LeftSymbol);
 8004430:	4803      	ldr	r0, [pc, #12]	; (8004440 <Sm_Left_Int1+0x14>)
 8004432:	f7ff ff6b 	bl	800430c <AdicionarNaLista1>
	SmState_Int1=STATE_LeftPressed_Int1;
 8004436:	4b03      	ldr	r3, [pc, #12]	; (8004444 <Sm_Left_Int1+0x18>)
 8004438:	2203      	movs	r2, #3
 800443a:	701a      	strb	r2, [r3, #0]
}
 800443c:	bf00      	nop
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000029 	.word	0x20000029
 8004444:	20000088 	.word	0x20000088

08004448 <Sm_Neutral_Int1>:

void Sm_Neutral_Int1(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
	AdicionarNaLista1(&NeutralSymbol);
 800444c:	4803      	ldr	r0, [pc, #12]	; (800445c <Sm_Neutral_Int1+0x14>)
 800444e:	f7ff ff5d 	bl	800430c <AdicionarNaLista1>
	SmState_Int1=STATE_NeutralPressed_Int1;
 8004452:	4b03      	ldr	r3, [pc, #12]	; (8004460 <Sm_Neutral_Int1+0x18>)
 8004454:	2204      	movs	r2, #4
 8004456:	701a      	strb	r2, [r3, #0]
}
 8004458:	bf00      	nop
 800445a:	bd80      	pop	{r7, pc}
 800445c:	2000002a 	.word	0x2000002a
 8004460:	20000088 	.word	0x20000088

08004464 <Sm_ATK_Int1>:

void Sm_ATK_Int1(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
	AdicionarNaLista1(&ATKSymbol);
 8004468:	4803      	ldr	r0, [pc, #12]	; (8004478 <Sm_ATK_Int1+0x14>)
 800446a:	f7ff ff4f 	bl	800430c <AdicionarNaLista1>
	SmState_Int1=STATE_ATKPressed_Int1;
 800446e:	4b03      	ldr	r3, [pc, #12]	; (800447c <Sm_ATK_Int1+0x18>)
 8004470:	2208      	movs	r2, #8
 8004472:	701a      	strb	r2, [r3, #0]
}
 8004474:	bf00      	nop
 8004476:	bd80      	pop	{r7, pc}
 8004478:	2000002b 	.word	0x2000002b
 800447c:	20000088 	.word	0x20000088

08004480 <Sm_RightPressed_Int1>:

void Sm_RightPressed_Int1(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
   #ifdef DEBUG
	print_seguro(1,1,"state: rpr");
 8004484:	4a0d      	ldr	r2, [pc, #52]	; (80044bc <Sm_RightPressed_Int1+0x3c>)
 8004486:	2101      	movs	r1, #1
 8004488:	2001      	movs	r0, #1
 800448a:	f000 fc23 	bl	8004cd4 <print_seguro>
   #endif
	adc_value1 = HAL_ADC_GetValue (&hadc2);
 800448e:	480c      	ldr	r0, [pc, #48]	; (80044c0 <Sm_RightPressed_Int1+0x40>)
 8004490:	f7fc f910 	bl	80006b4 <HAL_ADC_GetValue>
 8004494:	4602      	mov	r2, r0
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <Sm_RightPressed_Int1+0x44>)
 8004498:	601a      	str	r2, [r3, #0]
	switch(P1_INTERPRETER(adc_value1))
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <Sm_RightPressed_Int1+0x44>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff8e 	bl	80043c0 <P1_INTERPRETER>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d103      	bne.n	80044b2 <Sm_RightPressed_Int1+0x32>
	{
					case DIREITA_FRENTE_1:
						SmState_Int1=STATE_RightPressed_Int1;
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <Sm_RightPressed_Int1+0x48>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
						break;
 80044b0:	e002      	b.n	80044b8 <Sm_RightPressed_Int1+0x38>
					default:
						SmState_Int1=STATE_DEBOUNCE_Int1;
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <Sm_RightPressed_Int1+0x48>)
 80044b4:	2206      	movs	r2, #6
 80044b6:	701a      	strb	r2, [r3, #0]
	}
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	08005edc 	.word	0x08005edc
 80044c0:	20001170 	.word	0x20001170
 80044c4:	20000f58 	.word	0x20000f58
 80044c8:	20000088 	.word	0x20000088

080044cc <Sm_NeutralPressed_Int1>:

void Sm_NeutralPressed_Int1(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	#ifdef DEBUG
	print_seguro(1,1,"state: npr");
 80044d0:	4a0d      	ldr	r2, [pc, #52]	; (8004508 <Sm_NeutralPressed_Int1+0x3c>)
 80044d2:	2101      	movs	r1, #1
 80044d4:	2001      	movs	r0, #1
 80044d6:	f000 fbfd 	bl	8004cd4 <print_seguro>
   #endif

	adc_value1 = HAL_ADC_GetValue (&hadc2);
 80044da:	480c      	ldr	r0, [pc, #48]	; (800450c <Sm_NeutralPressed_Int1+0x40>)
 80044dc:	f7fc f8ea 	bl	80006b4 <HAL_ADC_GetValue>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <Sm_NeutralPressed_Int1+0x44>)
 80044e4:	601a      	str	r2, [r3, #0]
	switch(P1_INTERPRETER(adc_value1))
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <Sm_NeutralPressed_Int1+0x44>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff ff68 	bl	80043c0 <P1_INTERPRETER>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d103      	bne.n	80044fe <Sm_NeutralPressed_Int1+0x32>
	{
					case NEUTRO_1:
						SmState_Int1=STATE_NeutralPressed_Int1;
 80044f6:	4b07      	ldr	r3, [pc, #28]	; (8004514 <Sm_NeutralPressed_Int1+0x48>)
 80044f8:	2204      	movs	r2, #4
 80044fa:	701a      	strb	r2, [r3, #0]
						break;
 80044fc:	e002      	b.n	8004504 <Sm_NeutralPressed_Int1+0x38>
					default:
						SmState_Int1=STATE_DEBOUNCE_Int1;
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <Sm_NeutralPressed_Int1+0x48>)
 8004500:	2206      	movs	r2, #6
 8004502:	701a      	strb	r2, [r3, #0]
	}
}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	08005ee8 	.word	0x08005ee8
 800450c:	20001170 	.word	0x20001170
 8004510:	20000f58 	.word	0x20000f58
 8004514:	20000088 	.word	0x20000088

08004518 <Sm_ATKPressed_Int1>:

void Sm_ATKPressed_Int1(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0

	#ifdef DEBUG
	print_seguro(1,1,"state: atp");
 800451c:	4a0d      	ldr	r2, [pc, #52]	; (8004554 <Sm_ATKPressed_Int1+0x3c>)
 800451e:	2101      	movs	r1, #1
 8004520:	2001      	movs	r0, #1
 8004522:	f000 fbd7 	bl	8004cd4 <print_seguro>
	#endif
	adc_value1 = HAL_ADC_GetValue (&hadc2);
 8004526:	480c      	ldr	r0, [pc, #48]	; (8004558 <Sm_ATKPressed_Int1+0x40>)
 8004528:	f7fc f8c4 	bl	80006b4 <HAL_ADC_GetValue>
 800452c:	4602      	mov	r2, r0
 800452e:	4b0b      	ldr	r3, [pc, #44]	; (800455c <Sm_ATKPressed_Int1+0x44>)
 8004530:	601a      	str	r2, [r3, #0]
	switch(P1_INTERPRETER(adc_value1))
 8004532:	4b0a      	ldr	r3, [pc, #40]	; (800455c <Sm_ATKPressed_Int1+0x44>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff ff42 	bl	80043c0 <P1_INTERPRETER>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d103      	bne.n	800454a <Sm_ATKPressed_Int1+0x32>
	{
					case ATK_1:
						SmState_Int1=STATE_ATKPressed_Int1;
 8004542:	4b07      	ldr	r3, [pc, #28]	; (8004560 <Sm_ATKPressed_Int1+0x48>)
 8004544:	2208      	movs	r2, #8
 8004546:	701a      	strb	r2, [r3, #0]
						break;
 8004548:	e002      	b.n	8004550 <Sm_ATKPressed_Int1+0x38>
					default:
						SmState_Int1=STATE_Edge_Int1;
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <Sm_ATKPressed_Int1+0x48>)
 800454c:	2209      	movs	r2, #9
 800454e:	701a      	strb	r2, [r3, #0]
	}
}
 8004550:	bf00      	nop
 8004552:	bd80      	pop	{r7, pc}
 8004554:	08005ef4 	.word	0x08005ef4
 8004558:	20001170 	.word	0x20001170
 800455c:	20000f58 	.word	0x20000f58
 8004560:	20000088 	.word	0x20000088

08004564 <Sm_LeftPressed_Int1>:
void Sm_LeftPressed_Int1(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
	#ifdef DEBUG
	print_seguro(1,1,"state: lpr");
 8004568:	4a0d      	ldr	r2, [pc, #52]	; (80045a0 <Sm_LeftPressed_Int1+0x3c>)
 800456a:	2101      	movs	r1, #1
 800456c:	2001      	movs	r0, #1
 800456e:	f000 fbb1 	bl	8004cd4 <print_seguro>
	#endif
	adc_value1 = HAL_ADC_GetValue (&hadc2);
 8004572:	480c      	ldr	r0, [pc, #48]	; (80045a4 <Sm_LeftPressed_Int1+0x40>)
 8004574:	f7fc f89e 	bl	80006b4 <HAL_ADC_GetValue>
 8004578:	4602      	mov	r2, r0
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <Sm_LeftPressed_Int1+0x44>)
 800457c:	601a      	str	r2, [r3, #0]
	switch(P1_INTERPRETER(adc_value1))
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <Sm_LeftPressed_Int1+0x44>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ff1c 	bl	80043c0 <P1_INTERPRETER>
 8004588:	4603      	mov	r3, r0
 800458a:	2b04      	cmp	r3, #4
 800458c:	d103      	bne.n	8004596 <Sm_LeftPressed_Int1+0x32>
	{
					case ESQUER_ATRAS_1:
						SmState_Int1=STATE_LeftPressed_Int1;
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <Sm_LeftPressed_Int1+0x48>)
 8004590:	2203      	movs	r2, #3
 8004592:	701a      	strb	r2, [r3, #0]
						break;
 8004594:	e002      	b.n	800459c <Sm_LeftPressed_Int1+0x38>
					default:
						SmState_Int1=STATE_DEBOUNCE_Int1;
 8004596:	4b05      	ldr	r3, [pc, #20]	; (80045ac <Sm_LeftPressed_Int1+0x48>)
 8004598:	2206      	movs	r2, #6
 800459a:	701a      	strb	r2, [r3, #0]
	}
}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08005f00 	.word	0x08005f00
 80045a4:	20001170 	.word	0x20001170
 80045a8:	20000f58 	.word	0x20000f58
 80045ac:	20000088 	.word	0x20000088

080045b0 <Sm_Edge_Int1>:
void Sm_Edge_Int1(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
	adc_value1 = HAL_ADC_GetValue (&hadc2);
 80045b4:	480c      	ldr	r0, [pc, #48]	; (80045e8 <Sm_Edge_Int1+0x38>)
 80045b6:	f7fc f87d 	bl	80006b4 <HAL_ADC_GetValue>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <Sm_Edge_Int1+0x3c>)
 80045be:	601a      	str	r2, [r3, #0]
	osDelay(DELAY_INT1*15);
 80045c0:	204b      	movs	r0, #75	; 0x4b
 80045c2:	f7fd fd8a 	bl	80020da <osDelay>
	switch(P1_INTERPRETER(adc_value1))
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <Sm_Edge_Int1+0x3c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fef8 	bl	80043c0 <P1_INTERPRETER>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <Sm_Edge_Int1+0x2e>
	{
					case ATK_1:
						SmState_Int1=STATE_ATKPressed_Int1;
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <Sm_Edge_Int1+0x40>)
 80045d8:	2208      	movs	r2, #8
 80045da:	701a      	strb	r2, [r3, #0]
						break;
 80045dc:	e002      	b.n	80045e4 <Sm_Edge_Int1+0x34>
					default:
						SmState_Int1=STATE_DEBOUNCE_Int1;
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <Sm_Edge_Int1+0x40>)
 80045e0:	2206      	movs	r2, #6
 80045e2:	701a      	strb	r2, [r3, #0]
	}
}
 80045e4:	bf00      	nop
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20001170 	.word	0x20001170
 80045ec:	20000f58 	.word	0x20000f58
 80045f0:	20000088 	.word	0x20000088

080045f4 <Sm_DEBOUNCE_Int1>:

void Sm_DEBOUNCE_Int1(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
	#ifdef DEBUG
	print_seguro(1,1,"state: dbo");
 80045f8:	4a46      	ldr	r2, [pc, #280]	; (8004714 <Sm_DEBOUNCE_Int1+0x120>)
 80045fa:	2101      	movs	r1, #1
 80045fc:	2001      	movs	r0, #1
 80045fe:	f000 fb69 	bl	8004cd4 <print_seguro>
	#endif
	adc_value1 = HAL_ADC_GetValue (&hadc2);
 8004602:	4845      	ldr	r0, [pc, #276]	; (8004718 <Sm_DEBOUNCE_Int1+0x124>)
 8004604:	f7fc f856 	bl	80006b4 <HAL_ADC_GetValue>
 8004608:	4602      	mov	r2, r0
 800460a:	4b44      	ldr	r3, [pc, #272]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 800460c:	601a      	str	r2, [r3, #0]

	switch(P1_INTERPRETER(adc_value1))
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fed4 	bl	80043c0 <P1_INTERPRETER>
 8004618:	4603      	mov	r3, r0
 800461a:	2b06      	cmp	r3, #6
 800461c:	d874      	bhi.n	8004708 <Sm_DEBOUNCE_Int1+0x114>
 800461e:	a201      	add	r2, pc, #4	; (adr r2, 8004624 <Sm_DEBOUNCE_Int1+0x30>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	080046d7 	.word	0x080046d7
 8004628:	08004709 	.word	0x08004709
 800462c:	08004709 	.word	0x08004709
 8004630:	08004709 	.word	0x08004709
 8004634:	08004673 	.word	0x08004673
 8004638:	080046a5 	.word	0x080046a5
 800463c:	08004641 	.word	0x08004641
	{
					case DIREITA_FRENTE_1:
						osDelay(DELAY_INT1);
 8004640:	2005      	movs	r0, #5
 8004642:	f7fd fd4a 	bl	80020da <osDelay>
						adc_value1 = HAL_ADC_GetValue (&hadc2);
 8004646:	4834      	ldr	r0, [pc, #208]	; (8004718 <Sm_DEBOUNCE_Int1+0x124>)
 8004648:	f7fc f834 	bl	80006b4 <HAL_ADC_GetValue>
 800464c:	4602      	mov	r2, r0
 800464e:	4b33      	ldr	r3, [pc, #204]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 8004650:	601a      	str	r2, [r3, #0]
						if(P1_INTERPRETER(adc_value1) == DIREITA_FRENTE_1)
 8004652:	4b32      	ldr	r3, [pc, #200]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff feb2 	bl	80043c0 <P1_INTERPRETER>
 800465c:	4603      	mov	r3, r0
 800465e:	2b06      	cmp	r3, #6
 8004660:	d103      	bne.n	800466a <Sm_DEBOUNCE_Int1+0x76>
							SmState_Int1=STATE_Right_Int1;
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
						else
							SmState_Int1=STATE_DEBOUNCE_Int1;
						break;
 8004668:	e051      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
							SmState_Int1=STATE_DEBOUNCE_Int1;
 800466a:	4b2d      	ldr	r3, [pc, #180]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 800466c:	2206      	movs	r2, #6
 800466e:	701a      	strb	r2, [r3, #0]
						break;
 8004670:	e04d      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
					case ESQUER_ATRAS_1:
						osDelay(DELAY_INT1);
 8004672:	2005      	movs	r0, #5
 8004674:	f7fd fd31 	bl	80020da <osDelay>
						adc_value1 = HAL_ADC_GetValue (&hadc2);
 8004678:	4827      	ldr	r0, [pc, #156]	; (8004718 <Sm_DEBOUNCE_Int1+0x124>)
 800467a:	f7fc f81b 	bl	80006b4 <HAL_ADC_GetValue>
 800467e:	4602      	mov	r2, r0
 8004680:	4b26      	ldr	r3, [pc, #152]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 8004682:	601a      	str	r2, [r3, #0]
						if(P1_INTERPRETER(adc_value1) == ESQUER_ATRAS_1)
 8004684:	4b25      	ldr	r3, [pc, #148]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fe99 	bl	80043c0 <P1_INTERPRETER>
 800468e:	4603      	mov	r3, r0
 8004690:	2b04      	cmp	r3, #4
 8004692:	d103      	bne.n	800469c <Sm_DEBOUNCE_Int1+0xa8>
							SmState_Int1=STATE_Left_Int1;
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
						else
							SmState_Int1=STATE_DEBOUNCE_Int1;
						break;
 800469a:	e038      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
							SmState_Int1=STATE_DEBOUNCE_Int1;
 800469c:	4b20      	ldr	r3, [pc, #128]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 800469e:	2206      	movs	r2, #6
 80046a0:	701a      	strb	r2, [r3, #0]
						break;
 80046a2:	e034      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
					case NEUTRO_1:
						osDelay(DELAY_INT1*20);
 80046a4:	2064      	movs	r0, #100	; 0x64
 80046a6:	f7fd fd18 	bl	80020da <osDelay>
						adc_value1 = HAL_ADC_GetValue (&hadc2);
 80046aa:	481b      	ldr	r0, [pc, #108]	; (8004718 <Sm_DEBOUNCE_Int1+0x124>)
 80046ac:	f7fc f802 	bl	80006b4 <HAL_ADC_GetValue>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b1a      	ldr	r3, [pc, #104]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 80046b4:	601a      	str	r2, [r3, #0]
						if(P1_INTERPRETER(adc_value1) == NEUTRO_1)
 80046b6:	4b19      	ldr	r3, [pc, #100]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fe80 	bl	80043c0 <P1_INTERPRETER>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d103      	bne.n	80046ce <Sm_DEBOUNCE_Int1+0xda>
							SmState_Int1=STATE_Neutral_Int1;
 80046c6:	4b16      	ldr	r3, [pc, #88]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 80046c8:	2205      	movs	r2, #5
 80046ca:	701a      	strb	r2, [r3, #0]
						else
							SmState_Int1=STATE_DEBOUNCE_Int1;
						break;
 80046cc:	e01f      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
							SmState_Int1=STATE_DEBOUNCE_Int1;
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 80046d0:	2206      	movs	r2, #6
 80046d2:	701a      	strb	r2, [r3, #0]
						break;
 80046d4:	e01b      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
					case ATK_1:
						osDelay(DELAY_INT1);
 80046d6:	2005      	movs	r0, #5
 80046d8:	f7fd fcff 	bl	80020da <osDelay>
						adc_value1 = HAL_ADC_GetValue (&hadc2);
 80046dc:	480e      	ldr	r0, [pc, #56]	; (8004718 <Sm_DEBOUNCE_Int1+0x124>)
 80046de:	f7fb ffe9 	bl	80006b4 <HAL_ADC_GetValue>
 80046e2:	4602      	mov	r2, r0
 80046e4:	4b0d      	ldr	r3, [pc, #52]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 80046e6:	601a      	str	r2, [r3, #0]
						if(P1_INTERPRETER(adc_value1) == ATK_1)
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <Sm_DEBOUNCE_Int1+0x128>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fe67 	bl	80043c0 <P1_INTERPRETER>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d103      	bne.n	8004700 <Sm_DEBOUNCE_Int1+0x10c>
							SmState_Int1=STATE_ATK_Int1;
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 80046fa:	2207      	movs	r2, #7
 80046fc:	701a      	strb	r2, [r3, #0]
						else
							SmState_Int1=STATE_DEBOUNCE_Int1;
						break;
 80046fe:	e006      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
							SmState_Int1=STATE_DEBOUNCE_Int1;
 8004700:	4b07      	ldr	r3, [pc, #28]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 8004702:	2206      	movs	r2, #6
 8004704:	701a      	strb	r2, [r3, #0]
						break;
 8004706:	e002      	b.n	800470e <Sm_DEBOUNCE_Int1+0x11a>
						break;
					default:
						SmState_Int1=STATE_DEBOUNCE_Int1;
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <Sm_DEBOUNCE_Int1+0x12c>)
 800470a:	2206      	movs	r2, #6
 800470c:	701a      	strb	r2, [r3, #0]
	}
}
 800470e:	bf00      	nop
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	08005f0c 	.word	0x08005f0c
 8004718:	20001170 	.word	0x20001170
 800471c:	20000f58 	.word	0x20000f58
 8004720:	20000088 	.word	0x20000088

08004724 <Rodar_Maquina_Interpretador>:


void Rodar_Maquina_Interpretador(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	osDelay(10);
 8004728:	200a      	movs	r0, #10
 800472a:	f7fd fcd6 	bl	80020da <osDelay>
	HAL_ADC_PollForConversion (&hadc2, 1000);
 800472e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004732:	480b      	ldr	r0, [pc, #44]	; (8004760 <Rodar_Maquina_Interpretador+0x3c>)
 8004734:	f7fb fec4 	bl	80004c0 <HAL_ADC_PollForConversion>
	if(SmState_Int1 < NUM_STATES_Int1)
 8004738:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <Rodar_Maquina_Interpretador+0x40>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b09      	cmp	r3, #9
 800473e:	d80c      	bhi.n	800475a <Rodar_Maquina_Interpretador+0x36>
	{
		#ifdef DEBUG
		print_seguro(20,20,input_buffer1);
 8004740:	4a09      	ldr	r2, [pc, #36]	; (8004768 <Rodar_Maquina_Interpretador+0x44>)
 8004742:	2114      	movs	r1, #20
 8004744:	2014      	movs	r0, #20
 8004746:	f000 fac5 	bl	8004cd4 <print_seguro>
		#endif
		(*StateMachine_Interpretador[SmState_Int1].func)();
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <Rodar_Maquina_Interpretador+0x40>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	4a07      	ldr	r2, [pc, #28]	; (800476c <Rodar_Maquina_Interpretador+0x48>)
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	4413      	add	r3, r2
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4798      	blx	r3
 8004758:	e000      	b.n	800475c <Rodar_Maquina_Interpretador+0x38>
	}
	else
	{
		return;
 800475a:	bf00      	nop
	}
}
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20001170 	.word	0x20001170
 8004764:	20000088 	.word	0x20000088
 8004768:	2000002c 	.word	0x2000002c
 800476c:	20000038 	.word	0x20000038

08004770 <Sm_PowerOn>:
	48,
	8,
 	{0xfe, 0xfe, 0x92, 0xde, 0xfe, 0x66, 0x0, 0xfe, 0xfe, 0x32, 0x3e, 0xfe, 0xce, 0x0, 0xfe, 0xfe, 0xfe, 0x0, 0x7c, 0x7e, 0xc6, 0xda, 0xfa, 0xfa, 0x70, 0x0, 0x7e, 0xfe, 0xc0, 0xc0, 0xfe, 0x7e, 0x0, 0x0, 0xfe, 0xfe, 0xda, 0xda, 0xc0, 0x0, 0xfe, 0xfe, 0x3e, 0xf8, 0xe0, 0x3e, 0x8e, 0xfe}
};
void Sm_PowerOn(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0

	pontos_t p = {10,0,0,0,0,0};
 8004776:	230a      	movs	r3, #10
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
	print_figura_seguro(&p, &xablauSoft);
 800478e:	463b      	mov	r3, r7
 8004790:	4909      	ldr	r1, [pc, #36]	; (80047b8 <Sm_PowerOn+0x48>)
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fae2 	bl	8004d5c <print_figura_seguro>
	//pontos_t p = {5,5,10,10,15,15};
	//print_figura_seguro(&p, &fig1);
	osDelay(100);
 8004798:	2064      	movs	r0, #100	; 0x64
 800479a:	f7fd fc9e 	bl	80020da <osDelay>
	deleta_figura_seguro(&p, &xablauSoft);
 800479e:	463b      	mov	r3, r7
 80047a0:	4905      	ldr	r1, [pc, #20]	; (80047b8 <Sm_PowerOn+0x48>)
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 faba 	bl	8004d1c <deleta_figura_seguro>
	SmState_Menu = STATE_Menu;
 80047a8:	4b04      	ldr	r3, [pc, #16]	; (80047bc <Sm_PowerOn+0x4c>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	0800616c 	.word	0x0800616c
 80047bc:	20000f5c 	.word	0x20000f5c

080047c0 <Sm_Menu>:
void Sm_Menu(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
	pontos_t p = {0,0,0,0,0,0};
 80047c6:	463b      	mov	r3, r7
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	605a      	str	r2, [r3, #4]
 80047ce:	609a      	str	r2, [r3, #8]
 80047d0:	60da      	str	r2, [r3, #12]
 80047d2:	611a      	str	r2, [r3, #16]
 80047d4:	615a      	str	r2, [r3, #20]
	print_figura_seguro(&p, &mainMenu);
 80047d6:	463b      	mov	r3, r7
 80047d8:	4905      	ldr	r1, [pc, #20]	; (80047f0 <Sm_Menu+0x30>)
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fabe 	bl	8004d5c <print_figura_seguro>
	SmState_Menu=STATE_Menu1P;
 80047e0:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <Sm_Menu+0x34>)
 80047e2:	2202      	movs	r2, #2
 80047e4:	701a      	strb	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	080062f0 	.word	0x080062f0
 80047f4:	20000f5c 	.word	0x20000f5c

080047f8 <Sm_Menu1P>:

void Sm_Menu1P(void)
{
 80047f8:	b5b0      	push	{r4, r5, r7, lr}
 80047fa:	b08c      	sub	sp, #48	; 0x30
 80047fc:	af00      	add	r7, sp, #0
	pontos_t pmenu = {0,0,0,0,0,0};
 80047fe:	f107 0318 	add.w	r3, r7, #24
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
 8004808:	609a      	str	r2, [r3, #8]
 800480a:	60da      	str	r2, [r3, #12]
 800480c:	611a      	str	r2, [r3, #16]
 800480e:	615a      	str	r2, [r3, #20]
	pontos_t p = {8,38,0,0,0,0};
 8004810:	4b17      	ldr	r3, [pc, #92]	; (8004870 <Sm_Menu1P+0x78>)
 8004812:	463c      	mov	r4, r7
 8004814:	461d      	mov	r5, r3
 8004816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800481a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800481e:	e884 0003 	stmia.w	r4, {r0, r1}
	print_figura_seguro(&p, &cursor);
 8004822:	463b      	mov	r3, r7
 8004824:	4913      	ldr	r1, [pc, #76]	; (8004874 <Sm_Menu1P+0x7c>)
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fa98 	bl	8004d5c <print_figura_seguro>
	if(SmState_Int1==STATE_ATKPressed_Int1)
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <Sm_Menu1P+0x80>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d10d      	bne.n	8004850 <Sm_Menu1P+0x58>
	{
		deleta_figura_seguro(&pmenu, &mainMenu);
 8004834:	f107 0318 	add.w	r3, r7, #24
 8004838:	4910      	ldr	r1, [pc, #64]	; (800487c <Sm_Menu1P+0x84>)
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fa6e 	bl	8004d1c <deleta_figura_seguro>
		deleta_figura_seguro(&p, &cursor);
 8004840:	463b      	mov	r3, r7
 8004842:	490c      	ldr	r1, [pc, #48]	; (8004874 <Sm_Menu1P+0x7c>)
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fa69 	bl	8004d1c <deleta_figura_seguro>
		SmState_Menu = STATE_Arena1P_RoundStart;
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <Sm_Menu1P+0x88>)
 800484c:	2204      	movs	r2, #4
 800484e:	701a      	strb	r2, [r3, #0]
	}
	if(SmState_Int1==STATE_RightPressed_Int1)
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <Sm_Menu1P+0x80>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d107      	bne.n	8004868 <Sm_Menu1P+0x70>
	{
		deleta_figura_seguro(&p, &cursor);
 8004858:	463b      	mov	r3, r7
 800485a:	4906      	ldr	r1, [pc, #24]	; (8004874 <Sm_Menu1P+0x7c>)
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa5d 	bl	8004d1c <deleta_figura_seguro>
		SmState_Menu = STATE_Menu2P;
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <Sm_Menu1P+0x88>)
 8004864:	2203      	movs	r2, #3
 8004866:	701a      	strb	r2, [r3, #0]
	}
}
 8004868:	bf00      	nop
 800486a:	3730      	adds	r7, #48	; 0x30
 800486c:	46bd      	mov	sp, r7
 800486e:	bdb0      	pop	{r4, r5, r7, pc}
 8004870:	08005f18 	.word	0x08005f18
 8004874:	080064d4 	.word	0x080064d4
 8004878:	20000088 	.word	0x20000088
 800487c:	080062f0 	.word	0x080062f0
 8004880:	20000f5c 	.word	0x20000f5c

08004884 <Sm_Menu2P>:

void Sm_Menu2P(void)
{
 8004884:	b5b0      	push	{r4, r5, r7, lr}
 8004886:	b08c      	sub	sp, #48	; 0x30
 8004888:	af00      	add	r7, sp, #0

	pontos_t pmenu = {0,0,0,0,0,0};
 800488a:	f107 0318 	add.w	r3, r7, #24
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	605a      	str	r2, [r3, #4]
 8004894:	609a      	str	r2, [r3, #8]
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	615a      	str	r2, [r3, #20]
	pontos_t p = {60,38,0,0,0,0};
 800489c:	4b17      	ldr	r3, [pc, #92]	; (80048fc <Sm_Menu2P+0x78>)
 800489e:	463c      	mov	r4, r7
 80048a0:	461d      	mov	r5, r3
 80048a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048aa:	e884 0003 	stmia.w	r4, {r0, r1}
	print_figura_seguro(&p, &cursor);
 80048ae:	463b      	mov	r3, r7
 80048b0:	4913      	ldr	r1, [pc, #76]	; (8004900 <Sm_Menu2P+0x7c>)
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fa52 	bl	8004d5c <print_figura_seguro>
	if(SmState_Int1==STATE_ATKPressed_Int1)
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <Sm_Menu2P+0x80>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d10d      	bne.n	80048dc <Sm_Menu2P+0x58>
	{
		deleta_figura_seguro(&p, &cursor);
 80048c0:	463b      	mov	r3, r7
 80048c2:	490f      	ldr	r1, [pc, #60]	; (8004900 <Sm_Menu2P+0x7c>)
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fa29 	bl	8004d1c <deleta_figura_seguro>
		deleta_figura_seguro(&pmenu, &mainMenu);
 80048ca:	f107 0318 	add.w	r3, r7, #24
 80048ce:	490e      	ldr	r1, [pc, #56]	; (8004908 <Sm_Menu2P+0x84>)
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fa23 	bl	8004d1c <deleta_figura_seguro>
		SmState_Menu = STATE_Arena2P_RoundStart;
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <Sm_Menu2P+0x88>)
 80048d8:	2206      	movs	r2, #6
 80048da:	701a      	strb	r2, [r3, #0]
	}
	if(SmState_Int1==STATE_LeftPressed_Int1)
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <Sm_Menu2P+0x80>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d107      	bne.n	80048f4 <Sm_Menu2P+0x70>
	{
		deleta_figura_seguro(&p, &cursor);
 80048e4:	463b      	mov	r3, r7
 80048e6:	4906      	ldr	r1, [pc, #24]	; (8004900 <Sm_Menu2P+0x7c>)
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fa17 	bl	8004d1c <deleta_figura_seguro>
		SmState_Menu = STATE_Menu1P;
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <Sm_Menu2P+0x88>)
 80048f0:	2202      	movs	r2, #2
 80048f2:	701a      	strb	r2, [r3, #0]
	}
}
 80048f4:	bf00      	nop
 80048f6:	3730      	adds	r7, #48	; 0x30
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bdb0      	pop	{r4, r5, r7, pc}
 80048fc:	08005f30 	.word	0x08005f30
 8004900:	080064d4 	.word	0x080064d4
 8004904:	20000088 	.word	0x20000088
 8004908:	080062f0 	.word	0x080062f0
 800490c:	20000f5c 	.word	0x20000f5c

08004910 <print_roundstart>:

void print_roundstart(void)
{
 8004910:	b5b0      	push	{r4, r5, r7, lr}
 8004912:	b092      	sub	sp, #72	; 0x48
 8004914:	af00      	add	r7, sp, #0
	pontos_t pr = {20,10,0,0,0,0};
 8004916:	4b43      	ldr	r3, [pc, #268]	; (8004a24 <print_roundstart+0x114>)
 8004918:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800491c:	461d      	mov	r5, r3
 800491e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004922:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004926:	e884 0003 	stmia.w	r4, {r0, r1}
	pontos_t pb = {30,20,0,0,0,0};
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <print_roundstart+0x118>)
 800492c:	f107 0418 	add.w	r4, r7, #24
 8004930:	461d      	mov	r5, r3
 8004932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004936:	e895 0003 	ldmia.w	r5, {r0, r1}
 800493a:	e884 0003 	stmia.w	r4, {r0, r1}
	print_figura_seguro(&pr, &ROUND);
 800493e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004942:	493a      	ldr	r1, [pc, #232]	; (8004a2c <print_roundstart+0x11c>)
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fa09 	bl	8004d5c <print_figura_seguro>
	pontos_t p = {65,5,0,0,0,0};
 800494a:	4b39      	ldr	r3, [pc, #228]	; (8004a30 <print_roundstart+0x120>)
 800494c:	463c      	mov	r4, r7
 800494e:	461d      	mov	r5, r3
 8004950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004954:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004958:	e884 0003 	stmia.w	r4, {r0, r1}
	switch(round_count)
 800495c:	4b35      	ldr	r3, [pc, #212]	; (8004a34 <print_roundstart+0x124>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d01d      	beq.n	80049a0 <print_roundstart+0x90>
 8004964:	2b03      	cmp	r3, #3
 8004966:	d034      	beq.n	80049d2 <print_roundstart+0xc2>
 8004968:	2b01      	cmp	r3, #1
 800496a:	d000      	beq.n	800496e <print_roundstart+0x5e>
					print_figura_seguro(&pb, &BRIGUE);
					osDelay(1000);
					deleta_figura_seguro(&p, &tres);
					break;
		default:
					break;
 800496c:	e04a      	b.n	8004a04 <print_roundstart+0xf4>
					print_figura_seguro(&p, &um);
 800496e:	463b      	mov	r3, r7
 8004970:	4931      	ldr	r1, [pc, #196]	; (8004a38 <print_roundstart+0x128>)
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f9f2 	bl	8004d5c <print_figura_seguro>
					osDelay(500);
 8004978:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800497c:	f7fd fbad 	bl	80020da <osDelay>
					print_figura_seguro(&pb, &BRIGUE);
 8004980:	f107 0318 	add.w	r3, r7, #24
 8004984:	492d      	ldr	r1, [pc, #180]	; (8004a3c <print_roundstart+0x12c>)
 8004986:	4618      	mov	r0, r3
 8004988:	f000 f9e8 	bl	8004d5c <print_figura_seguro>
					osDelay(1000);
 800498c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004990:	f7fd fba3 	bl	80020da <osDelay>
					deleta_figura_seguro(&p, &um);
 8004994:	463b      	mov	r3, r7
 8004996:	4928      	ldr	r1, [pc, #160]	; (8004a38 <print_roundstart+0x128>)
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f9bf 	bl	8004d1c <deleta_figura_seguro>
					break;
 800499e:	e031      	b.n	8004a04 <print_roundstart+0xf4>
					print_figura_seguro(&p, &dois);
 80049a0:	463b      	mov	r3, r7
 80049a2:	4927      	ldr	r1, [pc, #156]	; (8004a40 <print_roundstart+0x130>)
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 f9d9 	bl	8004d5c <print_figura_seguro>
					osDelay(500);
 80049aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049ae:	f7fd fb94 	bl	80020da <osDelay>
					print_figura_seguro(&pb, &BRIGUE);
 80049b2:	f107 0318 	add.w	r3, r7, #24
 80049b6:	4921      	ldr	r1, [pc, #132]	; (8004a3c <print_roundstart+0x12c>)
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f9cf 	bl	8004d5c <print_figura_seguro>
					osDelay(1000);
 80049be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049c2:	f7fd fb8a 	bl	80020da <osDelay>
					deleta_figura_seguro(&p, &dois);
 80049c6:	463b      	mov	r3, r7
 80049c8:	491d      	ldr	r1, [pc, #116]	; (8004a40 <print_roundstart+0x130>)
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 f9a6 	bl	8004d1c <deleta_figura_seguro>
					break;
 80049d0:	e018      	b.n	8004a04 <print_roundstart+0xf4>
					print_figura_seguro(&p, &tres);
 80049d2:	463b      	mov	r3, r7
 80049d4:	491b      	ldr	r1, [pc, #108]	; (8004a44 <print_roundstart+0x134>)
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f9c0 	bl	8004d5c <print_figura_seguro>
					osDelay(500);
 80049dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80049e0:	f7fd fb7b 	bl	80020da <osDelay>
					print_figura_seguro(&pb, &BRIGUE);
 80049e4:	f107 0318 	add.w	r3, r7, #24
 80049e8:	4914      	ldr	r1, [pc, #80]	; (8004a3c <print_roundstart+0x12c>)
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 f9b6 	bl	8004d5c <print_figura_seguro>
					osDelay(1000);
 80049f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049f4:	f7fd fb71 	bl	80020da <osDelay>
					deleta_figura_seguro(&p, &tres);
 80049f8:	463b      	mov	r3, r7
 80049fa:	4912      	ldr	r1, [pc, #72]	; (8004a44 <print_roundstart+0x134>)
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 f98d 	bl	8004d1c <deleta_figura_seguro>
					break;
 8004a02:	bf00      	nop
	}
	deleta_figura_seguro(&pb, &BRIGUE);
 8004a04:	f107 0318 	add.w	r3, r7, #24
 8004a08:	490c      	ldr	r1, [pc, #48]	; (8004a3c <print_roundstart+0x12c>)
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f986 	bl	8004d1c <deleta_figura_seguro>
	deleta_figura_seguro(&pr, &ROUND);
 8004a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a14:	4905      	ldr	r1, [pc, #20]	; (8004a2c <print_roundstart+0x11c>)
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 f980 	bl	8004d1c <deleta_figura_seguro>
}
 8004a1c:	bf00      	nop
 8004a1e:	3748      	adds	r7, #72	; 0x48
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bdb0      	pop	{r4, r5, r7, pc}
 8004a24:	08005f48 	.word	0x08005f48
 8004a28:	08005f60 	.word	0x08005f60
 8004a2c:	0800651c 	.word	0x0800651c
 8004a30:	08005f78 	.word	0x08005f78
 8004a34:	20000089 	.word	0x20000089
 8004a38:	080064e0 	.word	0x080064e0
 8004a3c:	08006548 	.word	0x08006548
 8004a40:	080064f4 	.word	0x080064f4
 8004a44:	08006508 	.word	0x08006508

08004a48 <Sm_Arena1P_RoundStart>:
void Sm_Arena1P_RoundStart(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	print_roundstart();
 8004a4c:	f7ff ff60 	bl	8004910 <print_roundstart>
	SmState_Menu = STATE_Arena1P_ONGOING;
 8004a50:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <Sm_Arena1P_RoundStart+0x14>)
 8004a52:	2205      	movs	r2, #5
 8004a54:	701a      	strb	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000f5c 	.word	0x20000f5c

08004a60 <Sm_Arena1P_ONGOING>:

void Sm_Arena1P_ONGOING(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0

	SmState_Menu = STATE_Arena1P_ONGOING;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <Sm_Arena1P_ONGOING+0x14>)
 8004a66:	2205      	movs	r2, #5
 8004a68:	701a      	strb	r2, [r3, #0]
	osDelay(1);
 8004a6a:	2001      	movs	r0, #1
 8004a6c:	f7fd fb35 	bl	80020da <osDelay>
	/*if(SmState_Int1==STATE_LeftPressed_Int1)
			SmState_Menu = STATE_GameOver;*/
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000f5c 	.word	0x20000f5c

08004a78 <Sm_Arena2P_RoundStart>:

void Sm_Arena2P_RoundStart(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	print_roundstart();
 8004a7c:	f7ff ff48 	bl	8004910 <print_roundstart>
	SmState_Menu = STATE_Arena2P_ONGOING;
 8004a80:	4b02      	ldr	r3, [pc, #8]	; (8004a8c <Sm_Arena2P_RoundStart+0x14>)
 8004a82:	2207      	movs	r2, #7
 8004a84:	701a      	strb	r2, [r3, #0]
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000f5c 	.word	0x20000f5c

08004a90 <Sm_Arena2P_ONGOING>:

void Sm_Arena2P_ONGOING(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
	/*print_seguro(10,3,"             ");
	print_seguro(6,3,"2P GAME ON");*/
	/*if(SmState_Int1==STATE_RightPressed_Int1)
			SmState_Menu = STATE_GameOver;*/
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <Sm_GameOver>:



void Sm_GameOver(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
	print_seguro(10,3,"             ");
 8004aa0:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <Sm_GameOver+0x28>)
 8004aa2:	2103      	movs	r1, #3
 8004aa4:	200a      	movs	r0, #10
 8004aa6:	f000 f915 	bl	8004cd4 <print_seguro>
	print_seguro(10,3,"gg ai man");
 8004aaa:	4a07      	ldr	r2, [pc, #28]	; (8004ac8 <Sm_GameOver+0x2c>)
 8004aac:	2103      	movs	r1, #3
 8004aae:	200a      	movs	r0, #10
 8004ab0:	f000 f910 	bl	8004cd4 <print_seguro>
	osDelay(200);
 8004ab4:	20c8      	movs	r0, #200	; 0xc8
 8004ab6:	f7fd fb10 	bl	80020da <osDelay>
	SmState_Menu = STATE_Menu;
 8004aba:	4b04      	ldr	r3, [pc, #16]	; (8004acc <Sm_GameOver+0x30>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	701a      	strb	r2, [r3, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	08005f90 	.word	0x08005f90
 8004ac8:	08005fa0 	.word	0x08005fa0
 8004acc:	20000f5c 	.word	0x20000f5c

08004ad0 <Rodar_Maquina_Menu>:

void Rodar_Maquina_Menu(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
	osDelay(10);
 8004ad4:	200a      	movs	r0, #10
 8004ad6:	f7fd fb00 	bl	80020da <osDelay>
	if(SmState_Menu < NUM_STATES_Menu)
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <Rodar_Maquina_Menu+0x28>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d807      	bhi.n	8004af2 <Rodar_Maquina_Menu+0x22>
	{
		(*StateMachine_Menu[SmState_Menu].func)();
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <Rodar_Maquina_Menu+0x28>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	4a05      	ldr	r2, [pc, #20]	; (8004afc <Rodar_Maquina_Menu+0x2c>)
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	4798      	blx	r3
 8004af0:	e000      	b.n	8004af4 <Rodar_Maquina_Menu+0x24>
	}
	else
	{
		return;
 8004af2:	bf00      	nop
	}
}
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000f5c 	.word	0x20000f5c
 8004afc:	2000008c 	.word	0x2000008c

08004b00 <cmd_LCD>:
//----------------------------------------------------------------------------------------------
/*	There are two memory banks in the LCD, data/RAM and commands. This
	function sets the DC pin high or low depending, and then sends the data byte */
//----------------------------------------------------------------------------------------------
void cmd_LCD(uint32_t data)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	uint32_t i=8;
 8004b08:	2308      	movs	r3, #8
 8004b0a:	60fb      	str	r3, [r7, #12]

	CLR_DC();					// comando para o LCD
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2120      	movs	r1, #32
 8004b10:	481d      	ldr	r0, [pc, #116]	; (8004b88 <cmd_LCD+0x88>)
 8004b12:	f7fc f9b0 	bl	8000e76 <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 8004b16:	2200      	movs	r2, #0
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	481b      	ldr	r0, [pc, #108]	; (8004b88 <cmd_LCD+0x88>)
 8004b1c:	f7fc f9ab 	bl	8000e76 <HAL_GPIO_WritePin>
	do								// MSB primeiro
	{	i--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
		if(tst_bit(data,i))
 8004b26:	2201      	movs	r2, #1
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <cmd_LCD+0x44>
			SET_DIN();
 8004b38:	2201      	movs	r2, #1
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	4812      	ldr	r0, [pc, #72]	; (8004b88 <cmd_LCD+0x88>)
 8004b3e:	f7fc f99a 	bl	8000e76 <HAL_GPIO_WritePin>
 8004b42:	e004      	b.n	8004b4e <cmd_LCD+0x4e>
		else
			CLR_DIN();
 8004b44:	2200      	movs	r2, #0
 8004b46:	2110      	movs	r1, #16
 8004b48:	480f      	ldr	r0, [pc, #60]	; (8004b88 <cmd_LCD+0x88>)
 8004b4a:	f7fc f994 	bl	8000e76 <HAL_GPIO_WritePin>
		PULSO_CLK();
 8004b4e:	2001      	movs	r0, #1
 8004b50:	f000 feda 	bl	8005908 <atraso_us>
 8004b54:	2201      	movs	r2, #1
 8004b56:	2108      	movs	r1, #8
 8004b58:	480b      	ldr	r0, [pc, #44]	; (8004b88 <cmd_LCD+0x88>)
 8004b5a:	f7fc f98c 	bl	8000e76 <HAL_GPIO_WritePin>
 8004b5e:	2001      	movs	r0, #1
 8004b60:	f000 fed2 	bl	8005908 <atraso_us>
 8004b64:	2200      	movs	r2, #0
 8004b66:	2108      	movs	r1, #8
 8004b68:	4807      	ldr	r0, [pc, #28]	; (8004b88 <cmd_LCD+0x88>)
 8004b6a:	f7fc f984 	bl	8000e76 <HAL_GPIO_WritePin>

	}while(i!=0);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1d5      	bne.n	8004b20 <cmd_LCD+0x20>

	SET_CE();
 8004b74:	2201      	movs	r2, #1
 8004b76:	2140      	movs	r1, #64	; 0x40
 8004b78:	4803      	ldr	r0, [pc, #12]	; (8004b88 <cmd_LCD+0x88>)
 8004b7a:	f7fc f97c 	bl	8000e76 <HAL_GPIO_WritePin>
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40010800 	.word	0x40010800

08004b8c <data_LCD>:
//----------------------------------------------------------------------------------------------
void data_LCD(uint32_t data)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	uint32_t i=8;
 8004b94:	2308      	movs	r3, #8
 8004b96:	60fb      	str	r3, [r7, #12]

	SET_DC();					// dado para o LCD
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2120      	movs	r1, #32
 8004b9c:	481d      	ldr	r0, [pc, #116]	; (8004c14 <data_LCD+0x88>)
 8004b9e:	f7fc f96a 	bl	8000e76 <HAL_GPIO_WritePin>

	//Send the data
	CLR_CE();
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2140      	movs	r1, #64	; 0x40
 8004ba6:	481b      	ldr	r0, [pc, #108]	; (8004c14 <data_LCD+0x88>)
 8004ba8:	f7fc f965 	bl	8000e76 <HAL_GPIO_WritePin>
	do								// MSB primeiro
	{	i--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
		if(tst_bit(data,i))
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <data_LCD+0x44>
			SET_DIN();
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	2110      	movs	r1, #16
 8004bc8:	4812      	ldr	r0, [pc, #72]	; (8004c14 <data_LCD+0x88>)
 8004bca:	f7fc f954 	bl	8000e76 <HAL_GPIO_WritePin>
 8004bce:	e004      	b.n	8004bda <data_LCD+0x4e>
		else
			CLR_DIN();
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	480f      	ldr	r0, [pc, #60]	; (8004c14 <data_LCD+0x88>)
 8004bd6:	f7fc f94e 	bl	8000e76 <HAL_GPIO_WritePin>
		PULSO_CLK();
 8004bda:	2001      	movs	r0, #1
 8004bdc:	f000 fe94 	bl	8005908 <atraso_us>
 8004be0:	2201      	movs	r2, #1
 8004be2:	2108      	movs	r1, #8
 8004be4:	480b      	ldr	r0, [pc, #44]	; (8004c14 <data_LCD+0x88>)
 8004be6:	f7fc f946 	bl	8000e76 <HAL_GPIO_WritePin>
 8004bea:	2001      	movs	r0, #1
 8004bec:	f000 fe8c 	bl	8005908 <atraso_us>
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2108      	movs	r1, #8
 8004bf4:	4807      	ldr	r0, [pc, #28]	; (8004c14 <data_LCD+0x88>)
 8004bf6:	f7fc f93e 	bl	8000e76 <HAL_GPIO_WritePin>

	}while(i!=0);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1d5      	bne.n	8004bac <data_LCD+0x20>

	SET_CE();
 8004c00:	2201      	movs	r2, #1
 8004c02:	2140      	movs	r1, #64	; 0x40
 8004c04:	4803      	ldr	r0, [pc, #12]	; (8004c14 <data_LCD+0x88>)
 8004c06:	f7fc f936 	bl	8000e76 <HAL_GPIO_WritePin>
}
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40010800 	.word	0x40010800

08004c18 <inic_LCD>:
//-----------------------------------------------------------------------------------------------
void inic_LCD()
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
	// Reset the LCD to a known state
	CLR_RST();
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2180      	movs	r1, #128	; 0x80
 8004c20:	480f      	ldr	r0, [pc, #60]	; (8004c60 <inic_LCD+0x48>)
 8004c22:	f7fc f928 	bl	8000e76 <HAL_GPIO_WritePin>
	atraso_us(10);
 8004c26:	200a      	movs	r0, #10
 8004c28:	f000 fe6e 	bl	8005908 <atraso_us>
	SET_RST();
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	2180      	movs	r1, #128	; 0x80
 8004c30:	480b      	ldr	r0, [pc, #44]	; (8004c60 <inic_LCD+0x48>)
 8004c32:	f7fc f920 	bl	8000e76 <HAL_GPIO_WritePin>

	cmd_LCD(0x21);			//Tell LCD that extended commands follow
 8004c36:	2021      	movs	r0, #33	; 0x21
 8004c38:	f7ff ff62 	bl	8004b00 <cmd_LCD>
	cmd_LCD(0xB0);			//Set LCD Vop (Contrast): Try 0xB1(good @ 3.3V) or 0xBF if your display is too dark
 8004c3c:	20b0      	movs	r0, #176	; 0xb0
 8004c3e:	f7ff ff5f 	bl	8004b00 <cmd_LCD>
	cmd_LCD(0x04);			//Set Temp coefficent
 8004c42:	2004      	movs	r0, #4
 8004c44:	f7ff ff5c 	bl	8004b00 <cmd_LCD>
	cmd_LCD(0x14);			//LCD bias mode 1:48: Try 0x13 or 0x14
 8004c48:	2014      	movs	r0, #20
 8004c4a:	f7ff ff59 	bl	8004b00 <cmd_LCD>

	cmd_LCD(0x20);			//We must send 0x20 before modifying the display control mode
 8004c4e:	2020      	movs	r0, #32
 8004c50:	f7ff ff56 	bl	8004b00 <cmd_LCD>
	cmd_LCD(0x0C);			//Set display control, normal mode. 0x0D for inverse
 8004c54:	200c      	movs	r0, #12
 8004c56:	f7ff ff53 	bl	8004b00 <cmd_LCD>
}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	40010800 	.word	0x40010800

08004c64 <goto_XY>:
//-----------------------------------------------------------------------------------------------
void goto_XY(uint32_t x, uint32_t y)  // 0<=x<=83  0<=y<=5
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	if(y>5)	y=5;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d901      	bls.n	8004c78 <goto_XY+0x14>
 8004c74:	2305      	movs	r3, #5
 8004c76:	603b      	str	r3, [r7, #0]
	if(x>84)	x=83;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b54      	cmp	r3, #84	; 0x54
 8004c7c:	d901      	bls.n	8004c82 <goto_XY+0x1e>
 8004c7e:	2353      	movs	r3, #83	; 0x53
 8004c80:	607b      	str	r3, [r7, #4]

	indice_fb =  x + (84*y);		// indice para ser empregado no fb
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2254      	movs	r2, #84	; 0x54
 8004c86:	fb02 f203 	mul.w	r2, r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	4a03      	ldr	r2, [pc, #12]	; (8004c9c <goto_XY+0x38>)
 8004c90:	6013      	str	r3, [r2, #0]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	20001158 	.word	0x20001158

08004ca0 <imprime_LCD>:
	for(i=0; i<504; i++)
		fb[i]= imagem[i];
}
//-----------------------------------------------------------------------------------------------
void imprime_LCD()		// desenha em todo o LCD
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
	uint32_t i;

	for (i=0 ; i < 504 ; i++)
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	e009      	b.n	8004cc0 <imprime_LCD+0x20>
		data_LCD(fb[i]);
 8004cac:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <imprime_LCD+0x30>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff69 	bl	8004b8c <data_LCD>
	for (i=0 ; i < 504 ; i++)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8004cc6:	d3f1      	bcc.n	8004cac <imprime_LCD+0xc>
}
 8004cc8:	bf00      	nop
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000f60 	.word	0x20000f60

08004cd4 <print_seguro>:

void print_seguro(uint32_t x,uint32_t y, char *buff)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
    if( xSemaphoreTake( tela, 1000 ) == pdTRUE )
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <print_seguro+0x44>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fd fc73 	bl	80025d4 <xQueueSemaphoreTake>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10d      	bne.n	8004d10 <print_seguro+0x3c>
 	{
		goto_XY(x, y);
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f7ff ffb4 	bl	8004c64 <goto_XY>
		string_LCD(buff);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f889 	bl	8004e14 <string_LCD>
		xSemaphoreGive( tela);
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <print_seguro+0x44>)
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	2300      	movs	r3, #0
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f7fd fb68 	bl	80023e0 <xQueueGenericSend>
	 }
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20001164 	.word	0x20001164

08004d1c <deleta_figura_seguro>:

void deleta_figura_seguro(pontos_t *p, const figura_t *figura)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
	if( xSemaphoreTake( tela, 3000 ) == pdTRUE )
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <deleta_figura_seguro+0x3c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd fc50 	bl	80025d4 <xQueueSemaphoreTake>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d10a      	bne.n	8004d50 <deleta_figura_seguro+0x34>
		{
			deleta_fig(p, figura);
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8eb 	bl	8004f18 <deleta_fig>
			xSemaphoreGive( tela);
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <deleta_figura_seguro+0x3c>)
 8004d44:	6818      	ldr	r0, [r3, #0]
 8004d46:	2300      	movs	r3, #0
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	f7fd fb48 	bl	80023e0 <xQueueGenericSend>
		 }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20001164 	.word	0x20001164

08004d5c <print_figura_seguro>:

void print_figura_seguro( pontos_t *p, const figura_t *figura)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
   if( xSemaphoreTake( tela, 3000 ) == pdTRUE )
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <print_figura_seguro+0x3c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fd fc30 	bl	80025d4 <xQueueSemaphoreTake>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d10a      	bne.n	8004d90 <print_figura_seguro+0x34>
	{
		desenha_fig(p, figura);
 8004d7a:	6839      	ldr	r1, [r7, #0]
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f970 	bl	8005062 <desenha_fig>
		xSemaphoreGive( tela);
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <print_figura_seguro+0x3c>)
 8004d84:	6818      	ldr	r0, [r3, #0]
 8004d86:	2300      	movs	r3, #0
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f7fd fb28 	bl	80023e0 <xQueueGenericSend>
	 }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20001164 	.word	0x20001164

08004d9c <caractere_LCD>:
/* This function takes in a character, looks it up in the font table/array and writes it to the screen
 * each character is 8 bits tall and 5 bits wide. We pad one blank column of pixels on each side of
 * the character for readability.
 * Os caracteres só podem ser escritos na linha correspondente ao banco	(0-5)							*/
void caractere_LCD(char character)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
	uint32_t i;

	fb[indice_fb] = 0x00;		//Blank vertical line padding
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <caractere_LCD+0x6c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <caractere_LCD+0x70>)
 8004dac:	2100      	movs	r1, #0
 8004dae:	54d1      	strb	r1, [r2, r3]
	indice_fb++;
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <caractere_LCD+0x6c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	4a14      	ldr	r2, [pc, #80]	; (8004e08 <caractere_LCD+0x6c>)
 8004db8:	6013      	str	r3, [r2, #0]

	for( i= 0 ; i < 5 ; i++)
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	e016      	b.n	8004dee <caractere_LCD+0x52>
	{
		fb[indice_fb] = ASCII[character - 0x20][i];//0x20 is the ASCII character for Space (' '). The font table starts with this character
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	f1a3 0220 	sub.w	r2, r3, #32
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <caractere_LCD+0x6c>)
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	4811      	ldr	r0, [pc, #68]	; (8004e10 <caractere_LCD+0x74>)
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	18c2      	adds	r2, r0, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	781a      	ldrb	r2, [r3, #0]
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <caractere_LCD+0x70>)
 8004ddc:	545a      	strb	r2, [r3, r1]
		indice_fb++;
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <caractere_LCD+0x6c>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3301      	adds	r3, #1
 8004de4:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <caractere_LCD+0x6c>)
 8004de6:	6013      	str	r3, [r2, #0]
	for( i= 0 ; i < 5 ; i++)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d9e5      	bls.n	8004dc0 <caractere_LCD+0x24>
	}

	fb[indice_fb] = 0x00; //Blank vertical line padding
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <caractere_LCD+0x6c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a04      	ldr	r2, [pc, #16]	; (8004e0c <caractere_LCD+0x70>)
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	54d1      	strb	r1, [r2, r3]
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	20001158 	.word	0x20001158
 8004e0c:	20000f60 	.word	0x20000f60
 8004e10:	0800657c 	.word	0x0800657c

08004e14 <string_LCD>:
//-----------------------------------------------------------------------------------------------
void string_LCD(char *msg)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	while(*msg)
 8004e1c:	e006      	b.n	8004e2c <string_LCD+0x18>
		caractere_LCD(*msg++);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff ffb8 	bl	8004d9c <caractere_LCD>
	while(*msg)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f4      	bne.n	8004e1e <string_LCD+0xa>
}
 8004e34:	bf00      	nop
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <limpa_LCD>:

}
//-----------------------------------------------------------------------------------------------
//Clears the LCD by writing zeros to the entire screen
void limpa_LCD()
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
	uint32_t i;

	for ( i= 0 ; i < 504 ; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
 8004e46:	e007      	b.n	8004e58 <limpa_LCD+0x1c>
		fb[i] = 0x00;
 8004e48:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <limpa_LCD+0x38>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	2200      	movs	r2, #0
 8004e50:	701a      	strb	r2, [r3, #0]
	for ( i= 0 ; i < 504 ; i++)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3301      	adds	r3, #1
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8004e5e:	d3f3      	bcc.n	8004e48 <limpa_LCD+0xc>
	imprime_LCD();
 8004e60:	f7ff ff1e 	bl	8004ca0 <imprime_LCD>
	indice_fb = 0;
 8004e64:	4b04      	ldr	r3, [pc, #16]	; (8004e78 <limpa_LCD+0x3c>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000f60 	.word	0x20000f60
 8004e78:	20001158 	.word	0x20001158

08004e7c <desenha_pixel>:
// Desenha pixel
//-----------------------------------------------------------------------------------------------
void desenha_pixel(uint32_t x,				/* ponto horizontal para o pixel: 0 -> 83 (esq -> dir)	*/
				   uint32_t y,				/* ponto vertical para o pixel: 0 -> 47 (cima -> baixo)	*/
				   uint32_t propr)			/* 0 =  apaga pixel, 1 = liga pixel				*/
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
	uint32_t i;

	if(x>83)	x=83;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b53      	cmp	r3, #83	; 0x53
 8004e8c:	d901      	bls.n	8004e92 <desenha_pixel+0x16>
 8004e8e:	2353      	movs	r3, #83	; 0x53
 8004e90:	60fb      	str	r3, [r7, #12]
	if(y>47)	y=47;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b2f      	cmp	r3, #47	; 0x2f
 8004e96:	d901      	bls.n	8004e9c <desenha_pixel+0x20>
 8004e98:	232f      	movs	r3, #47	; 0x2f
 8004e9a:	60bb      	str	r3, [r7, #8]

	i = x + (84*(y/8));		/* determinação do indice do byte a ser alterado [0 - 503]	*/
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	08db      	lsrs	r3, r3, #3
 8004ea0:	2254      	movs	r2, #84	; 0x54
 8004ea2:	fb02 f303 	mul.w	r3, r2, r3
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

	if(propr==0)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d116      	bne.n	8004ee0 <desenha_pixel+0x64>
		clr_bit(fb[i],y%8);
 8004eb2:	4a18      	ldr	r2, [pc, #96]	; (8004f14 <desenha_pixel+0x98>)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	b25a      	sxtb	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	4013      	ands	r3, r2
 8004ed0:	b25b      	sxtb	r3, r3
 8004ed2:	b2d9      	uxtb	r1, r3
 8004ed4:	4a0f      	ldr	r2, [pc, #60]	; (8004f14 <desenha_pixel+0x98>)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	460a      	mov	r2, r1
 8004edc:	701a      	strb	r2, [r3, #0]
	else
		set_bit(fb[i],y%8);

}
 8004ede:	e013      	b.n	8004f08 <desenha_pixel+0x8c>
		set_bit(fb[i],y%8);
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <desenha_pixel+0x98>)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	b25a      	sxtb	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef6:	b25b      	sxtb	r3, r3
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	b25b      	sxtb	r3, r3
 8004efc:	b2d9      	uxtb	r1, r3
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <desenha_pixel+0x98>)
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	460a      	mov	r2, r1
 8004f06:	701a      	strb	r2, [r3, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	20000f60 	.word	0x20000f60

08004f18 <deleta_fig>:
											// Caso se deseje alterar a largura e altura da figura
											//    p.x2  e  p.y2 devem ser diferentes de zero, determinando as novas medidas
											// Caso se deseje imprimir a partir de um ponto no meio da figura (se não empregados devem ser zero)
											//    p.x3 e p.y3 determinam esse ponto
				const figura_t *f)	// ponteiro para a figura definido pelo tipo figura_t
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
	uint32_t x, y, larg, alt, i, j;

	x = p->x1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	61fb      	str	r3, [r7, #28]
	y = p->y1;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	61bb      	str	r3, [r7, #24]

	// corrige limites para P1
	if(x > 83)  x = 83;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	2b53      	cmp	r3, #83	; 0x53
 8004f32:	d901      	bls.n	8004f38 <deleta_fig+0x20>
 8004f34:	2353      	movs	r3, #83	; 0x53
 8004f36:	61fb      	str	r3, [r7, #28]
	if(y > 47)  y = 47;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	2b2f      	cmp	r3, #47	; 0x2f
 8004f3c:	d901      	bls.n	8004f42 <deleta_fig+0x2a>
 8004f3e:	232f      	movs	r3, #47	; 0x2f
 8004f40:	61bb      	str	r3, [r7, #24]

	larg = f->largura;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	617b      	str	r3, [r7, #20]
	alt = f->altura;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785b      	ldrb	r3, [r3, #1]
 8004f4c:	613b      	str	r3, [r7, #16]

	// caso se deseje outra dimensao de impressao da figura que não a definida por padrao
	if((p->x2!=0) && (p->y2!=0))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <deleta_fig+0x54>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <deleta_fig+0x54>
	{
		larg = p->x2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	617b      	str	r3, [r7, #20]
		alt = p->y2;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	613b      	str	r3, [r7, #16]
 8004f6a:	e00d      	b.n	8004f88 <deleta_fig+0x70>
	}
	else if((p->x3!=0) && (p->y3!=0)) // correcao se valor maior que o permitido
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d009      	beq.n	8004f88 <deleta_fig+0x70>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <deleta_fig+0x70>
	{
		larg = p->x3;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	617b      	str	r3, [r7, #20]
		alt = p->y3;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	613b      	str	r3, [r7, #16]
	}
	// eventual correcao para a altura e largura
	if(larg > f->largura)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d902      	bls.n	8004f9a <deleta_fig+0x82>
		larg = f->largura;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	617b      	str	r3, [r7, #20]
	if(alt > f->altura)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d902      	bls.n	8004fac <deleta_fig+0x94>
		alt = f->altura;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	613b      	str	r3, [r7, #16]

	//corrigir dimensoes da figura para dentro da área de impressao
	if((x+larg)>84)
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	2b54      	cmp	r3, #84	; 0x54
 8004fb4:	d903      	bls.n	8004fbe <deleta_fig+0xa6>
		larg = 84 - x;
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	f1c3 0354 	rsb	r3, r3, #84	; 0x54
 8004fbc:	617b      	str	r3, [r7, #20]
	if((y+alt)>48)
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	2b30      	cmp	r3, #48	; 0x30
 8004fc6:	d903      	bls.n	8004fd0 <deleta_fig+0xb8>
		alt = 48 - y;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8004fce:	613b      	str	r3, [r7, #16]

	//------------------------------------------------------------------------------------------
	if((p->x3!=0) && (p->y3!=0))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d022      	beq.n	800501e <deleta_fig+0x106>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01e      	beq.n	800501e <deleta_fig+0x106>
	{

		for(j=0; j<alt; j++)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60bb      	str	r3, [r7, #8]
 8004fe4:	e016      	b.n	8005014 <deleta_fig+0xfc>
		{
			for(i=0; i<larg; i++) // canto inferior direito
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e00c      	b.n	8005006 <deleta_fig+0xee>
			{
				desenha_pixel(x+i, y+j,0);
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	18d0      	adds	r0, r2, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f7ff ff3e 	bl	8004e7c <desenha_pixel>
			for(i=0; i<larg; i++) // canto inferior direito
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3301      	adds	r3, #1
 8005004:	60fb      	str	r3, [r7, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	429a      	cmp	r2, r3
 800500c:	d3ee      	bcc.n	8004fec <deleta_fig+0xd4>
		for(j=0; j<alt; j++)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	3301      	adds	r3, #1
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	429a      	cmp	r2, r3
 800501a:	d3e4      	bcc.n	8004fe6 <deleta_fig+0xce>
	if((p->x3!=0) && (p->y3!=0))
 800501c:	e01d      	b.n	800505a <deleta_fig+0x142>
			}
		}
	}
	else// impressao de figura normal ou menor (com p.x2!=0 e p.y2!=0)
	{
		for(j=0; j<alt; j++)
 800501e:	2300      	movs	r3, #0
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	e016      	b.n	8005052 <deleta_fig+0x13a>
		{
			for(i=0; i<larg; i++)
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e00c      	b.n	8005044 <deleta_fig+0x12c>
			{
				desenha_pixel(x+i, y+j,0);
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	18d0      	adds	r0, r2, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	4413      	add	r3, r2
 8005036:	2200      	movs	r2, #0
 8005038:	4619      	mov	r1, r3
 800503a:	f7ff ff1f 	bl	8004e7c <desenha_pixel>
			for(i=0; i<larg; i++)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	429a      	cmp	r2, r3
 800504a:	d3ee      	bcc.n	800502a <deleta_fig+0x112>
		for(j=0; j<alt; j++)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	3301      	adds	r3, #1
 8005050:	60bb      	str	r3, [r7, #8]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	429a      	cmp	r2, r3
 8005058:	d3e4      	bcc.n	8005024 <deleta_fig+0x10c>
			}
		}
	}
	//------------------------------------------------------------------------------------------
}
 800505a:	bf00      	nop
 800505c:	3720      	adds	r7, #32
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <desenha_fig>:
											// Caso se deseje alterar a largura e altura da figura
											//    p.x2  e  p.y2 devem ser diferentes de zero, determinando as novas medidas
											// Caso se deseje imprimir a partir de um ponto no meio da figura (se não empregados devem ser zero)
											//    p.x3 e p.y3 determinam esse ponto
				const figura_t *f)	// ponteiro para a figura definido pelo tipo figura_t
{
 8005062:	b590      	push	{r4, r7, lr}
 8005064:	b08b      	sub	sp, #44	; 0x2c
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
	uint32_t x, y, larg, alt, i, j, ajx, ajy;

	x = p->x1;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
	y = p->y1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	623b      	str	r3, [r7, #32]

	// corrige limites para P1
	if(x > 83)  x = 83;
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	2b53      	cmp	r3, #83	; 0x53
 800507c:	d901      	bls.n	8005082 <desenha_fig+0x20>
 800507e:	2353      	movs	r3, #83	; 0x53
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
	if(y > 47)  y = 47;
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	2b2f      	cmp	r3, #47	; 0x2f
 8005086:	d901      	bls.n	800508c <desenha_fig+0x2a>
 8005088:	232f      	movs	r3, #47	; 0x2f
 800508a:	623b      	str	r3, [r7, #32]

	larg = f->largura;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	61fb      	str	r3, [r7, #28]
	alt = f->altura;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	785b      	ldrb	r3, [r3, #1]
 8005096:	61bb      	str	r3, [r7, #24]

	// caso se deseje outra dimensao de impressao da figura que não a definida por padrao
	if((p->x2!=0) && (p->y2!=0))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00a      	beq.n	80050b6 <desenha_fig+0x54>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <desenha_fig+0x54>
	{
		larg = p->x2;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	61fb      	str	r3, [r7, #28]
		alt = p->y2;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e00d      	b.n	80050d2 <desenha_fig+0x70>
	}
	else if((p->x3!=0) && (p->y3!=0)) // correcao se valor maior que o permitido
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <desenha_fig+0x70>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <desenha_fig+0x70>
	{
		larg = p->x3;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	61fb      	str	r3, [r7, #28]
		alt = p->y3;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	61bb      	str	r3, [r7, #24]
	}
	// eventual correcao para a altura e largura
	if(larg > f->largura)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4293      	cmp	r3, r2
 80050dc:	d902      	bls.n	80050e4 <desenha_fig+0x82>
		larg = f->largura;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	61fb      	str	r3, [r7, #28]
	if(alt > f->altura)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	785b      	ldrb	r3, [r3, #1]
 80050e8:	461a      	mov	r2, r3
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d902      	bls.n	80050f6 <desenha_fig+0x94>
		alt = f->altura;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	61bb      	str	r3, [r7, #24]

	//corrigir dimensoes da figura para dentro da área de impressao
	if((x+larg)>84)
 80050f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	2b54      	cmp	r3, #84	; 0x54
 80050fe:	d903      	bls.n	8005108 <desenha_fig+0xa6>
		larg = 84 - x;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	f1c3 0354 	rsb	r3, r3, #84	; 0x54
 8005106:	61fb      	str	r3, [r7, #28]
	if((y+alt)>48)
 8005108:	6a3a      	ldr	r2, [r7, #32]
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	4413      	add	r3, r2
 800510e:	2b30      	cmp	r3, #48	; 0x30
 8005110:	d903      	bls.n	800511a <desenha_fig+0xb8>
		alt = 48 - y;
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8005118:	61bb      	str	r3, [r7, #24]

	//------------------------------------------------------------------------------------------
	if((p->x3!=0) && (p->y3!=0))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d047      	beq.n	80051b2 <desenha_fig+0x150>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d043      	beq.n	80051b2 <desenha_fig+0x150>
	{
		ajx = f->largura - larg;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	60fb      	str	r3, [r7, #12]
		ajy = f->altura - alt;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	785b      	ldrb	r3, [r3, #1]
 800513a:	461a      	mov	r2, r3
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	60bb      	str	r3, [r7, #8]

		for(j=0; j<alt; j++)
 8005142:	2300      	movs	r3, #0
 8005144:	613b      	str	r3, [r7, #16]
 8005146:	e02f      	b.n	80051a8 <desenha_fig+0x146>
		{
			for(i=0; i<larg; i++) // canto inferior direito
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e025      	b.n	800519a <desenha_fig+0x138>
			{
				desenha_pixel(x+i, y+j, tst_bit(f->pixels[i + ajx + (((j+ajy)/8)*f->largura)], (j+ajy)%8));
 800514e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	18d0      	adds	r0, r2, r3
 8005154:	6a3a      	ldr	r2, [r7, #32]
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	18d4      	adds	r4, r2, r3
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	441a      	add	r2, r3
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	440b      	add	r3, r1
 8005166:	08db      	lsrs	r3, r3, #3
 8005168:	6839      	ldr	r1, [r7, #0]
 800516a:	7809      	ldrb	r1, [r1, #0]
 800516c:	fb01 f303 	mul.w	r3, r1, r3
 8005170:	4413      	add	r3, r2
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	4413      	add	r3, r2
 8005176:	789b      	ldrb	r3, [r3, #2]
 8005178:	4619      	mov	r1, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4413      	add	r3, r2
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	2201      	movs	r2, #1
 8005186:	fa02 f303 	lsl.w	r3, r2, r3
 800518a:	400b      	ands	r3, r1
 800518c:	461a      	mov	r2, r3
 800518e:	4621      	mov	r1, r4
 8005190:	f7ff fe74 	bl	8004e7c <desenha_pixel>
			for(i=0; i<larg; i++) // canto inferior direito
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3301      	adds	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697a      	ldr	r2, [r7, #20]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d3d5      	bcc.n	800514e <desenha_fig+0xec>
		for(j=0; j<alt; j++)
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3301      	adds	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d3cb      	bcc.n	8005148 <desenha_fig+0xe6>
	if((p->x3!=0) && (p->y3!=0))
 80051b0:	e02f      	b.n	8005212 <desenha_fig+0x1b0>
			}
		}
	}
	else// impressao de figura normal ou menor (com p.x2!=0 e p.y2!=0)
	{
		for(j=0; j<alt; j++)
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e028      	b.n	800520a <desenha_fig+0x1a8>
		{
			for(i=0; i<larg; i++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e01e      	b.n	80051fc <desenha_fig+0x19a>
			{
				desenha_pixel(x+i, y+j, tst_bit(f->pixels[i + ((j/8)*f->largura)], j%8));
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	18d0      	adds	r0, r2, r3
 80051c4:	6a3a      	ldr	r2, [r7, #32]
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	18d1      	adds	r1, r2, r3
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	08db      	lsrs	r3, r3, #3
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	fb02 f203 	mul.w	r2, r2, r3
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	4413      	add	r3, r2
 80051de:	789b      	ldrb	r3, [r3, #2]
 80051e0:	461c      	mov	r4, r3
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	2201      	movs	r2, #1
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	4023      	ands	r3, r4
 80051f0:	461a      	mov	r2, r3
 80051f2:	f7ff fe43 	bl	8004e7c <desenha_pixel>
			for(i=0; i<larg; i++)
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3301      	adds	r3, #1
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	d3dc      	bcc.n	80051be <desenha_fig+0x15c>
		for(j=0; j<alt; j++)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	3301      	adds	r3, #1
 8005208:	613b      	str	r3, [r7, #16]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3d2      	bcc.n	80051b8 <desenha_fig+0x156>
			}
		}
	}
	//------------------------------------------------------------------------------------------
}
 8005212:	bf00      	nop
 8005214:	372c      	adds	r7, #44	; 0x2c
 8005216:	46bd      	mov	sp, r7
 8005218:	bd90      	pop	{r4, r7, pc}
	...

0800521c <Sm_P1_MENU>:
		{STATE_PLAYER_Dying,Sm_P1_Dying},
		{STATE_PLAYER_Dead,Sm_P1_Dead},
};

void Sm_P1_MENU(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_men");
 8005220:	4a0a      	ldr	r2, [pc, #40]	; (800524c <Sm_P1_MENU+0x30>)
 8005222:	2100      	movs	r1, #0
 8005224:	2000      	movs	r0, #0
 8005226:	f7ff fd55 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_MENU;
 800522a:	4b09      	ldr	r3, [pc, #36]	; (8005250 <Sm_P1_MENU+0x34>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
	if(SmState_Menu==STATE_Arena1P_RoundStart || SmState_Menu==STATE_Arena2P_RoundStart )
 8005230:	4b08      	ldr	r3, [pc, #32]	; (8005254 <Sm_P1_MENU+0x38>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b04      	cmp	r3, #4
 8005236:	d003      	beq.n	8005240 <Sm_P1_MENU+0x24>
 8005238:	4b06      	ldr	r3, [pc, #24]	; (8005254 <Sm_P1_MENU+0x38>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b06      	cmp	r3, #6
 800523e:	d102      	bne.n	8005246 <Sm_P1_MENU+0x2a>
		SmState_P1 = STATE_PLAYER_RoundStart;
 8005240:	4b03      	ldr	r3, [pc, #12]	; (8005250 <Sm_P1_MENU+0x34>)
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]

}
 8005246:	bf00      	nop
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	08005fac 	.word	0x08005fac
 8005250:	2000115c 	.word	0x2000115c
 8005254:	20000f5c 	.word	0x20000f5c

08005258 <Sm_P1_RoundStart>:
void Sm_P1_RoundStart(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_rst");
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <Sm_P1_RoundStart+0x30>)
 800525e:	2100      	movs	r1, #0
 8005260:	2000      	movs	r0, #0
 8005262:	f7ff fd37 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_RoundStart;
 8005266:	4b09      	ldr	r3, [pc, #36]	; (800528c <Sm_P1_RoundStart+0x34>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
	if(SmState_Menu==STATE_Arena1P_ONGOING || SmState_Menu==STATE_Arena2P_ONGOING)
 800526c:	4b08      	ldr	r3, [pc, #32]	; (8005290 <Sm_P1_RoundStart+0x38>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b05      	cmp	r3, #5
 8005272:	d003      	beq.n	800527c <Sm_P1_RoundStart+0x24>
 8005274:	4b06      	ldr	r3, [pc, #24]	; (8005290 <Sm_P1_RoundStart+0x38>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2b07      	cmp	r3, #7
 800527a:	d102      	bne.n	8005282 <Sm_P1_RoundStart+0x2a>
			SmState_P1 = STATE_PLAYER_Idle;
 800527c:	4b03      	ldr	r3, [pc, #12]	; (800528c <Sm_P1_RoundStart+0x34>)
 800527e:	2202      	movs	r2, #2
 8005280:	701a      	strb	r2, [r3, #0]

}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	08005fbc 	.word	0x08005fbc
 800528c:	2000115c 	.word	0x2000115c
 8005290:	20000f5c 	.word	0x20000f5c

08005294 <Sm_P1_Idle>:
void Sm_P1_Idle(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_idl");
 8005298:	4a15      	ldr	r2, [pc, #84]	; (80052f0 <Sm_P1_Idle+0x5c>)
 800529a:	2100      	movs	r1, #0
 800529c:	2000      	movs	r0, #0
 800529e:	f7ff fd19 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Idle;
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <Sm_P1_Idle+0x60>)
 80052a4:	2202      	movs	r2, #2
 80052a6:	701a      	strb	r2, [r3, #0]
	if(SmState_Menu==STATE_Menu1P || SmState_Menu==STATE_Menu2P)
 80052a8:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <Sm_P1_Idle+0x64>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d003      	beq.n	80052b8 <Sm_P1_Idle+0x24>
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <Sm_P1_Idle+0x64>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d103      	bne.n	80052c0 <Sm_P1_Idle+0x2c>
	{
		SmState_P1 = STATE_PLAYER_MENU;
 80052b8:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <Sm_P1_Idle+0x60>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
		return;
 80052be:	e016      	b.n	80052ee <Sm_P1_Idle+0x5a>
	}

	if(SmState_Int1==STATE_LeftPressed_Int1)
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <Sm_P1_Idle+0x68>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d103      	bne.n	80052d0 <Sm_P1_Idle+0x3c>
					SmState_P1 = STATE_PLAYER_Back;
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <Sm_P1_Idle+0x60>)
 80052ca:	2206      	movs	r2, #6
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e00e      	b.n	80052ee <Sm_P1_Idle+0x5a>
			else
				if(SmState_Int1==STATE_RightPressed_Int1)
 80052d0:	4b0a      	ldr	r3, [pc, #40]	; (80052fc <Sm_P1_Idle+0x68>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d103      	bne.n	80052e0 <Sm_P1_Idle+0x4c>
					SmState_P1 = STATE_PLAYER_Forward;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <Sm_P1_Idle+0x60>)
 80052da:	2204      	movs	r2, #4
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e006      	b.n	80052ee <Sm_P1_Idle+0x5a>
				else
					if(SmState_Int1==STATE_ATKPressed_Int1)
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <Sm_P1_Idle+0x68>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d102      	bne.n	80052ee <Sm_P1_Idle+0x5a>
							SmState_P1 = STATE_PLAYER_ATK1;
 80052e8:	4b02      	ldr	r3, [pc, #8]	; (80052f4 <Sm_P1_Idle+0x60>)
 80052ea:	2208      	movs	r2, #8
 80052ec:	701a      	strb	r2, [r3, #0]


}
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	08005fcc 	.word	0x08005fcc
 80052f4:	2000115c 	.word	0x2000115c
 80052f8:	20000f5c 	.word	0x20000f5c
 80052fc:	20000088 	.word	0x20000088

08005300 <Sm_P1_Idle_Recover>:
void Sm_P1_Idle_Recover(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_idr");
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <Sm_P1_Idle_Recover+0x5c>)
 8005306:	2100      	movs	r1, #0
 8005308:	2000      	movs	r0, #0
 800530a:	f7ff fce3 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Idle_Recover;
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <Sm_P1_Idle_Recover+0x60>)
 8005310:	2203      	movs	r2, #3
 8005312:	701a      	strb	r2, [r3, #0]
	if(SmState_Menu==STATE_Menu1P || SmState_Menu==STATE_Menu2P)
 8005314:	4b13      	ldr	r3, [pc, #76]	; (8005364 <Sm_P1_Idle_Recover+0x64>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	2b02      	cmp	r3, #2
 800531a:	d003      	beq.n	8005324 <Sm_P1_Idle_Recover+0x24>
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <Sm_P1_Idle_Recover+0x64>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d103      	bne.n	800532c <Sm_P1_Idle_Recover+0x2c>
	{
		SmState_P1 = STATE_PLAYER_MENU;
 8005324:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <Sm_P1_Idle_Recover+0x60>)
 8005326:	2200      	movs	r2, #0
 8005328:	701a      	strb	r2, [r3, #0]
		return;
 800532a:	e016      	b.n	800535a <Sm_P1_Idle_Recover+0x5a>
	}

	if(SmState_Int1==STATE_LeftPressed_Int1)
 800532c:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <Sm_P1_Idle_Recover+0x68>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d103      	bne.n	800533c <Sm_P1_Idle_Recover+0x3c>
	{
					SmState_P1 = STATE_PLAYER_Back;
 8005334:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <Sm_P1_Idle_Recover+0x60>)
 8005336:	2206      	movs	r2, #6
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	e00e      	b.n	800535a <Sm_P1_Idle_Recover+0x5a>
	}
	else
	{
		if(SmState_Int1==STATE_RightPressed_Int1)
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <Sm_P1_Idle_Recover+0x68>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d103      	bne.n	800534c <Sm_P1_Idle_Recover+0x4c>
			SmState_P1 = STATE_PLAYER_Forward;
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <Sm_P1_Idle_Recover+0x60>)
 8005346:	2204      	movs	r2, #4
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	e006      	b.n	800535a <Sm_P1_Idle_Recover+0x5a>
		else
		{
			if(SmState_Int1==STATE_NeutralPressed_Int1)
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <Sm_P1_Idle_Recover+0x68>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d102      	bne.n	800535a <Sm_P1_Idle_Recover+0x5a>
			{
					SmState_P1 = STATE_PLAYER_Idle;
 8005354:	4b02      	ldr	r3, [pc, #8]	; (8005360 <Sm_P1_Idle_Recover+0x60>)
 8005356:	2202      	movs	r2, #2
 8005358:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800535a:	bd80      	pop	{r7, pc}
 800535c:	08005fdc 	.word	0x08005fdc
 8005360:	2000115c 	.word	0x2000115c
 8005364:	20000f5c 	.word	0x20000f5c
 8005368:	20000088 	.word	0x20000088

0800536c <Sm_P1_Forward>:
void Sm_P1_Forward(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_fwd");
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <Sm_P1_Forward+0x60>)
 8005372:	2100      	movs	r1, #0
 8005374:	2000      	movs	r0, #0
 8005376:	f7ff fcad 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Forward;
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <Sm_P1_Forward+0x64>)
 800537c:	2204      	movs	r2, #4
 800537e:	701a      	strb	r2, [r3, #0]
	if(lerDoInput1(1) == 'R' && lerDoInput1(3)== 'R')
 8005380:	2001      	movs	r0, #1
 8005382:	f7fe fff7 	bl	8004374 <lerDoInput1>
 8005386:	4603      	mov	r3, r0
 8005388:	2b52      	cmp	r3, #82	; 0x52
 800538a:	d109      	bne.n	80053a0 <Sm_P1_Forward+0x34>
 800538c:	2003      	movs	r0, #3
 800538e:	f7fe fff1 	bl	8004374 <lerDoInput1>
 8005392:	4603      	mov	r3, r0
 8005394:	2b52      	cmp	r3, #82	; 0x52
 8005396:	d103      	bne.n	80053a0 <Sm_P1_Forward+0x34>
	{
		SmState_P1 = STATE_PLAYER_DashForward;
 8005398:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <Sm_P1_Forward+0x64>)
 800539a:	2205      	movs	r2, #5
 800539c:	701a      	strb	r2, [r3, #0]
		return;
 800539e:	e014      	b.n	80053ca <Sm_P1_Forward+0x5e>
	}
	if(SmState_Int1==STATE_LeftPressed_Int1)
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <Sm_P1_Forward+0x68>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d102      	bne.n	80053ae <Sm_P1_Forward+0x42>
			SmState_P1 = STATE_PLAYER_Back;
 80053a8:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <Sm_P1_Forward+0x64>)
 80053aa:	2206      	movs	r2, #6
 80053ac:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_NeutralPressed_Int1)
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <Sm_P1_Forward+0x68>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d102      	bne.n	80053bc <Sm_P1_Forward+0x50>
			SmState_P1 = STATE_PLAYER_Idle;
 80053b6:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <Sm_P1_Forward+0x64>)
 80053b8:	2202      	movs	r2, #2
 80053ba:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_ATKPressed_Int1)
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <Sm_P1_Forward+0x68>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d102      	bne.n	80053ca <Sm_P1_Forward+0x5e>
			SmState_P1 = STATE_PLAYER_ATK1;
 80053c4:	4b02      	ldr	r3, [pc, #8]	; (80053d0 <Sm_P1_Forward+0x64>)
 80053c6:	2208      	movs	r2, #8
 80053c8:	701a      	strb	r2, [r3, #0]

}
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	08005fec 	.word	0x08005fec
 80053d0:	2000115c 	.word	0x2000115c
 80053d4:	20000088 	.word	0x20000088

080053d8 <Sm_P1_DashForward>:

void Sm_P1_DashForward(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_dfw");
 80053dc:	4a0f      	ldr	r2, [pc, #60]	; (800541c <Sm_P1_DashForward+0x44>)
 80053de:	2100      	movs	r1, #0
 80053e0:	2000      	movs	r0, #0
 80053e2:	f7ff fc77 	bl	8004cd4 <print_seguro>
	#endif
	osDelay(40);
 80053e6:	2028      	movs	r0, #40	; 0x28
 80053e8:	f7fc fe77 	bl	80020da <osDelay>
	if(SmState_Int1==STATE_LeftPressed_Int1)
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <Sm_P1_DashForward+0x48>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d102      	bne.n	80053fa <Sm_P1_DashForward+0x22>
			SmState_P1 = STATE_PLAYER_Back;
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <Sm_P1_DashForward+0x4c>)
 80053f6:	2206      	movs	r2, #6
 80053f8:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_NeutralPressed_Int1)
 80053fa:	4b09      	ldr	r3, [pc, #36]	; (8005420 <Sm_P1_DashForward+0x48>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d102      	bne.n	8005408 <Sm_P1_DashForward+0x30>
			SmState_P1 = STATE_PLAYER_Idle;
 8005402:	4b08      	ldr	r3, [pc, #32]	; (8005424 <Sm_P1_DashForward+0x4c>)
 8005404:	2202      	movs	r2, #2
 8005406:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_ATKPressed_Int1)
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <Sm_P1_DashForward+0x48>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d102      	bne.n	8005416 <Sm_P1_DashForward+0x3e>
			SmState_P1 = STATE_PLAYER_ATK1;
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <Sm_P1_DashForward+0x4c>)
 8005412:	2208      	movs	r2, #8
 8005414:	701a      	strb	r2, [r3, #0]

}
 8005416:	bf00      	nop
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	08005ffc 	.word	0x08005ffc
 8005420:	20000088 	.word	0x20000088
 8005424:	2000115c 	.word	0x2000115c

08005428 <Sm_P1_DashBack>:

void Sm_P1_DashBack(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_dba");
 800542c:	4a12      	ldr	r2, [pc, #72]	; (8005478 <Sm_P1_DashBack+0x50>)
 800542e:	2100      	movs	r1, #0
 8005430:	2000      	movs	r0, #0
 8005432:	f7ff fc4f 	bl	8004cd4 <print_seguro>
	#endif
	osDelay(40);
 8005436:	2028      	movs	r0, #40	; 0x28
 8005438:	f7fc fe4f 	bl	80020da <osDelay>
	if(SmState_Int1==STATE_RightPressed_Int1)
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <Sm_P1_DashBack+0x54>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d102      	bne.n	800544a <Sm_P1_DashBack+0x22>
				SmState_P1 = STATE_PLAYER_Forward;
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <Sm_P1_DashBack+0x58>)
 8005446:	2204      	movs	r2, #4
 8005448:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_LeftPressed_Int1)
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <Sm_P1_DashBack+0x54>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b03      	cmp	r3, #3
 8005450:	d102      	bne.n	8005458 <Sm_P1_DashBack+0x30>
			SmState_P1 = STATE_PLAYER_Back;
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <Sm_P1_DashBack+0x58>)
 8005454:	2206      	movs	r2, #6
 8005456:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_NeutralPressed_Int1)
 8005458:	4b08      	ldr	r3, [pc, #32]	; (800547c <Sm_P1_DashBack+0x54>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b04      	cmp	r3, #4
 800545e:	d102      	bne.n	8005466 <Sm_P1_DashBack+0x3e>
			SmState_P1 = STATE_PLAYER_Idle;
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <Sm_P1_DashBack+0x58>)
 8005462:	2202      	movs	r2, #2
 8005464:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_ATKPressed_Int1)
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <Sm_P1_DashBack+0x54>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b08      	cmp	r3, #8
 800546c:	d102      	bne.n	8005474 <Sm_P1_DashBack+0x4c>
			SmState_P1 = STATE_PLAYER_ATK1;
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <Sm_P1_DashBack+0x58>)
 8005470:	2208      	movs	r2, #8
 8005472:	701a      	strb	r2, [r3, #0]

}
 8005474:	bf00      	nop
 8005476:	bd80      	pop	{r7, pc}
 8005478:	0800600c 	.word	0x0800600c
 800547c:	20000088 	.word	0x20000088
 8005480:	2000115c 	.word	0x2000115c

08005484 <Sm_P1_Back>:
void Sm_P1_Back(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_bck");
 8005488:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <Sm_P1_Back+0x60>)
 800548a:	2100      	movs	r1, #0
 800548c:	2000      	movs	r0, #0
 800548e:	f7ff fc21 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Back;
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <Sm_P1_Back+0x64>)
 8005494:	2206      	movs	r2, #6
 8005496:	701a      	strb	r2, [r3, #0]
	if(lerDoInput1(1) == 'L' && lerDoInput1(3)== 'L')
 8005498:	2001      	movs	r0, #1
 800549a:	f7fe ff6b 	bl	8004374 <lerDoInput1>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b4c      	cmp	r3, #76	; 0x4c
 80054a2:	d109      	bne.n	80054b8 <Sm_P1_Back+0x34>
 80054a4:	2003      	movs	r0, #3
 80054a6:	f7fe ff65 	bl	8004374 <lerDoInput1>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b4c      	cmp	r3, #76	; 0x4c
 80054ae:	d103      	bne.n	80054b8 <Sm_P1_Back+0x34>
	{
		SmState_P1 = STATE_PLAYER_DashBack;
 80054b0:	4b0d      	ldr	r3, [pc, #52]	; (80054e8 <Sm_P1_Back+0x64>)
 80054b2:	2207      	movs	r2, #7
 80054b4:	701a      	strb	r2, [r3, #0]
		return;
 80054b6:	e014      	b.n	80054e2 <Sm_P1_Back+0x5e>
	}
	if(SmState_Int1==STATE_RightPressed_Int1)
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <Sm_P1_Back+0x68>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d102      	bne.n	80054c6 <Sm_P1_Back+0x42>
		SmState_P1 = STATE_PLAYER_Forward;
 80054c0:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <Sm_P1_Back+0x64>)
 80054c2:	2204      	movs	r2, #4
 80054c4:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_NeutralPressed_Int1)
 80054c6:	4b09      	ldr	r3, [pc, #36]	; (80054ec <Sm_P1_Back+0x68>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d102      	bne.n	80054d4 <Sm_P1_Back+0x50>
		SmState_P1 = STATE_PLAYER_Idle;
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <Sm_P1_Back+0x64>)
 80054d0:	2202      	movs	r2, #2
 80054d2:	701a      	strb	r2, [r3, #0]
	if(SmState_Int1==STATE_ATKPressed_Int1)
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <Sm_P1_Back+0x68>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d102      	bne.n	80054e2 <Sm_P1_Back+0x5e>
		SmState_P1 = STATE_PLAYER_ATK1;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <Sm_P1_Back+0x64>)
 80054de:	2208      	movs	r2, #8
 80054e0:	701a      	strb	r2, [r3, #0]
}
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	0800601c 	.word	0x0800601c
 80054e8:	2000115c 	.word	0x2000115c
 80054ec:	20000088 	.word	0x20000088

080054f0 <Sm_P1_ATK1>:
void Sm_P1_ATK1(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_at1");
 80054f4:	4a08      	ldr	r2, [pc, #32]	; (8005518 <Sm_P1_ATK1+0x28>)
 80054f6:	2100      	movs	r1, #0
 80054f8:	2000      	movs	r0, #0
 80054fa:	f7ff fbeb 	bl	8004cd4 <print_seguro>
#endif
	SmState_P1 = STATE_PLAYER_ATK1;
 80054fe:	4b07      	ldr	r3, [pc, #28]	; (800551c <Sm_P1_ATK1+0x2c>)
 8005500:	2208      	movs	r2, #8
 8005502:	701a      	strb	r2, [r3, #0]
	osDelay(400);
 8005504:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005508:	f7fc fde7 	bl	80020da <osDelay>
	SmState_P1 = STATE_PLAYER_ATK1_Recover;
 800550c:	4b03      	ldr	r3, [pc, #12]	; (800551c <Sm_P1_ATK1+0x2c>)
 800550e:	2209      	movs	r2, #9
 8005510:	701a      	strb	r2, [r3, #0]
}
 8005512:	bf00      	nop
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	0800602c 	.word	0x0800602c
 800551c:	2000115c 	.word	0x2000115c

08005520 <Sm_P1_ATK2>:
void Sm_P1_ATK2(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_at2");
 8005524:	4a08      	ldr	r2, [pc, #32]	; (8005548 <Sm_P1_ATK2+0x28>)
 8005526:	2100      	movs	r1, #0
 8005528:	2000      	movs	r0, #0
 800552a:	f7ff fbd3 	bl	8004cd4 <print_seguro>
#endif
	SmState_P1 = STATE_PLAYER_ATK2;
 800552e:	4b07      	ldr	r3, [pc, #28]	; (800554c <Sm_P1_ATK2+0x2c>)
 8005530:	220a      	movs	r2, #10
 8005532:	701a      	strb	r2, [r3, #0]
	osDelay(600);
 8005534:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005538:	f7fc fdcf 	bl	80020da <osDelay>
	SmState_P1 = STATE_PLAYER_ATK2_Recover;
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <Sm_P1_ATK2+0x2c>)
 800553e:	220b      	movs	r2, #11
 8005540:	701a      	strb	r2, [r3, #0]
}
 8005542:	bf00      	nop
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	0800603c 	.word	0x0800603c
 800554c:	2000115c 	.word	0x2000115c

08005550 <Sm_P1_ATK2_Recover>:

void Sm_P1_ATK2_Recover(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_2re");
 8005554:	4a0e      	ldr	r2, [pc, #56]	; (8005590 <Sm_P1_ATK2_Recover+0x40>)
 8005556:	2100      	movs	r1, #0
 8005558:	2000      	movs	r0, #0
 800555a:	f7ff fbbb 	bl	8004cd4 <print_seguro>
	#endif
	osDelay(1000);
 800555e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005562:	f7fc fdba 	bl	80020da <osDelay>
	if(SmState_Int1==STATE_LeftPressed_Int1)
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <Sm_P1_ATK2_Recover+0x44>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d103      	bne.n	8005576 <Sm_P1_ATK2_Recover+0x26>
			SmState_P1 = STATE_PLAYER_Back;
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <Sm_P1_ATK2_Recover+0x48>)
 8005570:	2206      	movs	r2, #6
 8005572:	701a      	strb	r2, [r3, #0]
	else
		if(SmState_Int1==STATE_RightPressed_Int1)
			SmState_P1 = STATE_PLAYER_Forward;
		else
			SmState_P1 = STATE_PLAYER_Idle_Recover;
}
 8005574:	e00a      	b.n	800558c <Sm_P1_ATK2_Recover+0x3c>
		if(SmState_Int1==STATE_RightPressed_Int1)
 8005576:	4b07      	ldr	r3, [pc, #28]	; (8005594 <Sm_P1_ATK2_Recover+0x44>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d103      	bne.n	8005586 <Sm_P1_ATK2_Recover+0x36>
			SmState_P1 = STATE_PLAYER_Forward;
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <Sm_P1_ATK2_Recover+0x48>)
 8005580:	2204      	movs	r2, #4
 8005582:	701a      	strb	r2, [r3, #0]
}
 8005584:	e002      	b.n	800558c <Sm_P1_ATK2_Recover+0x3c>
			SmState_P1 = STATE_PLAYER_Idle_Recover;
 8005586:	4b04      	ldr	r3, [pc, #16]	; (8005598 <Sm_P1_ATK2_Recover+0x48>)
 8005588:	2203      	movs	r2, #3
 800558a:	701a      	strb	r2, [r3, #0]
}
 800558c:	bf00      	nop
 800558e:	bd80      	pop	{r7, pc}
 8005590:	0800604c 	.word	0x0800604c
 8005594:	20000088 	.word	0x20000088
 8005598:	2000115c 	.word	0x2000115c

0800559c <Sm_P1_ATK1_Recover>:

void Sm_P1_ATK1_Recover(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_1re");
 80055a0:	4a16      	ldr	r2, [pc, #88]	; (80055fc <Sm_P1_ATK1_Recover+0x60>)
 80055a2:	2100      	movs	r1, #0
 80055a4:	2000      	movs	r0, #0
 80055a6:	f7ff fb95 	bl	8004cd4 <print_seguro>
#endif
	osDelay(200);
 80055aa:	20c8      	movs	r0, #200	; 0xc8
 80055ac:	f7fc fd95 	bl	80020da <osDelay>
	if(lerDoInput1(1) == 'A' && lerDoInput1(3)== 'A')
 80055b0:	2001      	movs	r0, #1
 80055b2:	f7fe fedf 	bl	8004374 <lerDoInput1>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b41      	cmp	r3, #65	; 0x41
 80055ba:	d109      	bne.n	80055d0 <Sm_P1_ATK1_Recover+0x34>
 80055bc:	2003      	movs	r0, #3
 80055be:	f7fe fed9 	bl	8004374 <lerDoInput1>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b41      	cmp	r3, #65	; 0x41
 80055c6:	d103      	bne.n	80055d0 <Sm_P1_ATK1_Recover+0x34>
	{
		SmState_P1 = STATE_PLAYER_ATK2;
 80055c8:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <Sm_P1_ATK1_Recover+0x64>)
 80055ca:	220a      	movs	r2, #10
 80055cc:	701a      	strb	r2, [r3, #0]
				SmState_P1 = STATE_PLAYER_Forward;
			else
				SmState_P1 = STATE_PLAYER_Idle_Recover;
		}
	}
}
 80055ce:	e012      	b.n	80055f6 <Sm_P1_ATK1_Recover+0x5a>
		if(SmState_Int1==STATE_LeftPressed_Int1)
 80055d0:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <Sm_P1_ATK1_Recover+0x68>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d103      	bne.n	80055e0 <Sm_P1_ATK1_Recover+0x44>
				SmState_P1 = STATE_PLAYER_Back;
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <Sm_P1_ATK1_Recover+0x64>)
 80055da:	2206      	movs	r2, #6
 80055dc:	701a      	strb	r2, [r3, #0]
}
 80055de:	e00a      	b.n	80055f6 <Sm_P1_ATK1_Recover+0x5a>
			if(SmState_Int1==STATE_RightPressed_Int1)
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <Sm_P1_ATK1_Recover+0x68>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d103      	bne.n	80055f0 <Sm_P1_ATK1_Recover+0x54>
				SmState_P1 = STATE_PLAYER_Forward;
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <Sm_P1_ATK1_Recover+0x64>)
 80055ea:	2204      	movs	r2, #4
 80055ec:	701a      	strb	r2, [r3, #0]
}
 80055ee:	e002      	b.n	80055f6 <Sm_P1_ATK1_Recover+0x5a>
				SmState_P1 = STATE_PLAYER_Idle_Recover;
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <Sm_P1_ATK1_Recover+0x64>)
 80055f2:	2203      	movs	r2, #3
 80055f4:	701a      	strb	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	0800605c 	.word	0x0800605c
 8005600:	2000115c 	.word	0x2000115c
 8005604:	20000088 	.word	0x20000088

08005608 <Sm_P1_Hit>:

void Sm_P1_Hit(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_hit");
 800560c:	4a04      	ldr	r2, [pc, #16]	; (8005620 <Sm_P1_Hit+0x18>)
 800560e:	2100      	movs	r1, #0
 8005610:	2000      	movs	r0, #0
 8005612:	f7ff fb5f 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Hit;
 8005616:	4b03      	ldr	r3, [pc, #12]	; (8005624 <Sm_P1_Hit+0x1c>)
 8005618:	220d      	movs	r2, #13
 800561a:	701a      	strb	r2, [r3, #0]
}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	0800606c 	.word	0x0800606c
 8005624:	2000115c 	.word	0x2000115c

08005628 <Sm_P1_Block>:

void Sm_P1_Block(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_blk");
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <Sm_P1_Block+0x18>)
 800562e:	2100      	movs	r1, #0
 8005630:	2000      	movs	r0, #0
 8005632:	f7ff fb4f 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Block;
 8005636:	4b03      	ldr	r3, [pc, #12]	; (8005644 <Sm_P1_Block+0x1c>)
 8005638:	220c      	movs	r2, #12
 800563a:	701a      	strb	r2, [r3, #0]
}
 800563c:	bf00      	nop
 800563e:	bd80      	pop	{r7, pc}
 8005640:	0800607c 	.word	0x0800607c
 8005644:	2000115c 	.word	0x2000115c

08005648 <Sm_P1_Dying>:
void Sm_P1_Dying(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_die");
 800564c:	4a04      	ldr	r2, [pc, #16]	; (8005660 <Sm_P1_Dying+0x18>)
 800564e:	2100      	movs	r1, #0
 8005650:	2000      	movs	r0, #0
 8005652:	f7ff fb3f 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Block;
 8005656:	4b03      	ldr	r3, [pc, #12]	; (8005664 <Sm_P1_Dying+0x1c>)
 8005658:	220c      	movs	r2, #12
 800565a:	701a      	strb	r2, [r3, #0]
}
 800565c:	bf00      	nop
 800565e:	bd80      	pop	{r7, pc}
 8005660:	0800608c 	.word	0x0800608c
 8005664:	2000115c 	.word	0x2000115c

08005668 <Sm_P1_Dead>:
void Sm_P1_Dead(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
	#ifdef DEBUG_p1
	print_seguro(0,0,"state: p1_ded");
 800566c:	4a04      	ldr	r2, [pc, #16]	; (8005680 <Sm_P1_Dead+0x18>)
 800566e:	2100      	movs	r1, #0
 8005670:	2000      	movs	r0, #0
 8005672:	f7ff fb2f 	bl	8004cd4 <print_seguro>
	#endif
	SmState_P1 = STATE_PLAYER_Dead;
 8005676:	4b03      	ldr	r3, [pc, #12]	; (8005684 <Sm_P1_Dead+0x1c>)
 8005678:	220f      	movs	r2, #15
 800567a:	701a      	strb	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	bd80      	pop	{r7, pc}
 8005680:	0800609c 	.word	0x0800609c
 8005684:	2000115c 	.word	0x2000115c

08005688 <Rodar_Maquina_P1>:

void Rodar_Maquina_P1(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
	if(SmState_P1 < NUM_STATES_PLAYER)
 800568c:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <Rodar_Maquina_P1+0x20>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b0f      	cmp	r3, #15
 8005692:	d807      	bhi.n	80056a4 <Rodar_Maquina_P1+0x1c>
	{
		(*StateMachine_P1[SmState_P1].func)();
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <Rodar_Maquina_P1+0x20>)
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	4a04      	ldr	r2, [pc, #16]	; (80056ac <Rodar_Maquina_P1+0x24>)
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	4413      	add	r3, r2
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4798      	blx	r3
 80056a2:	e000      	b.n	80056a6 <Rodar_Maquina_P1+0x1e>
	}
	else
	{
		return;
 80056a4:	bf00      	nop
	}
}
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	2000115c 	.word	0x2000115c
 80056ac:	200000d4 	.word	0x200000d4

080056b0 <Sm_P1View_MENU>:
	16,
 	{0x0, 0x0, 0x0, 0x84, 0x44, 0x3f, 0x25, 0x25, 0x25, 0x3f, 0x40, 0x80, 0x97, 0x40, 0x97, 0x0, 0x0, 0x0, 0xe1, 0x9a, 0x44, 0xa4, 0x25, 0x26, 0x20, 0x20, 0x48, 0x54, 0xa4, 0x42, 0x81, 0x0}
};

void Sm_P1View_MENU(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
	osDelay(1);
 80056b4:	2001      	movs	r0, #1
 80056b6:	f7fc fd10 	bl	80020da <osDelay>
}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <Sm_P1View_RoundStart>:
void Sm_P1View_RoundStart(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
	print_figura_seguro(&posP1, &p1_idle);
 80056c4:	4902      	ldr	r1, [pc, #8]	; (80056d0 <Sm_P1View_RoundStart+0x10>)
 80056c6:	4803      	ldr	r0, [pc, #12]	; (80056d4 <Sm_P1View_RoundStart+0x14>)
 80056c8:	f7ff fb48 	bl	8004d5c <print_figura_seguro>
}
 80056cc:	bf00      	nop
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	0800675c 	.word	0x0800675c
 80056d4:	200001d4 	.word	0x200001d4

080056d8 <Sm_P1View_Idle>:
void Sm_P1View_Idle(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
	print_figura_seguro(&posP1, &p1_idle);
 80056dc:	4902      	ldr	r1, [pc, #8]	; (80056e8 <Sm_P1View_Idle+0x10>)
 80056de:	4803      	ldr	r0, [pc, #12]	; (80056ec <Sm_P1View_Idle+0x14>)
 80056e0:	f7ff fb3c 	bl	8004d5c <print_figura_seguro>
}
 80056e4:	bf00      	nop
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	0800675c 	.word	0x0800675c
 80056ec:	200001d4 	.word	0x200001d4

080056f0 <Sm_P1View_Idle_Recover>:
void Sm_P1View_Idle_Recover(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
	print_figura_seguro(&posP1, &p1_idle);
 80056f4:	4902      	ldr	r1, [pc, #8]	; (8005700 <Sm_P1View_Idle_Recover+0x10>)
 80056f6:	4803      	ldr	r0, [pc, #12]	; (8005704 <Sm_P1View_Idle_Recover+0x14>)
 80056f8:	f7ff fb30 	bl	8004d5c <print_figura_seguro>
}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	0800675c 	.word	0x0800675c
 8005704:	200001d4 	.word	0x200001d4

08005708 <Sm_P1View_Forward>:
void Sm_P1View_Forward(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &p1_idle);
 800570c:	490a      	ldr	r1, [pc, #40]	; (8005738 <Sm_P1View_Forward+0x30>)
 800570e:	480b      	ldr	r0, [pc, #44]	; (800573c <Sm_P1View_Forward+0x34>)
 8005710:	f7ff fb04 	bl	8004d1c <deleta_figura_seguro>
	if(posP1.x1 < 70)
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <Sm_P1View_Forward+0x34>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b45      	cmp	r3, #69	; 0x45
 800571a:	d804      	bhi.n	8005726 <Sm_P1View_Forward+0x1e>
		posP1.x1=posP1.x1 + 1;
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <Sm_P1View_Forward+0x34>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a06      	ldr	r2, [pc, #24]	; (800573c <Sm_P1View_Forward+0x34>)
 8005724:	6013      	str	r3, [r2, #0]
	print_figura_seguro(&posP1, &p1_idle);
 8005726:	4904      	ldr	r1, [pc, #16]	; (8005738 <Sm_P1View_Forward+0x30>)
 8005728:	4804      	ldr	r0, [pc, #16]	; (800573c <Sm_P1View_Forward+0x34>)
 800572a:	f7ff fb17 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 800572e:	2078      	movs	r0, #120	; 0x78
 8005730:	f7fc fcd3 	bl	80020da <osDelay>
}
 8005734:	bf00      	nop
 8005736:	bd80      	pop	{r7, pc}
 8005738:	0800675c 	.word	0x0800675c
 800573c:	200001d4 	.word	0x200001d4

08005740 <Sm_P1View_DashForward>:

void Sm_P1View_DashForward(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &p1_idle);
 8005744:	490c      	ldr	r1, [pc, #48]	; (8005778 <Sm_P1View_DashForward+0x38>)
 8005746:	480d      	ldr	r0, [pc, #52]	; (800577c <Sm_P1View_DashForward+0x3c>)
 8005748:	f7ff fae8 	bl	8004d1c <deleta_figura_seguro>
	if(posP1.x1 < 60)
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <Sm_P1View_DashForward+0x3c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b3b      	cmp	r3, #59	; 0x3b
 8005752:	d805      	bhi.n	8005760 <Sm_P1View_DashForward+0x20>
	{
		posP1.x1=posP1.x1 + 10;
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <Sm_P1View_DashForward+0x3c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330a      	adds	r3, #10
 800575a:	4a08      	ldr	r2, [pc, #32]	; (800577c <Sm_P1View_DashForward+0x3c>)
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e002      	b.n	8005766 <Sm_P1View_DashForward+0x26>
	}
	else
	{
		posP1.x1=75;
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <Sm_P1View_DashForward+0x3c>)
 8005762:	224b      	movs	r2, #75	; 0x4b
 8005764:	601a      	str	r2, [r3, #0]
	}
	print_figura_seguro(&posP1, &dashfwd);
 8005766:	4906      	ldr	r1, [pc, #24]	; (8005780 <Sm_P1View_DashForward+0x40>)
 8005768:	4804      	ldr	r0, [pc, #16]	; (800577c <Sm_P1View_DashForward+0x3c>)
 800576a:	f7ff faf7 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 800576e:	2078      	movs	r0, #120	; 0x78
 8005770:	f7fc fcb3 	bl	80020da <osDelay>
}
 8005774:	bf00      	nop
 8005776:	bd80      	pop	{r7, pc}
 8005778:	0800675c 	.word	0x0800675c
 800577c:	200001d4 	.word	0x200001d4
 8005780:	080067ec 	.word	0x080067ec

08005784 <Sm_P1View_DashBack>:

void Sm_P1View_DashBack(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &p1_idle);
 8005788:	490a      	ldr	r1, [pc, #40]	; (80057b4 <Sm_P1View_DashBack+0x30>)
 800578a:	480b      	ldr	r0, [pc, #44]	; (80057b8 <Sm_P1View_DashBack+0x34>)
 800578c:	f7ff fac6 	bl	8004d1c <deleta_figura_seguro>
	if(posP1.x1 > 15)
 8005790:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <Sm_P1View_DashBack+0x34>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b0f      	cmp	r3, #15
 8005796:	d904      	bls.n	80057a2 <Sm_P1View_DashBack+0x1e>
	{
			posP1.x1=posP1.x1 - 10;
 8005798:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <Sm_P1View_DashBack+0x34>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3b0a      	subs	r3, #10
 800579e:	4a06      	ldr	r2, [pc, #24]	; (80057b8 <Sm_P1View_DashBack+0x34>)
 80057a0:	6013      	str	r3, [r2, #0]
	}
	print_figura_seguro(&posP1, &dashbck);
 80057a2:	4906      	ldr	r1, [pc, #24]	; (80057bc <Sm_P1View_DashBack+0x38>)
 80057a4:	4804      	ldr	r0, [pc, #16]	; (80057b8 <Sm_P1View_DashBack+0x34>)
 80057a6:	f7ff fad9 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 80057aa:	2078      	movs	r0, #120	; 0x78
 80057ac:	f7fc fc95 	bl	80020da <osDelay>
}
 80057b0:	bf00      	nop
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	0800675c 	.word	0x0800675c
 80057b8:	200001d4 	.word	0x200001d4
 80057bc:	080067c8 	.word	0x080067c8

080057c0 <Sm_P1View_Back>:
void Sm_P1View_Back(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &p1_idle);
 80057c4:	490a      	ldr	r1, [pc, #40]	; (80057f0 <Sm_P1View_Back+0x30>)
 80057c6:	480b      	ldr	r0, [pc, #44]	; (80057f4 <Sm_P1View_Back+0x34>)
 80057c8:	f7ff faa8 	bl	8004d1c <deleta_figura_seguro>
	if(posP1.x1 > 0)
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <Sm_P1View_Back+0x34>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d004      	beq.n	80057de <Sm_P1View_Back+0x1e>
		posP1.x1=posP1.x1 - 1;
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <Sm_P1View_Back+0x34>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	4a06      	ldr	r2, [pc, #24]	; (80057f4 <Sm_P1View_Back+0x34>)
 80057dc:	6013      	str	r3, [r2, #0]
	print_figura_seguro(&posP1, &p1_idle);
 80057de:	4904      	ldr	r1, [pc, #16]	; (80057f0 <Sm_P1View_Back+0x30>)
 80057e0:	4804      	ldr	r0, [pc, #16]	; (80057f4 <Sm_P1View_Back+0x34>)
 80057e2:	f7ff fabb 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 80057e6:	2078      	movs	r0, #120	; 0x78
 80057e8:	f7fc fc77 	bl	80020da <osDelay>
}
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	0800675c 	.word	0x0800675c
 80057f4:	200001d4 	.word	0x200001d4

080057f8 <Sm_P1View_ATK1>:
void Sm_P1View_ATK1(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &p1_idle);
 80057fc:	4906      	ldr	r1, [pc, #24]	; (8005818 <Sm_P1View_ATK1+0x20>)
 80057fe:	4807      	ldr	r0, [pc, #28]	; (800581c <Sm_P1View_ATK1+0x24>)
 8005800:	f7ff fa8c 	bl	8004d1c <deleta_figura_seguro>
	print_figura_seguro(&posP1, &ATK1);
 8005804:	4906      	ldr	r1, [pc, #24]	; (8005820 <Sm_P1View_ATK1+0x28>)
 8005806:	4805      	ldr	r0, [pc, #20]	; (800581c <Sm_P1View_ATK1+0x24>)
 8005808:	f7ff faa8 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 800580c:	2078      	movs	r0, #120	; 0x78
 800580e:	f7fc fc64 	bl	80020da <osDelay>
}
 8005812:	bf00      	nop
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	0800675c 	.word	0x0800675c
 800581c:	200001d4 	.word	0x200001d4
 8005820:	08006780 	.word	0x08006780

08005824 <Sm_P1View_ATK2>:
void Sm_P1View_ATK2(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &ATK1);
 8005828:	4906      	ldr	r1, [pc, #24]	; (8005844 <Sm_P1View_ATK2+0x20>)
 800582a:	4807      	ldr	r0, [pc, #28]	; (8005848 <Sm_P1View_ATK2+0x24>)
 800582c:	f7ff fa76 	bl	8004d1c <deleta_figura_seguro>
	print_figura_seguro(&posP1, &ATK2);
 8005830:	4906      	ldr	r1, [pc, #24]	; (800584c <Sm_P1View_ATK2+0x28>)
 8005832:	4805      	ldr	r0, [pc, #20]	; (8005848 <Sm_P1View_ATK2+0x24>)
 8005834:	f7ff fa92 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 8005838:	2078      	movs	r0, #120	; 0x78
 800583a:	f7fc fc4e 	bl	80020da <osDelay>
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	08006780 	.word	0x08006780
 8005848:	200001d4 	.word	0x200001d4
 800584c:	080067a4 	.word	0x080067a4

08005850 <Sm_P1View_ATK2_Recover>:

void Sm_P1View_ATK2_Recover(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &ATK2);
 8005854:	4906      	ldr	r1, [pc, #24]	; (8005870 <Sm_P1View_ATK2_Recover+0x20>)
 8005856:	4807      	ldr	r0, [pc, #28]	; (8005874 <Sm_P1View_ATK2_Recover+0x24>)
 8005858:	f7ff fa60 	bl	8004d1c <deleta_figura_seguro>
	print_figura_seguro(&posP1, &recover);
 800585c:	4906      	ldr	r1, [pc, #24]	; (8005878 <Sm_P1View_ATK2_Recover+0x28>)
 800585e:	4805      	ldr	r0, [pc, #20]	; (8005874 <Sm_P1View_ATK2_Recover+0x24>)
 8005860:	f7ff fa7c 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 8005864:	2078      	movs	r0, #120	; 0x78
 8005866:	f7fc fc38 	bl	80020da <osDelay>
}
 800586a:	bf00      	nop
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	080067a4 	.word	0x080067a4
 8005874:	200001d4 	.word	0x200001d4
 8005878:	08006810 	.word	0x08006810

0800587c <Sm_P1View_ATK1_Recover>:

void Sm_P1View_ATK1_Recover(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
	deleta_figura_seguro(&posP1, &ATK1);
 8005880:	4906      	ldr	r1, [pc, #24]	; (800589c <Sm_P1View_ATK1_Recover+0x20>)
 8005882:	4807      	ldr	r0, [pc, #28]	; (80058a0 <Sm_P1View_ATK1_Recover+0x24>)
 8005884:	f7ff fa4a 	bl	8004d1c <deleta_figura_seguro>
	print_figura_seguro(&posP1, &recover);
 8005888:	4906      	ldr	r1, [pc, #24]	; (80058a4 <Sm_P1View_ATK1_Recover+0x28>)
 800588a:	4805      	ldr	r0, [pc, #20]	; (80058a0 <Sm_P1View_ATK1_Recover+0x24>)
 800588c:	f7ff fa66 	bl	8004d5c <print_figura_seguro>
	osDelay(updateRate);
 8005890:	2078      	movs	r0, #120	; 0x78
 8005892:	f7fc fc22 	bl	80020da <osDelay>
}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	08006780 	.word	0x08006780
 80058a0:	200001d4 	.word	0x200001d4
 80058a4:	08006810 	.word	0x08006810

080058a8 <Sm_P1View_Hit>:

void Sm_P1View_Hit(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
	osDelay(1);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f7fc fc14 	bl	80020da <osDelay>
}
 80058b2:	bf00      	nop
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <Sm_P1View_Block>:

void Sm_P1View_Block(void)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	af00      	add	r7, sp, #0
	osDelay(1);
 80058ba:	2001      	movs	r0, #1
 80058bc:	f7fc fc0d 	bl	80020da <osDelay>
}
 80058c0:	bf00      	nop
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <Sm_P1View_Dying>:
void Sm_P1View_Dying(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
	osDelay(1);
 80058c8:	2001      	movs	r0, #1
 80058ca:	f7fc fc06 	bl	80020da <osDelay>
}
 80058ce:	bf00      	nop
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <Sm_P1View_Dead>:
void Sm_P1View_Dead(void)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	af00      	add	r7, sp, #0
	osDelay(1);
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7fc fbff 	bl	80020da <osDelay>
}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}

080058e0 <Rodar_Maquina_P1View>:

void Rodar_Maquina_P1View(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
	if(SmState_P1 < NUM_STATES_PLAYER)
 80058e4:	4b06      	ldr	r3, [pc, #24]	; (8005900 <Rodar_Maquina_P1View+0x20>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b0f      	cmp	r3, #15
 80058ea:	d807      	bhi.n	80058fc <Rodar_Maquina_P1View+0x1c>
	{
		(*StateMachine_P1View[SmState_P1].func)();
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <Rodar_Maquina_P1View+0x20>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	4a04      	ldr	r2, [pc, #16]	; (8005904 <Rodar_Maquina_P1View+0x24>)
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4798      	blx	r3
 80058fa:	e000      	b.n	80058fe <Rodar_Maquina_P1View+0x1e>
	}
	else
	{
		return;
 80058fc:	bf00      	nop
	}
}
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	2000115c 	.word	0x2000115c
 8005904:	20000154 	.word	0x20000154

08005908 <atraso_us>:
	return;
}


void atraso_us(uint32_t valor)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	asm volatile("mov r1, #const_us \n\t" // guarda em r1 valor da constante microsegundo para a frequencia
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f04f 0106 	mov.w	r1, #6
 8005916:	fb01 f103 	mul.w	r1, r1, r3

0800591a <r_ms68>:
 800591a:	3901      	subs	r1, #1
 800591c:	d1fd      	bne.n	800591a <r_ms68>
				 ::"r" (valor): "cc", "r1" ); // define variavel de c para entrada,
											  // O "cc" clobber indica que o assembler modifica o registrador de flags
											  // "r1" clobber indica que r1 é modificado


	return;
 800591e:	bf00      	nop
}
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr

08005928 <main>:
void P1View(void const *argument);
// Function Pointer for State Machines


int main(void)
{
 8005928:	b5b0      	push	{r4, r5, r7, lr}
 800592a:	b09e      	sub	sp, #120	; 0x78
 800592c:	af00      	add	r7, sp, #0
  HAL_Init();
 800592e:	f7fa fc0f 	bl	8000150 <HAL_Init>
  SystemClock_Config();
 8005932:	f7fe fbeb 	bl	800410c <SystemClock_Config>

  MX_GPIO_Init();
 8005936:	f7fe fb91 	bl	800405c <MX_GPIO_Init>
  MX_ADC1_Init();
 800593a:	f7fe fb33 	bl	8003fa4 <MX_ADC1_Init>
  MX_RTC_Init();
 800593e:	f7fe fb71 	bl	8004024 <MX_RTC_Init>
  osThreadDef(InterpreterTask, InputInterpreter, osPriorityNormal, 0, 32);
 8005942:	4b33      	ldr	r3, [pc, #204]	; (8005a10 <main+0xe8>)
 8005944:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8005948:	461d      	mov	r5, r3
 800594a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800594c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800594e:	682b      	ldr	r3, [r5, #0]
 8005950:	6023      	str	r3, [r4, #0]
  //osThreadDef(InterpreterTask, InputInterpreter2, osPriorityNormal, 0, 32);
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 64);
 8005952:	4b30      	ldr	r3, [pc, #192]	; (8005a14 <main+0xec>)
 8005954:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005958:	461d      	mov	r5, r3
 800595a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800595c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800595e:	682b      	ldr	r3, [r5, #0]
 8005960:	6023      	str	r3, [r4, #0]
  osThreadDef(botaoTask, ObservaBotao, osPriorityNormal, 0, 32);
 8005962:	4b2d      	ldr	r3, [pc, #180]	; (8005a18 <main+0xf0>)
 8005964:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005968:	461d      	mov	r5, r3
 800596a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800596c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800596e:	682b      	ldr	r3, [r5, #0]
 8005970:	6023      	str	r3, [r4, #0]
  osThreadDef(MenuTask, Menu, osPriorityNormal, 0, 128);
 8005972:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <main+0xf4>)
 8005974:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005978:	461d      	mov	r5, r3
 800597a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800597c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800597e:	682b      	ldr	r3, [r5, #0]
 8005980:	6023      	str	r3, [r4, #0]
  osThreadDef(P1Task, P1, osPriorityNormal, 0, 64);
 8005982:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <main+0xf8>)
 8005984:	f107 0414 	add.w	r4, r7, #20
 8005988:	461d      	mov	r5, r3
 800598a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800598e:	682b      	ldr	r3, [r5, #0]
 8005990:	6023      	str	r3, [r4, #0]
  osThreadDef(P1ViewTask, P1View, osPriorityNormal, 0, 64);
 8005992:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <main+0xfc>)
 8005994:	463c      	mov	r4, r7
 8005996:	461d      	mov	r5, r3
 8005998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800599a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800599c:	682b      	ldr	r3, [r5, #0]
 800599e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80059a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fc fb70 	bl	800208c <osThreadCreate>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <main+0x100>)
 80059b0:	601a      	str	r2, [r3, #0]
  InterpreterTaskHandle = osThreadCreate(osThread(InterpreterTask), NULL);
 80059b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fc fb67 	bl	800208c <osThreadCreate>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b1a      	ldr	r3, [pc, #104]	; (8005a2c <main+0x104>)
 80059c2:	601a      	str	r2, [r3, #0]
  botaoTaskHandle = osThreadCreate(osThread(botaoTask), NULL);
 80059c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fc fb5e 	bl	800208c <osThreadCreate>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b17      	ldr	r3, [pc, #92]	; (8005a30 <main+0x108>)
 80059d4:	601a      	str	r2, [r3, #0]
  MenuTaskHandle = osThreadCreate(osThread(MenuTask), NULL);
 80059d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fc fb55 	bl	800208c <osThreadCreate>
 80059e2:	4602      	mov	r2, r0
 80059e4:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <main+0x10c>)
 80059e6:	601a      	str	r2, [r3, #0]
  P1TaskHandle = osThreadCreate(osThread(P1Task), NULL);
 80059e8:	f107 0314 	add.w	r3, r7, #20
 80059ec:	2100      	movs	r1, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fc fb4c 	bl	800208c <osThreadCreate>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4b10      	ldr	r3, [pc, #64]	; (8005a38 <main+0x110>)
 80059f8:	601a      	str	r2, [r3, #0]
  P1ViewHandle = osThreadCreate(osThread(P1ViewTask), NULL);
 80059fa:	463b      	mov	r3, r7
 80059fc:	2100      	movs	r1, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fc fb44 	bl	800208c <osThreadCreate>
 8005a04:	4602      	mov	r2, r0
 8005a06:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <main+0x114>)
 8005a08:	601a      	str	r2, [r3, #0]
  osKernelStart();
 8005a0a:	f7fc fb38 	bl	800207e <osKernelStart>
  
  while (1)
 8005a0e:	e7fe      	b.n	8005a0e <main+0xe6>
 8005a10:	080060bc 	.word	0x080060bc
 8005a14:	080060dc 	.word	0x080060dc
 8005a18:	080060fc 	.word	0x080060fc
 8005a1c:	0800611c 	.word	0x0800611c
 8005a20:	08006138 	.word	0x08006138
 8005a24:	08006158 	.word	0x08006158
 8005a28:	200011e4 	.word	0x200011e4
 8005a2c:	200011e8 	.word	0x200011e8
 8005a30:	200011f0 	.word	0x200011f0
 8005a34:	200011f8 	.word	0x200011f8
 8005a38:	200011f4 	.word	0x200011f4
 8005a3c:	200011ec 	.word	0x200011ec

08005a40 <P1>:
}



void P1(void const * argument)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1);
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f7fc fb46 	bl	80020da <osDelay>
		Rodar_Maquina_P1();
 8005a4e:	f7ff fe1b 	bl	8005688 <Rodar_Maquina_P1>
		osDelay(1);
 8005a52:	e7f9      	b.n	8005a48 <P1+0x8>

08005a54 <Menu>:
	}
}

void Menu(void const * argument)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		Rodar_Maquina_Menu();
 8005a5c:	f7ff f838 	bl	8004ad0 <Rodar_Maquina_Menu>
 8005a60:	e7fc      	b.n	8005a5c <Menu+0x8>
	...

08005a64 <InputInterpreter>:
	}
}


void InputInterpreter(void const * argument)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start (&hadc2);
 8005a6c:	480a      	ldr	r0, [pc, #40]	; (8005a98 <InputInterpreter+0x34>)
 8005a6e:	f7fa fc79 	bl	8000364 <HAL_ADC_Start>
	input1 = xSemaphoreCreateBinary();
 8005a72:	2203      	movs	r2, #3
 8005a74:	2100      	movs	r1, #0
 8005a76:	2001      	movs	r0, #1
 8005a78:	f7fc fc5a 	bl	8002330 <xQueueGenericCreate>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <InputInterpreter+0x38>)
 8005a80:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(input1);
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <InputInterpreter+0x38>)
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f7fc fca8 	bl	80023e0 <xQueueGenericSend>
	for(;;)
	{
		Rodar_Maquina_Interpretador();
 8005a90:	f7fe fe48 	bl	8004724 <Rodar_Maquina_Interpretador>
 8005a94:	e7fc      	b.n	8005a90 <InputInterpreter+0x2c>
 8005a96:	bf00      	nop
 8005a98:	20001170 	.word	0x20001170
 8005a9c:	2000116c 	.word	0x2000116c

08005aa0 <StartDefaultTask>:
	}
}
void StartDefaultTask(void const * argument)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	 tela = xSemaphoreCreateBinary();
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	2100      	movs	r1, #0
 8005aac:	2001      	movs	r0, #1
 8005aae:	f7fc fc3f 	bl	8002330 <xQueueGenericCreate>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	4b09      	ldr	r3, [pc, #36]	; (8005adc <StartDefaultTask+0x3c>)
 8005ab6:	601a      	str	r2, [r3, #0]
	  inic_LCD();
 8005ab8:	f7ff f8ae 	bl	8004c18 <inic_LCD>
	  limpa_LCD();
 8005abc:	f7ff f9be 	bl	8004e3c <limpa_LCD>
	  xSemaphoreGive(tela);
 8005ac0:	4b06      	ldr	r3, [pc, #24]	; (8005adc <StartDefaultTask+0x3c>)
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2100      	movs	r1, #0
 8005aca:	f7fc fc89 	bl	80023e0 <xQueueGenericSend>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(41);
 8005ace:	2029      	movs	r0, #41	; 0x29
 8005ad0:	f7fc fb03 	bl	80020da <osDelay>
	  imprime_LCD();
 8005ad4:	f7ff f8e4 	bl	8004ca0 <imprime_LCD>
	  osDelay(41);
 8005ad8:	e7f9      	b.n	8005ace <StartDefaultTask+0x2e>
 8005ada:	bf00      	nop
 8005adc:	20001164 	.word	0x20001164

08005ae0 <ObservaBotao>:
  }
  /* USER CODE END 5 */
}
void ObservaBotao(void const *argument)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Rodar_Maquina_Botao1();
 8005ae8:	f7fe fbfc 	bl	80042e4 <Rodar_Maquina_Botao1>
 8005aec:	e7fc      	b.n	8005ae8 <ObservaBotao+0x8>

08005aee <P1View>:
	}
}

void P1View(void const *argument)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b082      	sub	sp, #8
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Rodar_Maquina_P1View();
 8005af6:	f7ff fef3 	bl	80058e0 <Rodar_Maquina_P1View>
 8005afa:	e7fc      	b.n	8005af6 <P1View+0x8>

08005afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b02:	4b18      	ldr	r3, [pc, #96]	; (8005b64 <HAL_MspInit+0x68>)
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	4a17      	ldr	r2, [pc, #92]	; (8005b64 <HAL_MspInit+0x68>)
 8005b08:	f043 0301 	orr.w	r3, r3, #1
 8005b0c:	6193      	str	r3, [r2, #24]
 8005b0e:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <HAL_MspInit+0x68>)
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	60bb      	str	r3, [r7, #8]
 8005b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <HAL_MspInit+0x68>)
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	4a11      	ldr	r2, [pc, #68]	; (8005b64 <HAL_MspInit+0x68>)
 8005b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b24:	61d3      	str	r3, [r2, #28]
 8005b26:	4b0f      	ldr	r3, [pc, #60]	; (8005b64 <HAL_MspInit+0x68>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	607b      	str	r3, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005b32:	2200      	movs	r2, #0
 8005b34:	210f      	movs	r1, #15
 8005b36:	f06f 0001 	mvn.w	r0, #1
 8005b3a:	f7fb f800 	bl	8000b3e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8005b3e:	4b0a      	ldr	r3, [pc, #40]	; (8005b68 <HAL_MspInit+0x6c>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <HAL_MspInit+0x6c>)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40021000 	.word	0x40021000
 8005b68:	40010000 	.word	0x40010000

08005b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b08a      	sub	sp, #40	; 0x28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b74:	f107 0318 	add.w	r3, r7, #24
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <HAL_ADC_MspInit+0xbc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d122      	bne.n	8005bd2 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005b8c:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	4a26      	ldr	r2, [pc, #152]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b96:	6193      	str	r3, [r2, #24]
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005baa:	f043 0304 	orr.w	r3, r3, #4
 8005bae:	6193      	str	r3, [r2, #24]
 8005bb0:	4b1e      	ldr	r3, [pc, #120]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bc4:	f107 0318 	add.w	r3, r7, #24
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4819      	ldr	r0, [pc, #100]	; (8005c30 <HAL_ADC_MspInit+0xc4>)
 8005bcc:	f7fa ffe2 	bl	8000b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005bd0:	e026      	b.n	8005c20 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <HAL_ADC_MspInit+0xc8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d121      	bne.n	8005c20 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005be6:	6193      	str	r3, [r2, #24]
 8005be8:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005bfa:	f043 0304 	orr.w	r3, r3, #4
 8005bfe:	6193      	str	r3, [r2, #24]
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <HAL_ADC_MspInit+0xc0>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	60bb      	str	r3, [r7, #8]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c10:	2303      	movs	r3, #3
 8005c12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c14:	f107 0318 	add.w	r3, r7, #24
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4805      	ldr	r0, [pc, #20]	; (8005c30 <HAL_ADC_MspInit+0xc4>)
 8005c1c:	f7fa ffba 	bl	8000b94 <HAL_GPIO_Init>
}
 8005c20:	bf00      	nop
 8005c22:	3728      	adds	r7, #40	; 0x28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40012400 	.word	0x40012400
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	40010800 	.word	0x40010800
 8005c34:	40012800 	.word	0x40012800

08005c38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <HAL_RTC_MspInit+0x3c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d110      	bne.n	8005c6c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005c4a:	f7fb f92d 	bl	8000ea8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <HAL_RTC_MspInit+0x40>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	4a09      	ldr	r2, [pc, #36]	; (8005c78 <HAL_RTC_MspInit+0x40>)
 8005c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c58:	61d3      	str	r3, [r2, #28]
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <HAL_RTC_MspInit+0x40>)
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RTC_MspInit+0x44>)
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40002800 	.word	0x40002800
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	4242043c 	.word	0x4242043c

08005c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	; 0x30
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8005c90:	2200      	movs	r2, #0
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	201e      	movs	r0, #30
 8005c96:	f7fa ff52 	bl	8000b3e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8005c9a:	201e      	movs	r0, #30
 8005c9c:	f7fa ff6b 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8005ca0:	4b1e      	ldr	r3, [pc, #120]	; (8005d1c <HAL_InitTick+0x9c>)
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <HAL_InitTick+0x9c>)
 8005ca6:	f043 0304 	orr.w	r3, r3, #4
 8005caa:	61d3      	str	r3, [r2, #28]
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <HAL_InitTick+0x9c>)
 8005cae:	69db      	ldr	r3, [r3, #28]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	60fb      	str	r3, [r7, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005cb8:	f107 0210 	add.w	r2, r7, #16
 8005cbc:	f107 0314 	add.w	r3, r7, #20
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fb fcfa 	bl	80016bc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fb fcd0 	bl	800166c <HAL_RCC_GetPCLK1Freq>
 8005ccc:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <HAL_InitTick+0xa0>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	0c9b      	lsrs	r3, r3, #18
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8005cdc:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <HAL_InitTick+0xa4>)
 8005cde:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <HAL_InitTick+0xa8>)
 8005ce0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8005ce2:	4b10      	ldr	r3, [pc, #64]	; (8005d24 <HAL_InitTick+0xa4>)
 8005ce4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ce8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8005cea:	4a0e      	ldr	r2, [pc, #56]	; (8005d24 <HAL_InitTick+0xa4>)
 8005cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cee:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <HAL_InitTick+0xa4>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_InitTick+0xa4>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8005cfc:	4809      	ldr	r0, [pc, #36]	; (8005d24 <HAL_InitTick+0xa4>)
 8005cfe:	f7fb ffb0 	bl	8001c62 <HAL_TIM_Base_Init>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d104      	bne.n	8005d12 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8005d08:	4806      	ldr	r0, [pc, #24]	; (8005d24 <HAL_InitTick+0xa4>)
 8005d0a:	f7fb ffde 	bl	8001cca <HAL_TIM_Base_Start_IT>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	e000      	b.n	8005d14 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3730      	adds	r7, #48	; 0x30
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40021000 	.word	0x40021000
 8005d20:	431bde83 	.word	0x431bde83
 8005d24:	20001200 	.word	0x20001200
 8005d28:	40000800 	.word	0x40000800

08005d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d3c:	e7fe      	b.n	8005d3c <HardFault_Handler+0x4>

08005d3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d42:	e7fe      	b.n	8005d42 <MemManage_Handler+0x4>

08005d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d48:	e7fe      	b.n	8005d48 <BusFault_Handler+0x4>

08005d4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d4e:	e7fe      	b.n	8005d4e <UsageFault_Handler+0x4>

08005d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005d60:	4802      	ldr	r0, [pc, #8]	; (8005d6c <TIM4_IRQHandler+0x10>)
 8005d62:	f7fb ffd5 	bl	8001d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005d66:	bf00      	nop
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20001200 	.word	0x20001200

08005d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005d74:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <SystemInit+0x5c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a14      	ldr	r2, [pc, #80]	; (8005dcc <SystemInit+0x5c>)
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005d80:	4b12      	ldr	r3, [pc, #72]	; (8005dcc <SystemInit+0x5c>)
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	4911      	ldr	r1, [pc, #68]	; (8005dcc <SystemInit+0x5c>)
 8005d86:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <SystemInit+0x60>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005d8c:	4b0f      	ldr	r3, [pc, #60]	; (8005dcc <SystemInit+0x5c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a0e      	ldr	r2, [pc, #56]	; (8005dcc <SystemInit+0x5c>)
 8005d92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <SystemInit+0x5c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0a      	ldr	r2, [pc, #40]	; (8005dcc <SystemInit+0x5c>)
 8005da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005da6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <SystemInit+0x5c>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	4a07      	ldr	r2, [pc, #28]	; (8005dcc <SystemInit+0x5c>)
 8005dae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005db2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8005db4:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <SystemInit+0x5c>)
 8005db6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005dba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <SystemInit+0x64>)
 8005dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dc2:	609a      	str	r2, [r3, #8]
#endif 
}
 8005dc4:	bf00      	nop
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bc80      	pop	{r7}
 8005dca:	4770      	bx	lr
 8005dcc:	40021000 	.word	0x40021000
 8005dd0:	f8ff0000 	.word	0xf8ff0000
 8005dd4:	e000ed00 	.word	0xe000ed00

08005dd8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005dd8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005dda:	e003      	b.n	8005de4 <LoopCopyDataInit>

08005ddc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005dde:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005de0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005de2:	3104      	adds	r1, #4

08005de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005de4:	480a      	ldr	r0, [pc, #40]	; (8005e10 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005de8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005dea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005dec:	d3f6      	bcc.n	8005ddc <CopyDataInit>
  ldr r2, =_sbss
 8005dee:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005df0:	e002      	b.n	8005df8 <LoopFillZerobss>

08005df2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005df2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005df4:	f842 3b04 	str.w	r3, [r2], #4

08005df8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005dfa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005dfc:	d3f9      	bcc.n	8005df2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005dfe:	f7ff ffb7 	bl	8005d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e02:	f000 f80f 	bl	8005e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005e06:	f7ff fd8f 	bl	8005928 <main>
  bx lr
 8005e0a:	4770      	bx	lr
  ldr r3, =_sidata
 8005e0c:	08006854 	.word	0x08006854
  ldr r0, =_sdata
 8005e10:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005e14:	200001f0 	.word	0x200001f0
  ldr r2, =_sbss
 8005e18:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8005e1c:	20001240 	.word	0x20001240

08005e20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005e20:	e7fe      	b.n	8005e20 <ADC1_2_IRQHandler>
	...

08005e24 <__libc_init_array>:
 8005e24:	b570      	push	{r4, r5, r6, lr}
 8005e26:	2500      	movs	r5, #0
 8005e28:	4e0c      	ldr	r6, [pc, #48]	; (8005e5c <__libc_init_array+0x38>)
 8005e2a:	4c0d      	ldr	r4, [pc, #52]	; (8005e60 <__libc_init_array+0x3c>)
 8005e2c:	1ba4      	subs	r4, r4, r6
 8005e2e:	10a4      	asrs	r4, r4, #2
 8005e30:	42a5      	cmp	r5, r4
 8005e32:	d109      	bne.n	8005e48 <__libc_init_array+0x24>
 8005e34:	f000 f82e 	bl	8005e94 <_init>
 8005e38:	2500      	movs	r5, #0
 8005e3a:	4e0a      	ldr	r6, [pc, #40]	; (8005e64 <__libc_init_array+0x40>)
 8005e3c:	4c0a      	ldr	r4, [pc, #40]	; (8005e68 <__libc_init_array+0x44>)
 8005e3e:	1ba4      	subs	r4, r4, r6
 8005e40:	10a4      	asrs	r4, r4, #2
 8005e42:	42a5      	cmp	r5, r4
 8005e44:	d105      	bne.n	8005e52 <__libc_init_array+0x2e>
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
 8005e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e4c:	4798      	blx	r3
 8005e4e:	3501      	adds	r5, #1
 8005e50:	e7ee      	b.n	8005e30 <__libc_init_array+0xc>
 8005e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e56:	4798      	blx	r3
 8005e58:	3501      	adds	r5, #1
 8005e5a:	e7f2      	b.n	8005e42 <__libc_init_array+0x1e>
 8005e5c:	0800684c 	.word	0x0800684c
 8005e60:	0800684c 	.word	0x0800684c
 8005e64:	0800684c 	.word	0x0800684c
 8005e68:	08006850 	.word	0x08006850

08005e6c <memcpy>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	1e43      	subs	r3, r0, #1
 8005e70:	440a      	add	r2, r1
 8005e72:	4291      	cmp	r1, r2
 8005e74:	d100      	bne.n	8005e78 <memcpy+0xc>
 8005e76:	bd10      	pop	{r4, pc}
 8005e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e80:	e7f7      	b.n	8005e72 <memcpy+0x6>

08005e82 <memset>:
 8005e82:	4603      	mov	r3, r0
 8005e84:	4402      	add	r2, r0
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d100      	bne.n	8005e8c <memset+0xa>
 8005e8a:	4770      	bx	lr
 8005e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8005e90:	e7f9      	b.n	8005e86 <memset+0x4>
	...

08005e94 <_init>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr

08005ea0 <_fini>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr
